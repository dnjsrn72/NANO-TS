
BTL_BOOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092ac  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08009578  08009578  0000a578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009634  08009634  0000a634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08009638  08009638  0000a638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         000001b0  24000000  0800963c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001b20  240001b0  080097ec  0000b1b0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24001cd0  080097ec  0000bcd0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000b1b0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001397a  00000000  00000000  0000b1de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003535  00000000  00000000  0001eb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001058  00000000  00000000  00022090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000c3b  00000000  00000000  000230e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00033f4d  00000000  00000000  00023d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00016064  00000000  00000000  00057c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013cc4f  00000000  00000000  0006dcd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001aa923  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000420c  00000000  00000000  001aa968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000047  00000000  00000000  001aeb74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240001b0 	.word	0x240001b0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08009560 	.word	0x08009560

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240001b4 	.word	0x240001b4
 8000308:	08009560 	.word	0x08009560

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000310:	f000 faa4 	bl	800085c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000314:	f000 f806 	bl	8000324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000318:	f000 f874 	bl	8000404 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800031c:	f008 fb92 	bl	8008a44 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000320:	bf00      	nop
 8000322:	e7fd      	b.n	8000320 <main+0x14>

08000324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b09c      	sub	sp, #112	@ 0x70
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800032e:	224c      	movs	r2, #76	@ 0x4c
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f009 f8e8 	bl	8009508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2220      	movs	r2, #32
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f009 f8e2 	bl	8009508 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000344:	2002      	movs	r0, #2
 8000346:	f002 fa5b 	bl	8002800 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800034a:	2300      	movs	r3, #0
 800034c:	603b      	str	r3, [r7, #0]
 800034e:	4b2c      	ldr	r3, [pc, #176]	@ (8000400 <SystemClock_Config+0xdc>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	4a2b      	ldr	r2, [pc, #172]	@ (8000400 <SystemClock_Config+0xdc>)
 8000354:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000358:	6193      	str	r3, [r2, #24]
 800035a:	4b29      	ldr	r3, [pc, #164]	@ (8000400 <SystemClock_Config+0xdc>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000362:	603b      	str	r3, [r7, #0]
 8000364:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000366:	bf00      	nop
 8000368:	4b25      	ldr	r3, [pc, #148]	@ (8000400 <SystemClock_Config+0xdc>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000370:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000374:	d1f8      	bne.n	8000368 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000376:	2321      	movs	r3, #33	@ 0x21
 8000378:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800037a:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800037e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000380:	2301      	movs	r3, #1
 8000382:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000384:	2302      	movs	r3, #2
 8000386:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000388:	2302      	movs	r3, #2
 800038a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800038c:	2304      	movs	r3, #4
 800038e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000390:	f240 1313 	movw	r3, #275	@ 0x113
 8000394:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000396:	2301      	movs	r3, #1
 8000398:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800039a:	2304      	movs	r3, #4
 800039c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800039e:	2302      	movs	r3, #2
 80003a0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80003a2:	2304      	movs	r3, #4
 80003a4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003a6:	2300      	movs	r3, #0
 80003a8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003b2:	4618      	mov	r0, r3
 80003b4:	f002 fa6e 	bl	8002894 <HAL_RCC_OscConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80003be:	f000 f951 	bl	8000664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c2:	233f      	movs	r3, #63	@ 0x3f
 80003c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c6:	2303      	movs	r3, #3
 80003c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80003ce:	2308      	movs	r3, #8
 80003d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80003d2:	2340      	movs	r3, #64	@ 0x40
 80003d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80003d6:	2340      	movs	r3, #64	@ 0x40
 80003d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80003da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80003e0:	2340      	movs	r3, #64	@ 0x40
 80003e2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2103      	movs	r1, #3
 80003e8:	4618      	mov	r0, r3
 80003ea:	f002 fe2d 	bl	8003048 <HAL_RCC_ClockConfig>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80003f4:	f000 f936 	bl	8000664 <Error_Handler>
  }
}
 80003f8:	bf00      	nop
 80003fa:	3770      	adds	r7, #112	@ 0x70
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	58024800 	.word	0x58024800

08000404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b08c      	sub	sp, #48	@ 0x30
 8000408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040a:	f107 031c 	add.w	r3, r7, #28
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041a:	4b8b      	ldr	r3, [pc, #556]	@ (8000648 <MX_GPIO_Init+0x244>)
 800041c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000420:	4a89      	ldr	r2, [pc, #548]	@ (8000648 <MX_GPIO_Init+0x244>)
 8000422:	f043 0304 	orr.w	r3, r3, #4
 8000426:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800042a:	4b87      	ldr	r3, [pc, #540]	@ (8000648 <MX_GPIO_Init+0x244>)
 800042c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000430:	f003 0304 	and.w	r3, r3, #4
 8000434:	61bb      	str	r3, [r7, #24]
 8000436:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000438:	4b83      	ldr	r3, [pc, #524]	@ (8000648 <MX_GPIO_Init+0x244>)
 800043a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800043e:	4a82      	ldr	r2, [pc, #520]	@ (8000648 <MX_GPIO_Init+0x244>)
 8000440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000444:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000448:	4b7f      	ldr	r3, [pc, #508]	@ (8000648 <MX_GPIO_Init+0x244>)
 800044a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800044e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000452:	617b      	str	r3, [r7, #20]
 8000454:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000456:	4b7c      	ldr	r3, [pc, #496]	@ (8000648 <MX_GPIO_Init+0x244>)
 8000458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800045c:	4a7a      	ldr	r2, [pc, #488]	@ (8000648 <MX_GPIO_Init+0x244>)
 800045e:	f043 0301 	orr.w	r3, r3, #1
 8000462:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000466:	4b78      	ldr	r3, [pc, #480]	@ (8000648 <MX_GPIO_Init+0x244>)
 8000468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800046c:	f003 0301 	and.w	r3, r3, #1
 8000470:	613b      	str	r3, [r7, #16]
 8000472:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000474:	4b74      	ldr	r3, [pc, #464]	@ (8000648 <MX_GPIO_Init+0x244>)
 8000476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800047a:	4a73      	ldr	r2, [pc, #460]	@ (8000648 <MX_GPIO_Init+0x244>)
 800047c:	f043 0302 	orr.w	r3, r3, #2
 8000480:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000484:	4b70      	ldr	r3, [pc, #448]	@ (8000648 <MX_GPIO_Init+0x244>)
 8000486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800048a:	f003 0302 	and.w	r3, r3, #2
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000492:	4b6d      	ldr	r3, [pc, #436]	@ (8000648 <MX_GPIO_Init+0x244>)
 8000494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000498:	4a6b      	ldr	r2, [pc, #428]	@ (8000648 <MX_GPIO_Init+0x244>)
 800049a:	f043 0308 	orr.w	r3, r3, #8
 800049e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004a2:	4b69      	ldr	r3, [pc, #420]	@ (8000648 <MX_GPIO_Init+0x244>)
 80004a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004a8:	f003 0308 	and.w	r3, r3, #8
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80004b0:	4b65      	ldr	r3, [pc, #404]	@ (8000648 <MX_GPIO_Init+0x244>)
 80004b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004b6:	4a64      	ldr	r2, [pc, #400]	@ (8000648 <MX_GPIO_Init+0x244>)
 80004b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004c0:	4b61      	ldr	r3, [pc, #388]	@ (8000648 <MX_GPIO_Init+0x244>)
 80004c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ce:	4b5e      	ldr	r3, [pc, #376]	@ (8000648 <MX_GPIO_Init+0x244>)
 80004d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004d4:	4a5c      	ldr	r2, [pc, #368]	@ (8000648 <MX_GPIO_Init+0x244>)
 80004d6:	f043 0310 	orr.w	r3, r3, #16
 80004da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004de:	4b5a      	ldr	r3, [pc, #360]	@ (8000648 <MX_GPIO_Init+0x244>)
 80004e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004e4:	f003 0310 	and.w	r3, r3, #16
 80004e8:	603b      	str	r3, [r7, #0]
 80004ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f244 0101 	movw	r1, #16385	@ 0x4001
 80004f2:	4856      	ldr	r0, [pc, #344]	@ (800064c <MX_GPIO_Init+0x248>)
 80004f4:	f000 fef4 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004fe:	4854      	ldr	r0, [pc, #336]	@ (8000650 <MX_GPIO_Init+0x24c>)
 8000500:	f000 feee 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2102      	movs	r1, #2
 8000508:	4852      	ldr	r0, [pc, #328]	@ (8000654 <MX_GPIO_Init+0x250>)
 800050a:	f000 fee9 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800050e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000514:	2300      	movs	r3, #0
 8000516:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	2300      	movs	r3, #0
 800051a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800051c:	f107 031c 	add.w	r3, r7, #28
 8000520:	4619      	mov	r1, r3
 8000522:	484d      	ldr	r0, [pc, #308]	@ (8000658 <MX_GPIO_Init+0x254>)
 8000524:	f000 fd34 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000528:	2332      	movs	r3, #50	@ 0x32
 800052a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052c:	2302      	movs	r3, #2
 800052e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000534:	2300      	movs	r3, #0
 8000536:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000538:	230b      	movs	r3, #11
 800053a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800053c:	f107 031c 	add.w	r3, r7, #28
 8000540:	4619      	mov	r1, r3
 8000542:	4845      	ldr	r0, [pc, #276]	@ (8000658 <MX_GPIO_Init+0x254>)
 8000544:	f000 fd24 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000548:	2386      	movs	r3, #134	@ 0x86
 800054a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054c:	2302      	movs	r3, #2
 800054e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000554:	2300      	movs	r3, #0
 8000556:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000558:	230b      	movs	r3, #11
 800055a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055c:	f107 031c 	add.w	r3, r7, #28
 8000560:	4619      	mov	r1, r3
 8000562:	483e      	ldr	r0, [pc, #248]	@ (800065c <MX_GPIO_Init+0x258>)
 8000564:	f000 fd14 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000568:	f244 0301 	movw	r3, #16385	@ 0x4001
 800056c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056e:	2301      	movs	r3, #1
 8000570:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000576:	2300      	movs	r3, #0
 8000578:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	4619      	mov	r1, r3
 8000580:	4832      	ldr	r0, [pc, #200]	@ (800064c <MX_GPIO_Init+0x248>)
 8000582:	f000 fd05 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000586:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800058a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058c:	2302      	movs	r3, #2
 800058e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000594:	2300      	movs	r3, #0
 8000596:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000598:	230b      	movs	r3, #11
 800059a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800059c:	f107 031c 	add.w	r3, r7, #28
 80005a0:	4619      	mov	r1, r3
 80005a2:	482a      	ldr	r0, [pc, #168]	@ (800064c <MX_GPIO_Init+0x248>)
 80005a4:	f000 fcf4 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80005a8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80005ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ae:	2302      	movs	r3, #2
 80005b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80005ba:	2307      	movs	r3, #7
 80005bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	4619      	mov	r1, r3
 80005c4:	4822      	ldr	r0, [pc, #136]	@ (8000650 <MX_GPIO_Init+0x24c>)
 80005c6:	f000 fce3 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80005ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	2301      	movs	r3, #1
 80005d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	2300      	movs	r3, #0
 80005da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80005dc:	f107 031c 	add.w	r3, r7, #28
 80005e0:	4619      	mov	r1, r3
 80005e2:	481b      	ldr	r0, [pc, #108]	@ (8000650 <MX_GPIO_Init+0x24c>)
 80005e4:	f000 fcd4 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80005e8:	2380      	movs	r3, #128	@ 0x80
 80005ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4619      	mov	r1, r3
 80005fc:	4818      	ldr	r0, [pc, #96]	@ (8000660 <MX_GPIO_Init+0x25c>)
 80005fe:	f000 fcc7 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000602:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000608:	2302      	movs	r3, #2
 800060a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000610:	2300      	movs	r3, #0
 8000612:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000614:	230b      	movs	r3, #11
 8000616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4619      	mov	r1, r3
 800061e:	4810      	ldr	r0, [pc, #64]	@ (8000660 <MX_GPIO_Init+0x25c>)
 8000620:	f000 fcb6 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000624:	2302      	movs	r3, #2
 8000626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2300      	movs	r3, #0
 8000632:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4619      	mov	r1, r3
 800063a:	4806      	ldr	r0, [pc, #24]	@ (8000654 <MX_GPIO_Init+0x250>)
 800063c:	f000 fca8 	bl	8000f90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000640:	bf00      	nop
 8000642:	3730      	adds	r7, #48	@ 0x30
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	58024400 	.word	0x58024400
 800064c:	58020400 	.word	0x58020400
 8000650:	58020c00 	.word	0x58020c00
 8000654:	58021000 	.word	0x58021000
 8000658:	58020800 	.word	0x58020800
 800065c:	58020000 	.word	0x58020000
 8000660:	58021800 	.word	0x58021800

08000664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000668:	b672      	cpsid	i
}
 800066a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <Error_Handler+0x8>

08000670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000676:	4b0a      	ldr	r3, [pc, #40]	@ (80006a0 <HAL_MspInit+0x30>)
 8000678:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800067c:	4a08      	ldr	r2, [pc, #32]	@ (80006a0 <HAL_MspInit+0x30>)
 800067e:	f043 0302 	orr.w	r3, r3, #2
 8000682:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000686:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <HAL_MspInit+0x30>)
 8000688:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800068c:	f003 0302 	and.w	r3, r3, #2
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	58024400 	.word	0x58024400

080006a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <NMI_Handler+0x4>

080006ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <HardFault_Handler+0x4>

080006b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <MemManage_Handler+0x4>

080006bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <BusFault_Handler+0x4>

080006c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <UsageFault_Handler+0x4>

080006cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006fa:	f000 f921 	bl	8000940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000708:	4802      	ldr	r0, [pc, #8]	@ (8000714 <OTG_HS_IRQHandler+0x10>)
 800070a:	f000 ff7e 	bl	800160a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	240007c8 	.word	0x240007c8

08000718 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800071c:	4b32      	ldr	r3, [pc, #200]	@ (80007e8 <SystemInit+0xd0>)
 800071e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000722:	4a31      	ldr	r2, [pc, #196]	@ (80007e8 <SystemInit+0xd0>)
 8000724:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000728:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800072c:	4b2f      	ldr	r3, [pc, #188]	@ (80007ec <SystemInit+0xd4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f003 030f 	and.w	r3, r3, #15
 8000734:	2b06      	cmp	r3, #6
 8000736:	d807      	bhi.n	8000748 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000738:	4b2c      	ldr	r3, [pc, #176]	@ (80007ec <SystemInit+0xd4>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f023 030f 	bic.w	r3, r3, #15
 8000740:	4a2a      	ldr	r2, [pc, #168]	@ (80007ec <SystemInit+0xd4>)
 8000742:	f043 0307 	orr.w	r3, r3, #7
 8000746:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000748:	4b29      	ldr	r3, [pc, #164]	@ (80007f0 <SystemInit+0xd8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a28      	ldr	r2, [pc, #160]	@ (80007f0 <SystemInit+0xd8>)
 800074e:	f043 0301 	orr.w	r3, r3, #1
 8000752:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000754:	4b26      	ldr	r3, [pc, #152]	@ (80007f0 <SystemInit+0xd8>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800075a:	4b25      	ldr	r3, [pc, #148]	@ (80007f0 <SystemInit+0xd8>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4924      	ldr	r1, [pc, #144]	@ (80007f0 <SystemInit+0xd8>)
 8000760:	4b24      	ldr	r3, [pc, #144]	@ (80007f4 <SystemInit+0xdc>)
 8000762:	4013      	ands	r3, r2
 8000764:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000766:	4b21      	ldr	r3, [pc, #132]	@ (80007ec <SystemInit+0xd4>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f003 0308 	and.w	r3, r3, #8
 800076e:	2b00      	cmp	r3, #0
 8000770:	d007      	beq.n	8000782 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000772:	4b1e      	ldr	r3, [pc, #120]	@ (80007ec <SystemInit+0xd4>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f023 030f 	bic.w	r3, r3, #15
 800077a:	4a1c      	ldr	r2, [pc, #112]	@ (80007ec <SystemInit+0xd4>)
 800077c:	f043 0307 	orr.w	r3, r3, #7
 8000780:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000782:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <SystemInit+0xd8>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000788:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <SystemInit+0xd8>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800078e:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <SystemInit+0xd8>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000794:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <SystemInit+0xd8>)
 8000796:	4a18      	ldr	r2, [pc, #96]	@ (80007f8 <SystemInit+0xe0>)
 8000798:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800079a:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <SystemInit+0xd8>)
 800079c:	4a17      	ldr	r2, [pc, #92]	@ (80007fc <SystemInit+0xe4>)
 800079e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80007a0:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <SystemInit+0xd8>)
 80007a2:	4a17      	ldr	r2, [pc, #92]	@ (8000800 <SystemInit+0xe8>)
 80007a4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <SystemInit+0xd8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80007ac:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <SystemInit+0xd8>)
 80007ae:	4a14      	ldr	r2, [pc, #80]	@ (8000800 <SystemInit+0xe8>)
 80007b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <SystemInit+0xd8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <SystemInit+0xd8>)
 80007ba:	4a11      	ldr	r2, [pc, #68]	@ (8000800 <SystemInit+0xe8>)
 80007bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <SystemInit+0xd8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	@ (80007f0 <SystemInit+0xd8>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a09      	ldr	r2, [pc, #36]	@ (80007f0 <SystemInit+0xd8>)
 80007ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80007ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <SystemInit+0xd8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <SystemInit+0xec>)
 80007d8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007dc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	e000ed00 	.word	0xe000ed00
 80007ec:	52002000 	.word	0x52002000
 80007f0:	58024400 	.word	0x58024400
 80007f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007f8:	02020200 	.word	0x02020200
 80007fc:	01ff0000 	.word	0x01ff0000
 8000800:	01010280 	.word	0x01010280
 8000804:	52004000 	.word	0x52004000

08000808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000808:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000840 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800080c:	f7ff ff84 	bl	8000718 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000810:	480c      	ldr	r0, [pc, #48]	@ (8000844 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000812:	490d      	ldr	r1, [pc, #52]	@ (8000848 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000814:	4a0d      	ldr	r2, [pc, #52]	@ (800084c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000818:	e002      	b.n	8000820 <LoopCopyDataInit>

0800081a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800081c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081e:	3304      	adds	r3, #4

08000820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000824:	d3f9      	bcc.n	800081a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000826:	4a0a      	ldr	r2, [pc, #40]	@ (8000850 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000828:	4c0a      	ldr	r4, [pc, #40]	@ (8000854 <LoopFillZerobss+0x22>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800082c:	e001      	b.n	8000832 <LoopFillZerobss>

0800082e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000830:	3204      	adds	r2, #4

08000832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000834:	d3fb      	bcc.n	800082e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000836:	f008 fe6f 	bl	8009518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800083a:	f7ff fd67 	bl	800030c <main>
  bx  lr
 800083e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000840:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000844:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000848:	240001b0 	.word	0x240001b0
  ldr r2, =_sidata
 800084c:	0800963c 	.word	0x0800963c
  ldr r2, =_sbss
 8000850:	240001b0 	.word	0x240001b0
  ldr r4, =_ebss
 8000854:	24001cd0 	.word	0x24001cd0

08000858 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC3_IRQHandler>
	...

0800085c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000862:	2003      	movs	r0, #3
 8000864:	f000 f980 	bl	8000b68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000868:	f002 fda4 	bl	80033b4 <HAL_RCC_GetSysClockFreq>
 800086c:	4602      	mov	r2, r0
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <HAL_Init+0x68>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	0a1b      	lsrs	r3, r3, #8
 8000874:	f003 030f 	and.w	r3, r3, #15
 8000878:	4913      	ldr	r1, [pc, #76]	@ (80008c8 <HAL_Init+0x6c>)
 800087a:	5ccb      	ldrb	r3, [r1, r3]
 800087c:	f003 031f 	and.w	r3, r3, #31
 8000880:	fa22 f303 	lsr.w	r3, r2, r3
 8000884:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000886:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <HAL_Init+0x68>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	f003 030f 	and.w	r3, r3, #15
 800088e:	4a0e      	ldr	r2, [pc, #56]	@ (80008c8 <HAL_Init+0x6c>)
 8000890:	5cd3      	ldrb	r3, [r2, r3]
 8000892:	f003 031f 	and.w	r3, r3, #31
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	fa22 f303 	lsr.w	r3, r2, r3
 800089c:	4a0b      	ldr	r2, [pc, #44]	@ (80008cc <HAL_Init+0x70>)
 800089e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80008a0:	4a0b      	ldr	r2, [pc, #44]	@ (80008d0 <HAL_Init+0x74>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008a6:	2000      	movs	r0, #0
 80008a8:	f000 f814 	bl	80008d4 <HAL_InitTick>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e002      	b.n	80008bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008b6:	f7ff fedb 	bl	8000670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ba:	2300      	movs	r3, #0
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	58024400 	.word	0x58024400
 80008c8:	08009624 	.word	0x08009624
 80008cc:	24000004 	.word	0x24000004
 80008d0:	24000000 	.word	0x24000000

080008d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80008dc:	4b15      	ldr	r3, [pc, #84]	@ (8000934 <HAL_InitTick+0x60>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d101      	bne.n	80008e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80008e4:	2301      	movs	r3, #1
 80008e6:	e021      	b.n	800092c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80008e8:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <HAL_InitTick+0x64>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <HAL_InitTick+0x60>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f965 	bl	8000bce <HAL_SYSTICK_Config>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e00e      	b.n	800092c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b0f      	cmp	r3, #15
 8000912:	d80a      	bhi.n	800092a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000914:	2200      	movs	r2, #0
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	f000 f92f 	bl	8000b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000920:	4a06      	ldr	r2, [pc, #24]	@ (800093c <HAL_InitTick+0x68>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000926:	2300      	movs	r3, #0
 8000928:	e000      	b.n	800092c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	2400000c 	.word	0x2400000c
 8000938:	24000000 	.word	0x24000000
 800093c:	24000008 	.word	0x24000008

08000940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <HAL_IncTick+0x20>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <HAL_IncTick+0x24>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4a04      	ldr	r2, [pc, #16]	@ (8000964 <HAL_IncTick+0x24>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	2400000c 	.word	0x2400000c
 8000964:	240001cc 	.word	0x240001cc

08000968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return uwTick;
 800096c:	4b03      	ldr	r3, [pc, #12]	@ (800097c <HAL_GetTick+0x14>)
 800096e:	681b      	ldr	r3, [r3, #0]
}
 8000970:	4618      	mov	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	240001cc 	.word	0x240001cc

08000980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000988:	f7ff ffee 	bl	8000968 <HAL_GetTick>
 800098c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000998:	d005      	beq.n	80009a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800099a:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <HAL_Delay+0x44>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	461a      	mov	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4413      	add	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009a6:	bf00      	nop
 80009a8:	f7ff ffde 	bl	8000968 <HAL_GetTick>
 80009ac:	4602      	mov	r2, r0
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d8f7      	bhi.n	80009a8 <HAL_Delay+0x28>
  {
  }
}
 80009b8:	bf00      	nop
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2400000c 	.word	0x2400000c

080009c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <__NVIC_SetPriorityGrouping+0x40>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009e4:	4013      	ands	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009f2:	4313      	orrs	r3, r2
 80009f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009f6:	4a04      	ldr	r2, [pc, #16]	@ (8000a08 <__NVIC_SetPriorityGrouping+0x40>)
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	60d3      	str	r3, [r2, #12]
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000ed00 	.word	0xe000ed00
 8000a0c:	05fa0000 	.word	0x05fa0000

08000a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a14:	4b04      	ldr	r3, [pc, #16]	@ (8000a28 <__NVIC_GetPriorityGrouping+0x18>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	f003 0307 	and.w	r3, r3, #7
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	db0b      	blt.n	8000a56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	f003 021f 	and.w	r2, r3, #31
 8000a44:	4907      	ldr	r1, [pc, #28]	@ (8000a64 <__NVIC_EnableIRQ+0x38>)
 8000a46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a4a:	095b      	lsrs	r3, r3, #5
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000e100 	.word	0xe000e100

08000a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	6039      	str	r1, [r7, #0]
 8000a72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	db0a      	blt.n	8000a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	490c      	ldr	r1, [pc, #48]	@ (8000ab4 <__NVIC_SetPriority+0x4c>)
 8000a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a86:	0112      	lsls	r2, r2, #4
 8000a88:	b2d2      	uxtb	r2, r2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a90:	e00a      	b.n	8000aa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4908      	ldr	r1, [pc, #32]	@ (8000ab8 <__NVIC_SetPriority+0x50>)
 8000a98:	88fb      	ldrh	r3, [r7, #6]
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	3b04      	subs	r3, #4
 8000aa0:	0112      	lsls	r2, r2, #4
 8000aa2:	b2d2      	uxtb	r2, r2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	761a      	strb	r2, [r3, #24]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e100 	.word	0xe000e100
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b089      	sub	sp, #36	@ 0x24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	f1c3 0307 	rsb	r3, r3, #7
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	bf28      	it	cs
 8000ada:	2304      	movcs	r3, #4
 8000adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	2b06      	cmp	r3, #6
 8000ae4:	d902      	bls.n	8000aec <NVIC_EncodePriority+0x30>
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3b03      	subs	r3, #3
 8000aea:	e000      	b.n	8000aee <NVIC_EncodePriority+0x32>
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	f04f 32ff 	mov.w	r2, #4294967295
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43da      	mvns	r2, r3
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	401a      	ands	r2, r3
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b04:	f04f 31ff 	mov.w	r1, #4294967295
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0e:	43d9      	mvns	r1, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	4313      	orrs	r3, r2
         );
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3724      	adds	r7, #36	@ 0x24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b34:	d301      	bcc.n	8000b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00f      	b.n	8000b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <SysTick_Config+0x40>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b42:	210f      	movs	r1, #15
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f7ff ff8e 	bl	8000a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <SysTick_Config+0x40>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b52:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <SysTick_Config+0x40>)
 8000b54:	2207      	movs	r2, #7
 8000b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	e000e010 	.word	0xe000e010

08000b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ff29 	bl	80009c8 <__NVIC_SetPriorityGrouping>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
 8000b8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b8c:	f7ff ff40 	bl	8000a10 <__NVIC_GetPriorityGrouping>
 8000b90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	68b9      	ldr	r1, [r7, #8]
 8000b96:	6978      	ldr	r0, [r7, #20]
 8000b98:	f7ff ff90 	bl	8000abc <NVIC_EncodePriority>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff5f 	bl	8000a68 <__NVIC_SetPriority>
}
 8000baa:	bf00      	nop
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff33 	bl	8000a2c <__NVIC_EnableIRQ>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ffa4 	bl	8000b24 <SysTick_Config>
 8000bdc:	4603      	mov	r3, r0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	@ 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000c00:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc0 <HAL_FLASH_Program+0xd8>)
 8000c02:	7d1b      	ldrb	r3, [r3, #20]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d101      	bne.n	8000c0c <HAL_FLASH_Program+0x24>
 8000c08:	2302      	movs	r3, #2
 8000c0a:	e054      	b.n	8000cb6 <HAL_FLASH_Program+0xce>
 8000c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc0 <HAL_FLASH_Program+0xd8>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000c18:	d316      	bcc.n	8000c48 <HAL_FLASH_Program+0x60>
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8000c20:	d212      	bcs.n	8000c48 <HAL_FLASH_Program+0x60>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	617b      	str	r3, [r7, #20]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 8000c26:	bf00      	nop
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c28:	4b25      	ldr	r3, [pc, #148]	@ (8000cc0 <HAL_FLASH_Program+0xd8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8000c2e:	6979      	ldr	r1, [r7, #20]
 8000c30:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000c34:	f000 f882 	bl	8000d3c <FLASH_WaitForLastOperation>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 8000c3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d132      	bne.n	8000cac <HAL_FLASH_Program+0xc4>
 8000c46:	e001      	b.n	8000c4c <HAL_FLASH_Program+0x64>
    return HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e034      	b.n	8000cb6 <HAL_FLASH_Program+0xce>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc4 <HAL_FLASH_Program+0xdc>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	4a1c      	ldr	r2, [pc, #112]	@ (8000cc4 <HAL_FLASH_Program+0xdc>)
 8000c52:	f043 0302 	orr.w	r3, r3, #2
 8000c56:	60d3      	str	r3, [r2, #12]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000c58:	f3bf 8f6f 	isb	sy
}
 8000c5c:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c5e:	f3bf 8f4f 	dsb	sy
}
 8000c62:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	6a3b      	ldr	r3, [r7, #32]
 8000c6a:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
 8000c6e:	3304      	adds	r3, #4
 8000c70:	623b      	str	r3, [r7, #32]
        src_addr++;
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	61fb      	str	r3, [r7, #28]
        row_index--;
 8000c78:	7efb      	ldrb	r3, [r7, #27]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 8000c7e:	7efb      	ldrb	r3, [r7, #27]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d1ef      	bne.n	8000c64 <HAL_FLASH_Program+0x7c>
  __ASM volatile ("isb 0xF":::"memory");
 8000c84:	f3bf 8f6f 	isb	sy
}
 8000c88:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8000c8a:	f3bf 8f4f 	dsb	sy
}
 8000c8e:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8000c90:	6979      	ldr	r1, [r7, #20]
 8000c92:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000c96:	f000 f851 	bl	8000d3c <FLASH_WaitForLastOperation>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8000ca0:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <HAL_FLASH_Program+0xdc>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	4a07      	ldr	r2, [pc, #28]	@ (8000cc4 <HAL_FLASH_Program+0xdc>)
 8000ca6:	f023 0302 	bic.w	r3, r3, #2
 8000caa:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000cac:	4b04      	ldr	r3, [pc, #16]	@ (8000cc0 <HAL_FLASH_Program+0xd8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	751a      	strb	r2, [r3, #20]

  return status;
 8000cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3728      	adds	r7, #40	@ 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	240001d0 	.word	0x240001d0
 8000cc4:	52002000 	.word	0x52002000

08000cc8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <HAL_FLASH_Unlock+0x38>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d00d      	beq.n	8000cf4 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8000cd8:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <HAL_FLASH_Unlock+0x38>)
 8000cda:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <HAL_FLASH_Unlock+0x3c>)
 8000cdc:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8000cde:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <HAL_FLASH_Unlock+0x38>)
 8000ce0:	4a09      	ldr	r2, [pc, #36]	@ (8000d08 <HAL_FLASH_Unlock+0x40>)
 8000ce2:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <HAL_FLASH_Unlock+0x38>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e000      	b.n	8000cf6 <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	52002000 	.word	0x52002000
 8000d04:	45670123 	.word	0x45670123
 8000d08:	cdef89ab 	.word	0xcdef89ab

08000d0c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8000d10:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <HAL_FLASH_Lock+0x2c>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	4a08      	ldr	r2, [pc, #32]	@ (8000d38 <HAL_FLASH_Lock+0x2c>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_FLASH_Lock+0x2c>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d101      	bne.n	8000d2c <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e000      	b.n	8000d2e <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	52002000 	.word	0x52002000

08000d3c <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8000d46:	2304      	movs	r3, #4
 8000d48:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d4e:	f7ff fe0b 	bl	8000968 <HAL_GetTick>
 8000d52:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8000d54:	e010      	b.n	8000d78 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5c:	d00c      	beq.n	8000d78 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000d5e:	f7ff fe03 	bl	8000968 <HAL_GetTick>
 8000d62:	4602      	mov	r2, r0
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d302      	bcc.n	8000d74 <FLASH_WaitForLastOperation+0x38>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d101      	bne.n	8000d78 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8000d74:	2303      	movs	r3, #3
 8000d76:	e02d      	b.n	8000dd4 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8000d78:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <FLASH_WaitForLastOperation+0xa0>)
 8000d7a:	691a      	ldr	r2, [r3, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d0e7      	beq.n	8000d56 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d104      	bne.n	8000d96 <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8000d8c:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <FLASH_WaitForLastOperation+0xa0>)
 8000d8e:	691a      	ldr	r2, [r3, #16]
 8000d90:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <FLASH_WaitForLastOperation+0xa4>)
 8000d92:	4013      	ands	r3, r2
 8000d94:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00a      	beq.n	8000db6 <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8000da0:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <FLASH_WaitForLastOperation+0xa8>)
 8000da2:	699a      	ldr	r2, [r3, #24]
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	4a0e      	ldr	r2, [pc, #56]	@ (8000de4 <FLASH_WaitForLastOperation+0xa8>)
 8000daa:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8000dac:	4a0b      	ldr	r2, [pc, #44]	@ (8000ddc <FLASH_WaitForLastOperation+0xa0>)
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00e      	b.n	8000dd4 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d10a      	bne.n	8000dd2 <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8000dbc:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <FLASH_WaitForLastOperation+0xa0>)
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dc8:	d103      	bne.n	8000dd2 <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8000dca:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <FLASH_WaitForLastOperation+0xa0>)
 8000dcc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000dd0:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	52002000 	.word	0x52002000
 8000de0:	17ee0000 	.word	0x17ee0000
 8000de4:	240001d0 	.word	0x240001d0

08000de8 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000df6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ef4 <HAL_FLASHEx_Erase+0x10c>)
 8000df8:	7d1b      	ldrb	r3, [r3, #20]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d101      	bne.n	8000e02 <HAL_FLASHEx_Erase+0x1a>
 8000dfe:	2302      	movs	r3, #2
 8000e00:	e074      	b.n	8000eec <HAL_FLASHEx_Erase+0x104>
 8000e02:	4b3c      	ldr	r3, [pc, #240]	@ (8000ef4 <HAL_FLASHEx_Erase+0x10c>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e08:	4b3a      	ldr	r3, [pc, #232]	@ (8000ef4 <HAL_FLASHEx_Erase+0x10c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d009      	beq.n	8000e2e <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000e20:	f7ff ff8c 	bl	8000d3c <FLASH_WaitForLastOperation>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d157      	bne.n	8000ee4 <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d11e      	bne.n	8000e7a <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	691a      	ldr	r2, [r3, #16]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	4619      	mov	r1, r3
 8000e46:	4610      	mov	r0, r2
 8000e48:	f000 f85a 	bl	8000f00 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d045      	beq.n	8000ee4 <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8000e58:	2101      	movs	r1, #1
 8000e5a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000e5e:	f7ff ff6d 	bl	8000d3c <FLASH_WaitForLastOperation>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8000e6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ef8 <HAL_FLASHEx_Erase+0x110>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	4a21      	ldr	r2, [pc, #132]	@ (8000ef8 <HAL_FLASHEx_Erase+0x110>)
 8000e72:	f023 0308 	bic.w	r3, r3, #8
 8000e76:	60d3      	str	r3, [r2, #12]
 8000e78:	e034      	b.n	8000ee4 <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e80:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	e024      	b.n	8000ed4 <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6859      	ldr	r1, [r3, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	461a      	mov	r2, r3
 8000e94:	68b8      	ldr	r0, [r7, #8]
 8000e96:	f000 f857 	bl	8000f48 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d00c      	beq.n	8000ec0 <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000eac:	f7ff ff46 	bl	8000d3c <FLASH_WaitForLastOperation>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8000eb4:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <HAL_FLASHEx_Erase+0x110>)
 8000eb6:	68da      	ldr	r2, [r3, #12]
 8000eb8:	490f      	ldr	r1, [pc, #60]	@ (8000ef8 <HAL_FLASHEx_Erase+0x110>)
 8000eba:	4b10      	ldr	r3, [pc, #64]	@ (8000efc <HAL_FLASHEx_Erase+0x114>)
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	68ba      	ldr	r2, [r7, #8]
 8000eca:	601a      	str	r2, [r3, #0]
          break;
 8000ecc:	e00a      	b.n	8000ee4 <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68da      	ldr	r2, [r3, #12]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	4413      	add	r3, r2
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d3d2      	bcc.n	8000e8a <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000ee4:	4b03      	ldr	r3, [pc, #12]	@ (8000ef4 <HAL_FLASHEx_Erase+0x10c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	751a      	strb	r2, [r3, #20]

  return status;
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	240001d0 	.word	0x240001d0
 8000ef8:	52002000 	.word	0x52002000
 8000efc:	fffff8fb 	.word	0xfffff8fb

08000f00 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d011      	beq.n	8000f38 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8000f14:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <FLASH_MassErase+0x44>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	4a0a      	ldr	r2, [pc, #40]	@ (8000f44 <FLASH_MassErase+0x44>)
 8000f1a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000f1e:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8000f20:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <FLASH_MassErase+0x44>)
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	4907      	ldr	r1, [pc, #28]	@ (8000f44 <FLASH_MassErase+0x44>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8000f2c:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <FLASH_MassErase+0x44>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <FLASH_MassErase+0x44>)
 8000f32:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 8000f36:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	52002000 	.word	0x52002000

08000f48 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d010      	beq.n	8000f80 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <FLASH_Erase_Sector+0x44>)
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	4a0a      	ldr	r2, [pc, #40]	@ (8000f8c <FLASH_Erase_Sector+0x44>)
 8000f64:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 8000f68:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8000f6a:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <FLASH_Erase_Sector+0x44>)
 8000f6c:	68da      	ldr	r2, [r3, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	0219      	lsls	r1, r3, #8
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	430b      	orrs	r3, r1
 8000f76:	4313      	orrs	r3, r2
 8000f78:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <FLASH_Erase_Sector+0x44>)
 8000f7a:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 8000f7e:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	52002000 	.word	0x52002000

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	@ 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f9e:	4b86      	ldr	r3, [pc, #536]	@ (80011b8 <HAL_GPIO_Init+0x228>)
 8000fa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fa2:	e18c      	b.n	80012be <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	2101      	movs	r1, #1
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 817e 	beq.w	80012b8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d005      	beq.n	8000fd4 <HAL_GPIO_Init+0x44>
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d130      	bne.n	8001036 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	68da      	ldr	r2, [r3, #12]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800100a:	2201      	movs	r2, #1
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	091b      	lsrs	r3, r3, #4
 8001020:	f003 0201 	and.w	r2, r3, #1
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	2b03      	cmp	r3, #3
 8001040:	d017      	beq.n	8001072 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	2203      	movs	r2, #3
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d123      	bne.n	80010c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	220f      	movs	r2, #15
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	691a      	ldr	r2, [r3, #16]
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	08da      	lsrs	r2, r3, #3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3208      	adds	r2, #8
 80010c0:	69b9      	ldr	r1, [r7, #24]
 80010c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0203 	and.w	r2, r3, #3
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 80d8 	beq.w	80012b8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001108:	4b2c      	ldr	r3, [pc, #176]	@ (80011bc <HAL_GPIO_Init+0x22c>)
 800110a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800110e:	4a2b      	ldr	r2, [pc, #172]	@ (80011bc <HAL_GPIO_Init+0x22c>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001118:	4b28      	ldr	r3, [pc, #160]	@ (80011bc <HAL_GPIO_Init+0x22c>)
 800111a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001126:	4a26      	ldr	r2, [pc, #152]	@ (80011c0 <HAL_GPIO_Init+0x230>)
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	089b      	lsrs	r3, r3, #2
 800112c:	3302      	adds	r3, #2
 800112e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	220f      	movs	r2, #15
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a1d      	ldr	r2, [pc, #116]	@ (80011c4 <HAL_GPIO_Init+0x234>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d04a      	beq.n	80011e8 <HAL_GPIO_Init+0x258>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a1c      	ldr	r2, [pc, #112]	@ (80011c8 <HAL_GPIO_Init+0x238>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d02b      	beq.n	80011b2 <HAL_GPIO_Init+0x222>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a1b      	ldr	r2, [pc, #108]	@ (80011cc <HAL_GPIO_Init+0x23c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d025      	beq.n	80011ae <HAL_GPIO_Init+0x21e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a1a      	ldr	r2, [pc, #104]	@ (80011d0 <HAL_GPIO_Init+0x240>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d01f      	beq.n	80011aa <HAL_GPIO_Init+0x21a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a19      	ldr	r2, [pc, #100]	@ (80011d4 <HAL_GPIO_Init+0x244>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d019      	beq.n	80011a6 <HAL_GPIO_Init+0x216>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a18      	ldr	r2, [pc, #96]	@ (80011d8 <HAL_GPIO_Init+0x248>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d013      	beq.n	80011a2 <HAL_GPIO_Init+0x212>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a17      	ldr	r2, [pc, #92]	@ (80011dc <HAL_GPIO_Init+0x24c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d00d      	beq.n	800119e <HAL_GPIO_Init+0x20e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a16      	ldr	r2, [pc, #88]	@ (80011e0 <HAL_GPIO_Init+0x250>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d007      	beq.n	800119a <HAL_GPIO_Init+0x20a>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a15      	ldr	r2, [pc, #84]	@ (80011e4 <HAL_GPIO_Init+0x254>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d101      	bne.n	8001196 <HAL_GPIO_Init+0x206>
 8001192:	2309      	movs	r3, #9
 8001194:	e029      	b.n	80011ea <HAL_GPIO_Init+0x25a>
 8001196:	230a      	movs	r3, #10
 8001198:	e027      	b.n	80011ea <HAL_GPIO_Init+0x25a>
 800119a:	2307      	movs	r3, #7
 800119c:	e025      	b.n	80011ea <HAL_GPIO_Init+0x25a>
 800119e:	2306      	movs	r3, #6
 80011a0:	e023      	b.n	80011ea <HAL_GPIO_Init+0x25a>
 80011a2:	2305      	movs	r3, #5
 80011a4:	e021      	b.n	80011ea <HAL_GPIO_Init+0x25a>
 80011a6:	2304      	movs	r3, #4
 80011a8:	e01f      	b.n	80011ea <HAL_GPIO_Init+0x25a>
 80011aa:	2303      	movs	r3, #3
 80011ac:	e01d      	b.n	80011ea <HAL_GPIO_Init+0x25a>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e01b      	b.n	80011ea <HAL_GPIO_Init+0x25a>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e019      	b.n	80011ea <HAL_GPIO_Init+0x25a>
 80011b6:	bf00      	nop
 80011b8:	58000080 	.word	0x58000080
 80011bc:	58024400 	.word	0x58024400
 80011c0:	58000400 	.word	0x58000400
 80011c4:	58020000 	.word	0x58020000
 80011c8:	58020400 	.word	0x58020400
 80011cc:	58020800 	.word	0x58020800
 80011d0:	58020c00 	.word	0x58020c00
 80011d4:	58021000 	.word	0x58021000
 80011d8:	58021400 	.word	0x58021400
 80011dc:	58021800 	.word	0x58021800
 80011e0:	58021c00 	.word	0x58021c00
 80011e4:	58022400 	.word	0x58022400
 80011e8:	2300      	movs	r3, #0
 80011ea:	69fa      	ldr	r2, [r7, #28]
 80011ec:	f002 0203 	and.w	r2, r2, #3
 80011f0:	0092      	lsls	r2, r2, #2
 80011f2:	4093      	lsls	r3, r2
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011fa:	4938      	ldr	r1, [pc, #224]	@ (80012dc <HAL_GPIO_Init+0x34c>)
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	3302      	adds	r3, #2
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001208:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800122e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001236:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800125c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	3301      	adds	r3, #1
 80012bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	fa22 f303 	lsr.w	r3, r2, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f47f ae6b 	bne.w	8000fa4 <HAL_GPIO_Init+0x14>
  }
}
 80012ce:	bf00      	nop
 80012d0:	bf00      	nop
 80012d2:	3724      	adds	r7, #36	@ 0x24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	58000400 	.word	0x58000400

080012e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
 80012ec:	4613      	mov	r3, r2
 80012ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012f0:	787b      	ldrb	r3, [r7, #1]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f6:	887a      	ldrh	r2, [r7, #2]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80012fc:	e003      	b.n	8001306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012fe:	887b      	ldrh	r3, [r7, #2]
 8001300:	041a      	lsls	r2, r3, #16
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	619a      	str	r2, [r3, #24]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af02      	add	r7, sp, #8
 8001318:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e0fe      	b.n	8001522 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d106      	bne.n	800133e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f007 fdb1 	bl	8008ea0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2203      	movs	r2, #3
 8001342:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f003 fe05 	bl	8004f5a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	7c1a      	ldrb	r2, [r3, #16]
 8001358:	f88d 2000 	strb.w	r2, [sp]
 800135c:	3304      	adds	r3, #4
 800135e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001360:	f003 fcd6 	bl	8004d10 <USB_CoreInit>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d005      	beq.n	8001376 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2202      	movs	r2, #2
 800136e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e0d5      	b.n	8001522 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f003 fdfd 	bl	8004f7c <USB_SetCurrentMode>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2202      	movs	r2, #2
 800138c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e0c6      	b.n	8001522 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001394:	2300      	movs	r3, #0
 8001396:	73fb      	strb	r3, [r7, #15]
 8001398:	e04a      	b.n	8001430 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	3315      	adds	r3, #21
 80013aa:	2201      	movs	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013ae:	7bfa      	ldrb	r2, [r7, #15]
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	4613      	mov	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	4413      	add	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	440b      	add	r3, r1
 80013bc:	3314      	adds	r3, #20
 80013be:	7bfa      	ldrb	r2, [r7, #15]
 80013c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013c2:	7bfa      	ldrb	r2, [r7, #15]
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	b298      	uxth	r0, r3
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	4413      	add	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	440b      	add	r3, r1
 80013d4:	332e      	adds	r3, #46	@ 0x2e
 80013d6:	4602      	mov	r2, r0
 80013d8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013da:	7bfa      	ldrb	r2, [r7, #15]
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4413      	add	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	440b      	add	r3, r1
 80013e8:	3318      	adds	r3, #24
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	331c      	adds	r3, #28
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
 8001410:	3320      	adds	r3, #32
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	3324      	adds	r3, #36	@ 0x24
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	3301      	adds	r3, #1
 800142e:	73fb      	strb	r3, [r7, #15]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	791b      	ldrb	r3, [r3, #4]
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	429a      	cmp	r2, r3
 8001438:	d3af      	bcc.n	800139a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800143a:	2300      	movs	r3, #0
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	e044      	b.n	80014ca <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	4413      	add	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	440b      	add	r3, r1
 8001490:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001498:	7bfa      	ldrb	r2, [r7, #15]
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	4613      	mov	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	4413      	add	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	440b      	add	r3, r1
 80014a6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	440b      	add	r3, r1
 80014bc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	3301      	adds	r3, #1
 80014c8:	73fb      	strb	r3, [r7, #15]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	791b      	ldrb	r3, [r3, #4]
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d3b5      	bcc.n	8001440 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6818      	ldr	r0, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7c1a      	ldrb	r2, [r3, #16]
 80014dc:	f88d 2000 	strb.w	r2, [sp]
 80014e0:	3304      	adds	r3, #4
 80014e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014e4:	f003 fd96 	bl	8005014 <USB_DevInit>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d005      	beq.n	80014fa <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2202      	movs	r2, #2
 80014f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e013      	b.n	8001522 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7b1b      	ldrb	r3, [r3, #12]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d102      	bne.n	8001516 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f001 f945 	bl	80027a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f004 fcf9 	bl	8005f12 <USB_DevDisconnect>

  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800153e:	2b01      	cmp	r3, #1
 8001540:	d101      	bne.n	8001546 <HAL_PCD_Start+0x1c>
 8001542:	2302      	movs	r3, #2
 8001544:	e022      	b.n	800158c <HAL_PCD_Start+0x62>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001556:	2b00      	cmp	r3, #0
 8001558:	d009      	beq.n	800156e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800155e:	2b01      	cmp	r3, #1
 8001560:	d105      	bne.n	800156e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001566:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f003 fce0 	bl	8004f38 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f004 fca7 	bl	8005ed0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d101      	bne.n	80015b0 <HAL_PCD_Stop+0x1c>
 80015ac:	2302      	movs	r3, #2
 80015ae:	e028      	b.n	8001602 <HAL_PCD_Stop+0x6e>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_DISABLE(hpcd);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f003 fccc 	bl	8004f5a <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f004 fca3 	bl	8005f12 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2110      	movs	r1, #16
 80015d2:	4618      	mov	r0, r3
 80015d4:	f003 fe7c 	bl	80052d0 <USB_FlushTxFifo>

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d009      	beq.n	80015f8 <HAL_PCD_Stop+0x64>
      (hpcd->Init.battery_charging_enable == 1U))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d105      	bne.n	80015f8 <HAL_PCD_Stop+0x64>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_UNLOCK(hpcd);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800160a:	b590      	push	{r4, r7, lr}
 800160c:	b08d      	sub	sp, #52	@ 0x34
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001618:	6a3b      	ldr	r3, [r7, #32]
 800161a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f004 fd2a 	bl	800607a <USB_GetMode>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	f040 84b9 	bne.w	8001fa0 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f004 fc8e 	bl	8005f54 <USB_ReadInterrupts>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 84af 	beq.w	8001f9e <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f004 fc7b 	bl	8005f54 <USB_ReadInterrupts>
 800165e:	4603      	mov	r3, r0
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b02      	cmp	r3, #2
 8001666:	d107      	bne.n	8001678 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f002 0202 	and.w	r2, r2, #2
 8001676:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f004 fc69 	bl	8005f54 <USB_ReadInterrupts>
 8001682:	4603      	mov	r3, r0
 8001684:	f003 0310 	and.w	r3, r3, #16
 8001688:	2b10      	cmp	r3, #16
 800168a:	d161      	bne.n	8001750 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	699a      	ldr	r2, [r3, #24]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0210 	bic.w	r2, r2, #16
 800169a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	f003 020f 	and.w	r2, r3, #15
 80016a8:	4613      	mov	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4413      	add	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4413      	add	r3, r2
 80016b8:	3304      	adds	r3, #4
 80016ba:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	0c5b      	lsrs	r3, r3, #17
 80016c0:	f003 030f 	and.w	r3, r3, #15
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d124      	bne.n	8001712 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d035      	beq.n	8001740 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	461a      	mov	r2, r3
 80016e6:	6a38      	ldr	r0, [r7, #32]
 80016e8:	f004 faa0 	bl	8005c2c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	091b      	lsrs	r3, r3, #4
 80016f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016f8:	441a      	add	r2, r3
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	695a      	ldr	r2, [r3, #20]
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800170a:	441a      	add	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	615a      	str	r2, [r3, #20]
 8001710:	e016      	b.n	8001740 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	0c5b      	lsrs	r3, r3, #17
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	2b06      	cmp	r3, #6
 800171c:	d110      	bne.n	8001740 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001724:	2208      	movs	r2, #8
 8001726:	4619      	mov	r1, r3
 8001728:	6a38      	ldr	r0, [r7, #32]
 800172a:	f004 fa7f 	bl	8005c2c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800173a:	441a      	add	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699a      	ldr	r2, [r3, #24]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 0210 	orr.w	r2, r2, #16
 800174e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f004 fbfd 	bl	8005f54 <USB_ReadInterrupts>
 800175a:	4603      	mov	r3, r0
 800175c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001760:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001764:	f040 80a7 	bne.w	80018b6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f004 fc02 	bl	8005f7a <USB_ReadDevAllOutEpInterrupt>
 8001776:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001778:	e099      	b.n	80018ae <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800177a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 808e 	beq.w	80018a2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	4611      	mov	r1, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f004 fc26 	bl	8005fe2 <USB_ReadDevOutEPInterrupt>
 8001796:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00c      	beq.n	80017bc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80017a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a4:	015a      	lsls	r2, r3, #5
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	4413      	add	r3, r2
 80017aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017ae:	461a      	mov	r2, r3
 80017b0:	2301      	movs	r3, #1
 80017b2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80017b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 fe6c 	bl	8002494 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00c      	beq.n	80017e0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80017c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c8:	015a      	lsls	r2, r3, #5
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	4413      	add	r3, r2
 80017ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017d2:	461a      	mov	r2, r3
 80017d4:	2308      	movs	r3, #8
 80017d6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80017d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 ff42 	bl	8002664 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f003 0310 	and.w	r3, r3, #16
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d008      	beq.n	80017fc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80017ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ec:	015a      	lsls	r2, r3, #5
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	4413      	add	r3, r2
 80017f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017f6:	461a      	mov	r2, r3
 80017f8:	2310      	movs	r3, #16
 80017fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d030      	beq.n	8001868 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001806:	6a3b      	ldr	r3, [r7, #32]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800180e:	2b80      	cmp	r3, #128	@ 0x80
 8001810:	d109      	bne.n	8001826 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	69fa      	ldr	r2, [r7, #28]
 800181c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001820:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001824:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001828:	4613      	mov	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4413      	add	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	4413      	add	r3, r2
 8001838:	3304      	adds	r3, #4
 800183a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	78db      	ldrb	r3, [r3, #3]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d108      	bne.n	8001856 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	2200      	movs	r2, #0
 8001848:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184c:	b2db      	uxtb	r3, r3
 800184e:	4619      	mov	r1, r3
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f007 fc5b 	bl	800910c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001858:	015a      	lsls	r2, r3, #5
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	4413      	add	r3, r2
 800185e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001862:	461a      	mov	r2, r3
 8001864:	2302      	movs	r3, #2
 8001866:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	f003 0320 	and.w	r3, r3, #32
 800186e:	2b00      	cmp	r3, #0
 8001870:	d008      	beq.n	8001884 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001874:	015a      	lsls	r2, r3, #5
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	4413      	add	r3, r2
 800187a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800187e:	461a      	mov	r2, r3
 8001880:	2320      	movs	r3, #32
 8001882:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d009      	beq.n	80018a2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001890:	015a      	lsls	r2, r3, #5
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	4413      	add	r3, r2
 8001896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800189a:	461a      	mov	r2, r3
 800189c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018a0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80018a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a4:	3301      	adds	r3, #1
 80018a6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80018a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018aa:	085b      	lsrs	r3, r3, #1
 80018ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80018ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f47f af62 	bne.w	800177a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f004 fb4a 	bl	8005f54 <USB_ReadInterrupts>
 80018c0:	4603      	mov	r3, r0
 80018c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80018ca:	f040 80db 	bne.w	8001a84 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f004 fb6b 	bl	8005fae <USB_ReadDevAllInEpInterrupt>
 80018d8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80018de:	e0cd      	b.n	8001a7c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80018e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 80c2 	beq.w	8001a70 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	4611      	mov	r1, r2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f004 fb91 	bl	800601e <USB_ReadDevInEPInterrupt>
 80018fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d057      	beq.n	80019b8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	2201      	movs	r2, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800191c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	43db      	mvns	r3, r3
 8001922:	69f9      	ldr	r1, [r7, #28]
 8001924:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001928:	4013      	ands	r3, r2
 800192a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800192c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192e:	015a      	lsls	r2, r3, #5
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	4413      	add	r3, r2
 8001934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001938:	461a      	mov	r2, r3
 800193a:	2301      	movs	r3, #1
 800193c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	799b      	ldrb	r3, [r3, #6]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d132      	bne.n	80019ac <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800194a:	4613      	mov	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	3320      	adds	r3, #32
 8001956:	6819      	ldr	r1, [r3, #0]
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800195c:	4613      	mov	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4403      	add	r3, r0
 8001966:	331c      	adds	r3, #28
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4419      	add	r1, r3
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001970:	4613      	mov	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4413      	add	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4403      	add	r3, r0
 800197a:	3320      	adds	r3, #32
 800197c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800197e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001980:	2b00      	cmp	r3, #0
 8001982:	d113      	bne.n	80019ac <HAL_PCD_IRQHandler+0x3a2>
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001988:	4613      	mov	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	3324      	adds	r3, #36	@ 0x24
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d108      	bne.n	80019ac <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6818      	ldr	r0, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80019a4:	461a      	mov	r2, r3
 80019a6:	2101      	movs	r1, #1
 80019a8:	f004 fb9a 	bl	80060e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	4619      	mov	r1, r3
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f007 fb25 	bl	8009002 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d008      	beq.n	80019d4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	015a      	lsls	r2, r3, #5
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	4413      	add	r3, r2
 80019ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019ce:	461a      	mov	r2, r3
 80019d0:	2308      	movs	r3, #8
 80019d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	f003 0310 	and.w	r3, r3, #16
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d008      	beq.n	80019f0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80019de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e0:	015a      	lsls	r2, r3, #5
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	4413      	add	r3, r2
 80019e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019ea:	461a      	mov	r2, r3
 80019ec:	2310      	movs	r3, #16
 80019ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d008      	beq.n	8001a0c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80019fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fc:	015a      	lsls	r2, r3, #5
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	4413      	add	r3, r2
 8001a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a06:	461a      	mov	r2, r3
 8001a08:	2340      	movs	r3, #64	@ 0x40
 8001a0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d023      	beq.n	8001a5e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001a16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a18:	6a38      	ldr	r0, [r7, #32]
 8001a1a:	f003 fc59 	bl	80052d0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a20:	4613      	mov	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4413      	add	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	3310      	adds	r3, #16
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3304      	adds	r3, #4
 8001a30:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	78db      	ldrb	r3, [r3, #3]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d108      	bne.n	8001a4c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	4619      	mov	r1, r3
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f007 fb72 	bl	8009130 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4e:	015a      	lsls	r2, r3, #5
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	4413      	add	r3, r2
 8001a54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a58:	461a      	mov	r2, r3
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 fc86 	bl	800237c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a72:	3301      	adds	r3, #1
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a78:	085b      	lsrs	r3, r3, #1
 8001a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f47f af2e 	bne.w	80018e0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f004 fa63 	bl	8005f54 <USB_ReadInterrupts>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001a94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a98:	d122      	bne.n	8001ae0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d108      	bne.n	8001aca <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 fe90 	bl	80027e8 <HAL_PCDEx_LPM_Callback>
 8001ac8:	e002      	b.n	8001ad0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f007 fb10 	bl	80090f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	695a      	ldr	r2, [r3, #20]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001ade:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f004 fa35 	bl	8005f54 <USB_ReadInterrupts>
 8001aea:	4603      	mov	r3, r0
 8001aec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001af0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001af4:	d112      	bne.n	8001b1c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d102      	bne.n	8001b0c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f007 facc 	bl	80090a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695a      	ldr	r2, [r3, #20]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f004 fa17 	bl	8005f54 <USB_ReadInterrupts>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001b30:	d121      	bne.n	8001b76 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	695a      	ldr	r2, [r3, #20]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001b40:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d111      	bne.n	8001b70 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	f003 020f 	and.w	r2, r3, #15
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001b66:	2101      	movs	r1, #1
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 fe3d 	bl	80027e8 <HAL_PCDEx_LPM_Callback>
 8001b6e:	e002      	b.n	8001b76 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f007 fa97 	bl	80090a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f004 f9ea 	bl	8005f54 <USB_ReadInterrupts>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b8a:	f040 80b7 	bne.w	8001cfc <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2110      	movs	r1, #16
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 fb91 	bl	80052d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bb2:	e046      	b.n	8001c42 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bb6:	015a      	lsls	r2, r3, #5
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	4413      	add	r3, r2
 8001bbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001bc6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bca:	015a      	lsls	r2, r3, #5
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	4413      	add	r3, r2
 8001bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bd8:	0151      	lsls	r1, r2, #5
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	440a      	add	r2, r1
 8001bde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001be2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001be6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bea:	015a      	lsls	r2, r3, #5
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	4413      	add	r3, r2
 8001bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001bfa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bfe:	015a      	lsls	r2, r3, #5
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	4413      	add	r3, r2
 8001c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c0c:	0151      	lsls	r1, r2, #5
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	440a      	add	r2, r1
 8001c12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001c16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001c1a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c1e:	015a      	lsls	r2, r3, #5
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	4413      	add	r3, r2
 8001c24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c2c:	0151      	lsls	r1, r2, #5
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	440a      	add	r2, r1
 8001c32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001c36:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001c3a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c3e:	3301      	adds	r3, #1
 8001c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	791b      	ldrb	r3, [r3, #4]
 8001c46:	461a      	mov	r2, r3
 8001c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d3b2      	bcc.n	8001bb4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c5c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001c60:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	7bdb      	ldrb	r3, [r3, #15]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d016      	beq.n	8001c98 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c7a:	f043 030b 	orr.w	r3, r3, #11
 8001c7e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c90:	f043 030b 	orr.w	r3, r3, #11
 8001c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c96:	e015      	b.n	8001cc4 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f242 032b 	movw	r3, #8235	@ 0x202b
 8001cac:	4313      	orrs	r3, r2
 8001cae:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cbe:	f043 030b 	orr.w	r3, r3, #11
 8001cc2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	69fa      	ldr	r2, [r7, #28]
 8001cce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cd2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001cd6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f004 f9fa 	bl	80060e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001cfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f004 f927 	bl	8005f54 <USB_ReadInterrupts>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d10:	d123      	bne.n	8001d5a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f004 f9be 	bl	8006098 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f003 fb4e 	bl	80053c2 <USB_GetDevSpeed>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681c      	ldr	r4, [r3, #0]
 8001d32:	f001 fcb9 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 8001d36:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4620      	mov	r0, r4
 8001d40:	f003 f858 	bl	8004df4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f007 f984 	bl	8009052 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	695a      	ldr	r2, [r3, #20]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001d58:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f004 f8f8 	bl	8005f54 <USB_ReadInterrupts>
 8001d64:	4603      	mov	r3, r0
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d10a      	bne.n	8001d84 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f007 f961 	bl	8009036 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f002 0208 	and.w	r2, r2, #8
 8001d82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f004 f8e3 	bl	8005f54 <USB_ReadInterrupts>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d94:	2b80      	cmp	r3, #128	@ 0x80
 8001d96:	d123      	bne.n	8001de0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001da4:	2301      	movs	r3, #1
 8001da6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001da8:	e014      	b.n	8001dd4 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dae:	4613      	mov	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4413      	add	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d105      	bne.n	8001dce <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 faa6 	bl	800231a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	791b      	ldrb	r3, [r3, #4]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d3e4      	bcc.n	8001daa <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f004 f8b5 	bl	8005f54 <USB_ReadInterrupts>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001df0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001df4:	d13c      	bne.n	8001e70 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001df6:	2301      	movs	r3, #1
 8001df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dfa:	e02b      	b.n	8001e54 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	3318      	adds	r3, #24
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d115      	bne.n	8001e4e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001e22:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	da12      	bge.n	8001e4e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	3317      	adds	r3, #23
 8001e38:	2201      	movs	r2, #1
 8001e3a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	4619      	mov	r1, r3
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 fa66 	bl	800231a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e50:	3301      	adds	r3, #1
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	791b      	ldrb	r3, [r3, #4]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d3cd      	bcc.n	8001dfc <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695a      	ldr	r2, [r3, #20]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001e6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f004 f86d 	bl	8005f54 <USB_ReadInterrupts>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001e84:	d156      	bne.n	8001f34 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e86:	2301      	movs	r3, #1
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e8a:	e045      	b.n	8001f18 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8e:	015a      	lsls	r2, r3, #5
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d12e      	bne.n	8001f12 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001eb4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	da2b      	bge.n	8001f12 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001ec6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d121      	bne.n	8001f12 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10a      	bne.n	8001f12 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	69fa      	ldr	r2, [r7, #28]
 8001f06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f0e:	6053      	str	r3, [r2, #4]
            break;
 8001f10:	e008      	b.n	8001f24 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f14:	3301      	adds	r3, #1
 8001f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	791b      	ldrb	r3, [r3, #4]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d3b3      	bcc.n	8001e8c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	695a      	ldr	r2, [r3, #20]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001f32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f004 f80b 	bl	8005f54 <USB_ReadInterrupts>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f48:	d10a      	bne.n	8001f60 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f007 f902 	bl	8009154 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001f5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f003 fff5 	bl	8005f54 <USB_ReadInterrupts>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d115      	bne.n	8001fa0 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f007 f8f2 	bl	8009170 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6859      	ldr	r1, [r3, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	e000      	b.n	8001fa0 <HAL_PCD_IRQHandler+0x996>
      return;
 8001f9e:	bf00      	nop
    }
  }
}
 8001fa0:	3734      	adds	r7, #52	@ 0x34
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd90      	pop	{r4, r7, pc}

08001fa6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <HAL_PCD_SetAddress+0x1a>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e012      	b.n	8001fe6 <HAL_PCD_SetAddress+0x40>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	78fa      	ldrb	r2, [r7, #3]
 8001fcc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	78fa      	ldrb	r2, [r7, #3]
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f003 ff54 	bl	8005e84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b084      	sub	sp, #16
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	4608      	mov	r0, r1
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	70fb      	strb	r3, [r7, #3]
 8002000:	460b      	mov	r3, r1
 8002002:	803b      	strh	r3, [r7, #0]
 8002004:	4613      	mov	r3, r2
 8002006:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800200c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002010:	2b00      	cmp	r3, #0
 8002012:	da0f      	bge.n	8002034 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	f003 020f 	and.w	r2, r3, #15
 800201a:	4613      	mov	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4413      	add	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	3310      	adds	r3, #16
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	4413      	add	r3, r2
 8002028:	3304      	adds	r3, #4
 800202a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2201      	movs	r2, #1
 8002030:	705a      	strb	r2, [r3, #1]
 8002032:	e00f      	b.n	8002054 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	f003 020f 	and.w	r2, r3, #15
 800203a:	4613      	mov	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4413      	add	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	3304      	adds	r3, #4
 800204c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	b2da      	uxtb	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002060:	883a      	ldrh	r2, [r7, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	78ba      	ldrb	r2, [r7, #2]
 800206a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	785b      	ldrb	r3, [r3, #1]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d004      	beq.n	800207e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800207e:	78bb      	ldrb	r3, [r7, #2]
 8002080:	2b02      	cmp	r3, #2
 8002082:	d102      	bne.n	800208a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_PCD_EP_Open+0xaa>
 8002094:	2302      	movs	r3, #2
 8002096:	e00e      	b.n	80020b6 <HAL_PCD_EP_Open+0xc8>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68f9      	ldr	r1, [r7, #12]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f003 f9b0 	bl	800540c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80020b4:	7afb      	ldrb	r3, [r7, #11]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	460b      	mov	r3, r1
 80020cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ce:	7afb      	ldrb	r3, [r7, #11]
 80020d0:	f003 020f 	and.w	r2, r3, #15
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4413      	add	r3, r2
 80020e4:	3304      	adds	r3, #4
 80020e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2200      	movs	r2, #0
 80020f8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2200      	movs	r2, #0
 80020fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002100:	7afb      	ldrb	r3, [r7, #11]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	b2da      	uxtb	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	799b      	ldrb	r3, [r3, #6]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d102      	bne.n	800211a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	799b      	ldrb	r3, [r3, #6]
 8002122:	461a      	mov	r2, r3
 8002124:	6979      	ldr	r1, [r7, #20]
 8002126:	f003 f9f9 	bl	800551c <USB_EPStartXfer>

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	460b      	mov	r3, r1
 8002142:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002144:	7afb      	ldrb	r3, [r7, #11]
 8002146:	f003 020f 	and.w	r2, r3, #15
 800214a:	4613      	mov	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	3310      	adds	r3, #16
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4413      	add	r3, r2
 8002158:	3304      	adds	r3, #4
 800215a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	2200      	movs	r2, #0
 800216c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2201      	movs	r2, #1
 8002172:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002174:	7afb      	ldrb	r3, [r7, #11]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	b2da      	uxtb	r2, r3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	799b      	ldrb	r3, [r3, #6]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d102      	bne.n	800218e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	799b      	ldrb	r3, [r3, #6]
 8002196:	461a      	mov	r2, r3
 8002198:	6979      	ldr	r1, [r7, #20]
 800219a:	f003 f9bf 	bl	800551c <USB_EPStartXfer>

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	7912      	ldrb	r2, [r2, #4]
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e04f      	b.n	8002266 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	da0f      	bge.n	80021ee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	f003 020f 	and.w	r2, r3, #15
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	3310      	adds	r3, #16
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	3304      	adds	r3, #4
 80021e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2201      	movs	r2, #1
 80021ea:	705a      	strb	r2, [r3, #1]
 80021ec:	e00d      	b.n	800220a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021ee:	78fa      	ldrb	r2, [r7, #3]
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	4413      	add	r3, r2
 8002200:	3304      	adds	r3, #4
 8002202:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	b2da      	uxtb	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_PCD_EP_SetStall+0x82>
 8002226:	2302      	movs	r3, #2
 8002228:	e01d      	b.n	8002266 <HAL_PCD_EP_SetStall+0xbe>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68f9      	ldr	r1, [r7, #12]
 8002238:	4618      	mov	r0, r3
 800223a:	f003 fd4f 	bl	8005cdc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	f003 030f 	and.w	r3, r3, #15
 8002244:	2b00      	cmp	r3, #0
 8002246:	d109      	bne.n	800225c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7999      	ldrb	r1, [r3, #6]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002256:	461a      	mov	r2, r3
 8002258:	f003 ff42 	bl	80060e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	460b      	mov	r3, r1
 8002278:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	7912      	ldrb	r2, [r2, #4]
 8002284:	4293      	cmp	r3, r2
 8002286:	d901      	bls.n	800228c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e042      	b.n	8002312 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800228c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002290:	2b00      	cmp	r3, #0
 8002292:	da0f      	bge.n	80022b4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	f003 020f 	and.w	r2, r3, #15
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	3310      	adds	r3, #16
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	4413      	add	r3, r2
 80022a8:	3304      	adds	r3, #4
 80022aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2201      	movs	r2, #1
 80022b0:	705a      	strb	r2, [r3, #1]
 80022b2:	e00f      	b.n	80022d4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	f003 020f 	and.w	r2, r3, #15
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	3304      	adds	r3, #4
 80022cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_PCD_EP_ClrStall+0x86>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e00e      	b.n	8002312 <HAL_PCD_EP_ClrStall+0xa4>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68f9      	ldr	r1, [r7, #12]
 8002302:	4618      	mov	r0, r3
 8002304:	f003 fd58 	bl	8005db8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	460b      	mov	r3, r1
 8002324:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002326:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800232a:	2b00      	cmp	r3, #0
 800232c:	da0c      	bge.n	8002348 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	f003 020f 	and.w	r2, r3, #15
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	3310      	adds	r3, #16
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	3304      	adds	r3, #4
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	e00c      	b.n	8002362 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	f003 020f 	and.w	r2, r3, #15
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	3304      	adds	r3, #4
 8002360:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68f9      	ldr	r1, [r7, #12]
 8002368:	4618      	mov	r0, r3
 800236a:	f003 fb77 	bl	8005a5c <USB_EPStopXfer>
 800236e:	4603      	mov	r3, r0
 8002370:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002372:	7afb      	ldrb	r3, [r7, #11]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	@ 0x28
 8002380:	af02      	add	r7, sp, #8
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	3310      	adds	r3, #16
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	3304      	adds	r3, #4
 80023a2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	695a      	ldr	r2, [r3, #20]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d901      	bls.n	80023b4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e06b      	b.n	800248c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	69fa      	ldr	r2, [r7, #28]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d902      	bls.n	80023d0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	3303      	adds	r3, #3
 80023d4:	089b      	lsrs	r3, r3, #2
 80023d6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023d8:	e02a      	b.n	8002430 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d902      	bls.n	80023f6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3303      	adds	r3, #3
 80023fa:	089b      	lsrs	r3, r3, #2
 80023fc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	68d9      	ldr	r1, [r3, #12]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	4603      	mov	r3, r0
 8002412:	6978      	ldr	r0, [r7, #20]
 8002414:	f003 fbcc 	bl	8005bb0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	441a      	add	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	695a      	ldr	r2, [r3, #20]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	441a      	add	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	015a      	lsls	r2, r3, #5
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4413      	add	r3, r2
 8002438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	429a      	cmp	r2, r3
 8002444:	d809      	bhi.n	800245a <PCD_WriteEmptyTxFifo+0xde>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800244e:	429a      	cmp	r2, r3
 8002450:	d203      	bcs.n	800245a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1bf      	bne.n	80023da <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	691a      	ldr	r2, [r3, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	429a      	cmp	r2, r3
 8002464:	d811      	bhi.n	800248a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	2201      	movs	r2, #1
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800247a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	43db      	mvns	r3, r3
 8002480:	6939      	ldr	r1, [r7, #16]
 8002482:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002486:	4013      	ands	r3, r2
 8002488:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3720      	adds	r7, #32
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	333c      	adds	r3, #60	@ 0x3c
 80024ac:	3304      	adds	r3, #4
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	015a      	lsls	r2, r3, #5
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	799b      	ldrb	r3, [r3, #6]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d17b      	bne.n	80025c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d015      	beq.n	8002500 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	4a61      	ldr	r2, [pc, #388]	@ (800265c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	f240 80b9 	bls.w	8002650 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80b3 	beq.w	8002650 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024f6:	461a      	mov	r2, r3
 80024f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024fc:	6093      	str	r3, [r2, #8]
 80024fe:	e0a7      	b.n	8002650 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	f003 0320 	and.w	r3, r3, #32
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	4413      	add	r3, r2
 8002512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002516:	461a      	mov	r2, r3
 8002518:	2320      	movs	r3, #32
 800251a:	6093      	str	r3, [r2, #8]
 800251c:	e098      	b.n	8002650 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002524:	2b00      	cmp	r3, #0
 8002526:	f040 8093 	bne.w	8002650 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	4a4b      	ldr	r2, [pc, #300]	@ (800265c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d90f      	bls.n	8002552 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	4413      	add	r3, r2
 8002544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002548:	461a      	mov	r2, r3
 800254a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800254e:	6093      	str	r3, [r2, #8]
 8002550:	e07e      	b.n	8002650 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	4413      	add	r3, r2
 8002564:	3304      	adds	r3, #4
 8002566:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a1a      	ldr	r2, [r3, #32]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	0159      	lsls	r1, r3, #5
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	440b      	add	r3, r1
 8002574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257e:	1ad2      	subs	r2, r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d114      	bne.n	80025b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800259c:	461a      	mov	r2, r3
 800259e:	2101      	movs	r1, #1
 80025a0:	f003 fd9e 	bl	80060e0 <USB_EP0_OutStart>
 80025a4:	e006      	b.n	80025b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	441a      	add	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	4619      	mov	r1, r3
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f006 fd06 	bl	8008fcc <HAL_PCD_DataOutStageCallback>
 80025c0:	e046      	b.n	8002650 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	4a26      	ldr	r2, [pc, #152]	@ (8002660 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d124      	bne.n	8002614 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00a      	beq.n	80025ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025e0:	461a      	mov	r2, r3
 80025e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025e6:	6093      	str	r3, [r2, #8]
 80025e8:	e032      	b.n	8002650 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f003 0320 	and.w	r3, r3, #32
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	015a      	lsls	r2, r3, #5
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	4413      	add	r3, r2
 80025fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002600:	461a      	mov	r2, r3
 8002602:	2320      	movs	r3, #32
 8002604:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	4619      	mov	r1, r3
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f006 fcdd 	bl	8008fcc <HAL_PCD_DataOutStageCallback>
 8002612:	e01d      	b.n	8002650 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d114      	bne.n	8002644 <PCD_EP_OutXfrComplete_int+0x1b0>
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	4613      	mov	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	4413      	add	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d108      	bne.n	8002644 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800263c:	461a      	mov	r2, r3
 800263e:	2100      	movs	r1, #0
 8002640:	f003 fd4e 	bl	80060e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4619      	mov	r1, r3
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f006 fcbe 	bl	8008fcc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3720      	adds	r7, #32
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	4f54300a 	.word	0x4f54300a
 8002660:	4f54310a 	.word	0x4f54310a

08002664 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	333c      	adds	r3, #60	@ 0x3c
 800267c:	3304      	adds	r3, #4
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4413      	add	r3, r2
 800268a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4a15      	ldr	r2, [pc, #84]	@ (80026ec <PCD_EP_OutSetupPacket_int+0x88>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d90e      	bls.n	80026b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d009      	beq.n	80026b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026b0:	461a      	mov	r2, r3
 80026b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f006 fc75 	bl	8008fa8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4a0a      	ldr	r2, [pc, #40]	@ (80026ec <PCD_EP_OutSetupPacket_int+0x88>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d90c      	bls.n	80026e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	799b      	ldrb	r3, [r3, #6]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d108      	bne.n	80026e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026d8:	461a      	mov	r2, r3
 80026da:	2101      	movs	r1, #1
 80026dc:	f003 fd00 	bl	80060e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	4f54300a 	.word	0x4f54300a

080026f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	70fb      	strb	r3, [r7, #3]
 80026fc:	4613      	mov	r3, r2
 80026fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d107      	bne.n	800271e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800270e:	883b      	ldrh	r3, [r7, #0]
 8002710:	0419      	lsls	r1, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	430a      	orrs	r2, r1
 800271a:	629a      	str	r2, [r3, #40]	@ 0x28
 800271c:	e028      	b.n	8002770 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002724:	0c1b      	lsrs	r3, r3, #16
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	4413      	add	r3, r2
 800272a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]
 8002730:	e00d      	b.n	800274e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	3340      	adds	r3, #64	@ 0x40
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	0c1b      	lsrs	r3, r3, #16
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	4413      	add	r3, r2
 8002746:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	3301      	adds	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	7bfa      	ldrb	r2, [r7, #15]
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	3b01      	subs	r3, #1
 8002754:	429a      	cmp	r2, r3
 8002756:	d3ec      	bcc.n	8002732 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002758:	883b      	ldrh	r3, [r7, #0]
 800275a:	0418      	lsls	r0, r3, #16
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6819      	ldr	r1, [r3, #0]
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	3b01      	subs	r3, #1
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	4302      	orrs	r2, r0
 8002768:	3340      	adds	r3, #64	@ 0x40
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	460b      	mov	r3, r1
 8002788:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	887a      	ldrh	r2, [r7, #2]
 8002790:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027ce:	4b05      	ldr	r3, [pc, #20]	@ (80027e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	10000003 	.word	0x10000003

080027e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002808:	4b19      	ldr	r3, [pc, #100]	@ (8002870 <HAL_PWREx_ConfigSupply+0x70>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b04      	cmp	r3, #4
 8002812:	d00a      	beq.n	800282a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002814:	4b16      	ldr	r3, [pc, #88]	@ (8002870 <HAL_PWREx_ConfigSupply+0x70>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	429a      	cmp	r2, r3
 8002820:	d001      	beq.n	8002826 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e01f      	b.n	8002866 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	e01d      	b.n	8002866 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800282a:	4b11      	ldr	r3, [pc, #68]	@ (8002870 <HAL_PWREx_ConfigSupply+0x70>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f023 0207 	bic.w	r2, r3, #7
 8002832:	490f      	ldr	r1, [pc, #60]	@ (8002870 <HAL_PWREx_ConfigSupply+0x70>)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4313      	orrs	r3, r2
 8002838:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800283a:	f7fe f895 	bl	8000968 <HAL_GetTick>
 800283e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002840:	e009      	b.n	8002856 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002842:	f7fe f891 	bl	8000968 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002850:	d901      	bls.n	8002856 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e007      	b.n	8002866 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002856:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <HAL_PWREx_ConfigSupply+0x70>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800285e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002862:	d1ee      	bne.n	8002842 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	58024800 	.word	0x58024800

08002874 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002878:	4b05      	ldr	r3, [pc, #20]	@ (8002890 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4a04      	ldr	r2, [pc, #16]	@ (8002890 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800287e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002882:	60d3      	str	r3, [r2, #12]
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	58024800 	.word	0x58024800

08002894 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08c      	sub	sp, #48	@ 0x30
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e3c8      	b.n	8003038 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 8087 	beq.w	80029c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b4:	4b88      	ldr	r3, [pc, #544]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028be:	4b86      	ldr	r3, [pc, #536]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 80028c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80028c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c6:	2b10      	cmp	r3, #16
 80028c8:	d007      	beq.n	80028da <HAL_RCC_OscConfig+0x46>
 80028ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028cc:	2b18      	cmp	r3, #24
 80028ce:	d110      	bne.n	80028f2 <HAL_RCC_OscConfig+0x5e>
 80028d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d10b      	bne.n	80028f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028da:	4b7f      	ldr	r3, [pc, #508]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d06c      	beq.n	80029c0 <HAL_RCC_OscConfig+0x12c>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d168      	bne.n	80029c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e3a2      	b.n	8003038 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028fa:	d106      	bne.n	800290a <HAL_RCC_OscConfig+0x76>
 80028fc:	4b76      	ldr	r3, [pc, #472]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a75      	ldr	r2, [pc, #468]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002902:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	e02e      	b.n	8002968 <HAL_RCC_OscConfig+0xd4>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10c      	bne.n	800292c <HAL_RCC_OscConfig+0x98>
 8002912:	4b71      	ldr	r3, [pc, #452]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a70      	ldr	r2, [pc, #448]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002918:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b6e      	ldr	r3, [pc, #440]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a6d      	ldr	r2, [pc, #436]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002924:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e01d      	b.n	8002968 <HAL_RCC_OscConfig+0xd4>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002934:	d10c      	bne.n	8002950 <HAL_RCC_OscConfig+0xbc>
 8002936:	4b68      	ldr	r3, [pc, #416]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a67      	ldr	r2, [pc, #412]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 800293c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	4b65      	ldr	r3, [pc, #404]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a64      	ldr	r2, [pc, #400]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e00b      	b.n	8002968 <HAL_RCC_OscConfig+0xd4>
 8002950:	4b61      	ldr	r3, [pc, #388]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a60      	ldr	r2, [pc, #384]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a5d      	ldr	r2, [pc, #372]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002962:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d013      	beq.n	8002998 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7fd fffa 	bl	8000968 <HAL_GetTick>
 8002974:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002978:	f7fd fff6 	bl	8000968 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	@ 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e356      	b.n	8003038 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800298a:	4b53      	ldr	r3, [pc, #332]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0xe4>
 8002996:	e014      	b.n	80029c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7fd ffe6 	bl	8000968 <HAL_GetTick>
 800299c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a0:	f7fd ffe2 	bl	8000968 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	@ 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e342      	b.n	8003038 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029b2:	4b49      	ldr	r3, [pc, #292]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x10c>
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 808c 	beq.w	8002ae8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029d0:	4b41      	ldr	r3, [pc, #260]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029da:	4b3f      	ldr	r3, [pc, #252]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 80029dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029de:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <HAL_RCC_OscConfig+0x162>
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	2b18      	cmp	r3, #24
 80029ea:	d137      	bne.n	8002a5c <HAL_RCC_OscConfig+0x1c8>
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d132      	bne.n	8002a5c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029f6:	4b38      	ldr	r3, [pc, #224]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d005      	beq.n	8002a0e <HAL_RCC_OscConfig+0x17a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e314      	b.n	8003038 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a0e:	4b32      	ldr	r3, [pc, #200]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 0219 	bic.w	r2, r3, #25
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	492f      	ldr	r1, [pc, #188]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7fd ffa2 	bl	8000968 <HAL_GetTick>
 8002a24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a28:	f7fd ff9e 	bl	8000968 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e2fe      	b.n	8003038 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a3a:	4b27      	ldr	r3, [pc, #156]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a46:	4b24      	ldr	r3, [pc, #144]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	061b      	lsls	r3, r3, #24
 8002a54:	4920      	ldr	r1, [pc, #128]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a5a:	e045      	b.n	8002ae8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d026      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a64:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f023 0219 	bic.w	r2, r3, #25
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4919      	ldr	r1, [pc, #100]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a76:	f7fd ff77 	bl	8000968 <HAL_GetTick>
 8002a7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7e:	f7fd ff73 	bl	8000968 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e2d3      	b.n	8003038 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a90:	4b11      	ldr	r3, [pc, #68]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	061b      	lsls	r3, r3, #24
 8002aaa:	490b      	ldr	r1, [pc, #44]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
 8002ab0:	e01a      	b.n	8002ae8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ab2:	4b09      	ldr	r3, [pc, #36]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a08      	ldr	r2, [pc, #32]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7fd ff53 	bl	8000968 <HAL_GetTick>
 8002ac2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac6:	f7fd ff4f 	bl	8000968 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d903      	bls.n	8002adc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e2af      	b.n	8003038 <HAL_RCC_OscConfig+0x7a4>
 8002ad8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002adc:	4b96      	ldr	r3, [pc, #600]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1ee      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d06a      	beq.n	8002bca <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002af4:	4b90      	ldr	r3, [pc, #576]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002afc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002afe:	4b8e      	ldr	r3, [pc, #568]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b02:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d007      	beq.n	8002b1a <HAL_RCC_OscConfig+0x286>
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	2b18      	cmp	r3, #24
 8002b0e:	d11b      	bne.n	8002b48 <HAL_RCC_OscConfig+0x2b4>
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d116      	bne.n	8002b48 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b1a:	4b87      	ldr	r3, [pc, #540]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d005      	beq.n	8002b32 <HAL_RCC_OscConfig+0x29e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	2b80      	cmp	r3, #128	@ 0x80
 8002b2c:	d001      	beq.n	8002b32 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e282      	b.n	8003038 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b32:	4b81      	ldr	r3, [pc, #516]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	061b      	lsls	r3, r3, #24
 8002b40:	497d      	ldr	r1, [pc, #500]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b46:	e040      	b.n	8002bca <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d023      	beq.n	8002b98 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b50:	4b79      	ldr	r3, [pc, #484]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a78      	ldr	r2, [pc, #480]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002b56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fd ff04 	bl	8000968 <HAL_GetTick>
 8002b60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b64:	f7fd ff00 	bl	8000968 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e260      	b.n	8003038 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b76:	4b70      	ldr	r3, [pc, #448]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b82:	4b6d      	ldr	r3, [pc, #436]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	061b      	lsls	r3, r3, #24
 8002b90:	4969      	ldr	r1, [pc, #420]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60cb      	str	r3, [r1, #12]
 8002b96:	e018      	b.n	8002bca <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b98:	4b67      	ldr	r3, [pc, #412]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a66      	ldr	r2, [pc, #408]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002b9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba4:	f7fd fee0 	bl	8000968 <HAL_GetTick>
 8002ba8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002bac:	f7fd fedc 	bl	8000968 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e23c      	b.n	8003038 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002bbe:	4b5e      	ldr	r3, [pc, #376]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d036      	beq.n	8002c44 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d019      	beq.n	8002c12 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bde:	4b56      	ldr	r3, [pc, #344]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be2:	4a55      	ldr	r2, [pc, #340]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bea:	f7fd febd 	bl	8000968 <HAL_GetTick>
 8002bee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf2:	f7fd feb9 	bl	8000968 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e219      	b.n	8003038 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c04:	4b4c      	ldr	r3, [pc, #304]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002c06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0f0      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x35e>
 8002c10:	e018      	b.n	8002c44 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c12:	4b49      	ldr	r3, [pc, #292]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c16:	4a48      	ldr	r2, [pc, #288]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002c18:	f023 0301 	bic.w	r3, r3, #1
 8002c1c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1e:	f7fd fea3 	bl	8000968 <HAL_GetTick>
 8002c22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c26:	f7fd fe9f 	bl	8000968 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e1ff      	b.n	8003038 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c38:	4b3f      	ldr	r3, [pc, #252]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f0      	bne.n	8002c26 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d036      	beq.n	8002cbe <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d019      	beq.n	8002c8c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c58:	4b37      	ldr	r3, [pc, #220]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a36      	ldr	r2, [pc, #216]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002c5e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c64:	f7fd fe80 	bl	8000968 <HAL_GetTick>
 8002c68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c6c:	f7fd fe7c 	bl	8000968 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e1dc      	b.n	8003038 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c7e:	4b2e      	ldr	r3, [pc, #184]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0x3d8>
 8002c8a:	e018      	b.n	8002cbe <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a29      	ldr	r2, [pc, #164]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002c92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c98:	f7fd fe66 	bl	8000968 <HAL_GetTick>
 8002c9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ca0:	f7fd fe62 	bl	8000968 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e1c2      	b.n	8003038 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cb2:	4b21      	ldr	r3, [pc, #132]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 8086 	beq.w	8002dd8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d3c <HAL_RCC_OscConfig+0x4a8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8002d3c <HAL_RCC_OscConfig+0x4a8>)
 8002cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cd8:	f7fd fe46 	bl	8000968 <HAL_GetTick>
 8002cdc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce0:	f7fd fe42 	bl	8000968 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b64      	cmp	r3, #100	@ 0x64
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e1a2      	b.n	8003038 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cf2:	4b12      	ldr	r3, [pc, #72]	@ (8002d3c <HAL_RCC_OscConfig+0x4a8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d106      	bne.n	8002d14 <HAL_RCC_OscConfig+0x480>
 8002d06:	4b0c      	ldr	r3, [pc, #48]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0a:	4a0b      	ldr	r2, [pc, #44]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d12:	e032      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e6>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d111      	bne.n	8002d40 <HAL_RCC_OscConfig+0x4ac>
 8002d1c:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d20:	4a05      	ldr	r2, [pc, #20]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002d22:	f023 0301 	bic.w	r3, r3, #1
 8002d26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d28:	4b03      	ldr	r3, [pc, #12]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2c:	4a02      	ldr	r2, [pc, #8]	@ (8002d38 <HAL_RCC_OscConfig+0x4a4>)
 8002d2e:	f023 0304 	bic.w	r3, r3, #4
 8002d32:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d34:	e021      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e6>
 8002d36:	bf00      	nop
 8002d38:	58024400 	.word	0x58024400
 8002d3c:	58024800 	.word	0x58024800
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b05      	cmp	r3, #5
 8002d46:	d10c      	bne.n	8002d62 <HAL_RCC_OscConfig+0x4ce>
 8002d48:	4b83      	ldr	r3, [pc, #524]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4c:	4a82      	ldr	r2, [pc, #520]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002d4e:	f043 0304 	orr.w	r3, r3, #4
 8002d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d54:	4b80      	ldr	r3, [pc, #512]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d58:	4a7f      	ldr	r2, [pc, #508]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d60:	e00b      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e6>
 8002d62:	4b7d      	ldr	r3, [pc, #500]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d66:	4a7c      	ldr	r2, [pc, #496]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d6e:	4b7a      	ldr	r3, [pc, #488]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d72:	4a79      	ldr	r2, [pc, #484]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002d74:	f023 0304 	bic.w	r3, r3, #4
 8002d78:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d015      	beq.n	8002dae <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d82:	f7fd fdf1 	bl	8000968 <HAL_GetTick>
 8002d86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d88:	e00a      	b.n	8002da0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8a:	f7fd fded 	bl	8000968 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e14b      	b.n	8003038 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002da0:	4b6d      	ldr	r3, [pc, #436]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ee      	beq.n	8002d8a <HAL_RCC_OscConfig+0x4f6>
 8002dac:	e014      	b.n	8002dd8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dae:	f7fd fddb 	bl	8000968 <HAL_GetTick>
 8002db2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002db4:	e00a      	b.n	8002dcc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db6:	f7fd fdd7 	bl	8000968 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e135      	b.n	8003038 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dcc:	4b62      	ldr	r3, [pc, #392]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1ee      	bne.n	8002db6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 812a 	beq.w	8003036 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002de2:	4b5d      	ldr	r3, [pc, #372]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dea:	2b18      	cmp	r3, #24
 8002dec:	f000 80ba 	beq.w	8002f64 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	f040 8095 	bne.w	8002f24 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfa:	4b57      	ldr	r3, [pc, #348]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a56      	ldr	r2, [pc, #344]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002e00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e06:	f7fd fdaf 	bl	8000968 <HAL_GetTick>
 8002e0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0e:	f7fd fdab 	bl	8000968 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e10b      	b.n	8003038 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e20:	4b4d      	ldr	r3, [pc, #308]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1f0      	bne.n	8002e0e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e2c:	4b4a      	ldr	r3, [pc, #296]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002e2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e30:	4b4a      	ldr	r3, [pc, #296]	@ (8002f5c <HAL_RCC_OscConfig+0x6c8>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e3c:	0112      	lsls	r2, r2, #4
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	4945      	ldr	r1, [pc, #276]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	628b      	str	r3, [r1, #40]	@ 0x28
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e54:	3b01      	subs	r3, #1
 8002e56:	025b      	lsls	r3, r3, #9
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e60:	3b01      	subs	r3, #1
 8002e62:	041b      	lsls	r3, r3, #16
 8002e64:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	061b      	lsls	r3, r3, #24
 8002e72:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002e76:	4938      	ldr	r1, [pc, #224]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002e7c:	4b36      	ldr	r3, [pc, #216]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e80:	4a35      	ldr	r2, [pc, #212]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002e82:	f023 0301 	bic.w	r3, r3, #1
 8002e86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e88:	4b33      	ldr	r3, [pc, #204]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002e8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e8c:	4b34      	ldr	r3, [pc, #208]	@ (8002f60 <HAL_RCC_OscConfig+0x6cc>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e94:	00d2      	lsls	r2, r2, #3
 8002e96:	4930      	ldr	r1, [pc, #192]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e9c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea0:	f023 020c 	bic.w	r2, r3, #12
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea8:	492b      	ldr	r1, [pc, #172]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002eae:	4b2a      	ldr	r3, [pc, #168]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb2:	f023 0202 	bic.w	r2, r3, #2
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eba:	4927      	ldr	r1, [pc, #156]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ec0:	4b25      	ldr	r3, [pc, #148]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec4:	4a24      	ldr	r2, [pc, #144]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ecc:	4b22      	ldr	r3, [pc, #136]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed0:	4a21      	ldr	r2, [pc, #132]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002ed2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ed6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002edc:	4a1e      	ldr	r2, [pc, #120]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002ede:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef0:	4b19      	ldr	r3, [pc, #100]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a18      	ldr	r2, [pc, #96]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002ef6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7fd fd34 	bl	8000968 <HAL_GetTick>
 8002f00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f04:	f7fd fd30 	bl	8000968 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e090      	b.n	8003038 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f16:	4b10      	ldr	r3, [pc, #64]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0x670>
 8002f22:	e088      	b.n	8003036 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f24:	4b0c      	ldr	r3, [pc, #48]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0b      	ldr	r2, [pc, #44]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002f2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fd fd1a 	bl	8000968 <HAL_GetTick>
 8002f34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f38:	f7fd fd16 	bl	8000968 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e076      	b.n	8003038 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f4a:	4b03      	ldr	r3, [pc, #12]	@ (8002f58 <HAL_RCC_OscConfig+0x6c4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x6a4>
 8002f56:	e06e      	b.n	8003036 <HAL_RCC_OscConfig+0x7a2>
 8002f58:	58024400 	.word	0x58024400
 8002f5c:	fffffc0c 	.word	0xfffffc0c
 8002f60:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f64:	4b36      	ldr	r3, [pc, #216]	@ (8003040 <HAL_RCC_OscConfig+0x7ac>)
 8002f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f68:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f6a:	4b35      	ldr	r3, [pc, #212]	@ (8003040 <HAL_RCC_OscConfig+0x7ac>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d031      	beq.n	8002fdc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f003 0203 	and.w	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d12a      	bne.n	8002fdc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d122      	bne.n	8002fdc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d11a      	bne.n	8002fdc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	0a5b      	lsrs	r3, r3, #9
 8002faa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d111      	bne.n	8002fdc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	0c1b      	lsrs	r3, r3, #16
 8002fbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d108      	bne.n	8002fdc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	0e1b      	lsrs	r3, r3, #24
 8002fce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e02b      	b.n	8003038 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002fe0:	4b17      	ldr	r3, [pc, #92]	@ (8003040 <HAL_RCC_OscConfig+0x7ac>)
 8002fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe4:	08db      	lsrs	r3, r3, #3
 8002fe6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002fea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d01f      	beq.n	8003036 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002ff6:	4b12      	ldr	r3, [pc, #72]	@ (8003040 <HAL_RCC_OscConfig+0x7ac>)
 8002ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffa:	4a11      	ldr	r2, [pc, #68]	@ (8003040 <HAL_RCC_OscConfig+0x7ac>)
 8002ffc:	f023 0301 	bic.w	r3, r3, #1
 8003000:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003002:	f7fd fcb1 	bl	8000968 <HAL_GetTick>
 8003006:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003008:	bf00      	nop
 800300a:	f7fd fcad 	bl	8000968 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003012:	4293      	cmp	r3, r2
 8003014:	d0f9      	beq.n	800300a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003016:	4b0a      	ldr	r3, [pc, #40]	@ (8003040 <HAL_RCC_OscConfig+0x7ac>)
 8003018:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800301a:	4b0a      	ldr	r3, [pc, #40]	@ (8003044 <HAL_RCC_OscConfig+0x7b0>)
 800301c:	4013      	ands	r3, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003022:	00d2      	lsls	r2, r2, #3
 8003024:	4906      	ldr	r1, [pc, #24]	@ (8003040 <HAL_RCC_OscConfig+0x7ac>)
 8003026:	4313      	orrs	r3, r2
 8003028:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800302a:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <HAL_RCC_OscConfig+0x7ac>)
 800302c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302e:	4a04      	ldr	r2, [pc, #16]	@ (8003040 <HAL_RCC_OscConfig+0x7ac>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3730      	adds	r7, #48	@ 0x30
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	58024400 	.word	0x58024400
 8003044:	ffff0007 	.word	0xffff0007

08003048 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e19c      	b.n	8003396 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800305c:	4b8a      	ldr	r3, [pc, #552]	@ (8003288 <HAL_RCC_ClockConfig+0x240>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d910      	bls.n	800308c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306a:	4b87      	ldr	r3, [pc, #540]	@ (8003288 <HAL_RCC_ClockConfig+0x240>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 020f 	bic.w	r2, r3, #15
 8003072:	4985      	ldr	r1, [pc, #532]	@ (8003288 <HAL_RCC_ClockConfig+0x240>)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800307a:	4b83      	ldr	r3, [pc, #524]	@ (8003288 <HAL_RCC_ClockConfig+0x240>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	429a      	cmp	r2, r3
 8003086:	d001      	beq.n	800308c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e184      	b.n	8003396 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d010      	beq.n	80030ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	4b7b      	ldr	r3, [pc, #492]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d908      	bls.n	80030ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030a8:	4b78      	ldr	r3, [pc, #480]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	4975      	ldr	r1, [pc, #468]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d010      	beq.n	80030e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695a      	ldr	r2, [r3, #20]
 80030ca:	4b70      	ldr	r3, [pc, #448]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d908      	bls.n	80030e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030d6:	4b6d      	ldr	r3, [pc, #436]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	496a      	ldr	r1, [pc, #424]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d010      	beq.n	8003116 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699a      	ldr	r2, [r3, #24]
 80030f8:	4b64      	ldr	r3, [pc, #400]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003100:	429a      	cmp	r2, r3
 8003102:	d908      	bls.n	8003116 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003104:	4b61      	ldr	r3, [pc, #388]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	495e      	ldr	r1, [pc, #376]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 8003112:	4313      	orrs	r3, r2
 8003114:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b00      	cmp	r3, #0
 8003120:	d010      	beq.n	8003144 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69da      	ldr	r2, [r3, #28]
 8003126:	4b59      	ldr	r3, [pc, #356]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800312e:	429a      	cmp	r2, r3
 8003130:	d908      	bls.n	8003144 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003132:	4b56      	ldr	r3, [pc, #344]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	4953      	ldr	r1, [pc, #332]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 8003140:	4313      	orrs	r3, r2
 8003142:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d010      	beq.n	8003172 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	4b4d      	ldr	r3, [pc, #308]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	429a      	cmp	r2, r3
 800315e:	d908      	bls.n	8003172 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003160:	4b4a      	ldr	r3, [pc, #296]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	f023 020f 	bic.w	r2, r3, #15
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	4947      	ldr	r1, [pc, #284]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 800316e:	4313      	orrs	r3, r2
 8003170:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d055      	beq.n	800322a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800317e:	4b43      	ldr	r3, [pc, #268]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	4940      	ldr	r1, [pc, #256]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 800318c:	4313      	orrs	r3, r2
 800318e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d107      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003198:	4b3c      	ldr	r3, [pc, #240]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d121      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0f6      	b.n	8003396 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d107      	bne.n	80031c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031b0:	4b36      	ldr	r3, [pc, #216]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d115      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0ea      	b.n	8003396 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d107      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031c8:	4b30      	ldr	r3, [pc, #192]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d109      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0de      	b.n	8003396 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031d8:	4b2c      	ldr	r3, [pc, #176]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0d6      	b.n	8003396 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031e8:	4b28      	ldr	r3, [pc, #160]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f023 0207 	bic.w	r2, r3, #7
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4925      	ldr	r1, [pc, #148]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031fa:	f7fd fbb5 	bl	8000968 <HAL_GetTick>
 80031fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003200:	e00a      	b.n	8003218 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003202:	f7fd fbb1 	bl	8000968 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003210:	4293      	cmp	r3, r2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e0be      	b.n	8003396 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003218:	4b1c      	ldr	r3, [pc, #112]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	429a      	cmp	r2, r3
 8003228:	d1eb      	bne.n	8003202 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d010      	beq.n	8003258 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	4b14      	ldr	r3, [pc, #80]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	429a      	cmp	r2, r3
 8003244:	d208      	bcs.n	8003258 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003246:	4b11      	ldr	r3, [pc, #68]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	f023 020f 	bic.w	r2, r3, #15
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	490e      	ldr	r1, [pc, #56]	@ (800328c <HAL_RCC_ClockConfig+0x244>)
 8003254:	4313      	orrs	r3, r2
 8003256:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003258:	4b0b      	ldr	r3, [pc, #44]	@ (8003288 <HAL_RCC_ClockConfig+0x240>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d214      	bcs.n	8003290 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b08      	ldr	r3, [pc, #32]	@ (8003288 <HAL_RCC_ClockConfig+0x240>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 020f 	bic.w	r2, r3, #15
 800326e:	4906      	ldr	r1, [pc, #24]	@ (8003288 <HAL_RCC_ClockConfig+0x240>)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b04      	ldr	r3, [pc, #16]	@ (8003288 <HAL_RCC_ClockConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d005      	beq.n	8003290 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e086      	b.n	8003396 <HAL_RCC_ClockConfig+0x34e>
 8003288:	52002000 	.word	0x52002000
 800328c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d010      	beq.n	80032be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	4b3f      	ldr	r3, [pc, #252]	@ (80033a0 <HAL_RCC_ClockConfig+0x358>)
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d208      	bcs.n	80032be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032ac:	4b3c      	ldr	r3, [pc, #240]	@ (80033a0 <HAL_RCC_ClockConfig+0x358>)
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	4939      	ldr	r1, [pc, #228]	@ (80033a0 <HAL_RCC_ClockConfig+0x358>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d010      	beq.n	80032ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695a      	ldr	r2, [r3, #20]
 80032ce:	4b34      	ldr	r3, [pc, #208]	@ (80033a0 <HAL_RCC_ClockConfig+0x358>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d208      	bcs.n	80032ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032da:	4b31      	ldr	r3, [pc, #196]	@ (80033a0 <HAL_RCC_ClockConfig+0x358>)
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	492e      	ldr	r1, [pc, #184]	@ (80033a0 <HAL_RCC_ClockConfig+0x358>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d010      	beq.n	800331a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699a      	ldr	r2, [r3, #24]
 80032fc:	4b28      	ldr	r3, [pc, #160]	@ (80033a0 <HAL_RCC_ClockConfig+0x358>)
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003304:	429a      	cmp	r2, r3
 8003306:	d208      	bcs.n	800331a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003308:	4b25      	ldr	r3, [pc, #148]	@ (80033a0 <HAL_RCC_ClockConfig+0x358>)
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	4922      	ldr	r1, [pc, #136]	@ (80033a0 <HAL_RCC_ClockConfig+0x358>)
 8003316:	4313      	orrs	r3, r2
 8003318:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	2b00      	cmp	r3, #0
 8003324:	d010      	beq.n	8003348 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69da      	ldr	r2, [r3, #28]
 800332a:	4b1d      	ldr	r3, [pc, #116]	@ (80033a0 <HAL_RCC_ClockConfig+0x358>)
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003332:	429a      	cmp	r2, r3
 8003334:	d208      	bcs.n	8003348 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003336:	4b1a      	ldr	r3, [pc, #104]	@ (80033a0 <HAL_RCC_ClockConfig+0x358>)
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	4917      	ldr	r1, [pc, #92]	@ (80033a0 <HAL_RCC_ClockConfig+0x358>)
 8003344:	4313      	orrs	r3, r2
 8003346:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003348:	f000 f834 	bl	80033b4 <HAL_RCC_GetSysClockFreq>
 800334c:	4602      	mov	r2, r0
 800334e:	4b14      	ldr	r3, [pc, #80]	@ (80033a0 <HAL_RCC_ClockConfig+0x358>)
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	4912      	ldr	r1, [pc, #72]	@ (80033a4 <HAL_RCC_ClockConfig+0x35c>)
 800335a:	5ccb      	ldrb	r3, [r1, r3]
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
 8003364:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003366:	4b0e      	ldr	r3, [pc, #56]	@ (80033a0 <HAL_RCC_ClockConfig+0x358>)
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	4a0d      	ldr	r2, [pc, #52]	@ (80033a4 <HAL_RCC_ClockConfig+0x35c>)
 8003370:	5cd3      	ldrb	r3, [r2, r3]
 8003372:	f003 031f 	and.w	r3, r3, #31
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	fa22 f303 	lsr.w	r3, r2, r3
 800337c:	4a0a      	ldr	r2, [pc, #40]	@ (80033a8 <HAL_RCC_ClockConfig+0x360>)
 800337e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003380:	4a0a      	ldr	r2, [pc, #40]	@ (80033ac <HAL_RCC_ClockConfig+0x364>)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003386:	4b0a      	ldr	r3, [pc, #40]	@ (80033b0 <HAL_RCC_ClockConfig+0x368>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fd faa2 	bl	80008d4 <HAL_InitTick>
 8003390:	4603      	mov	r3, r0
 8003392:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003394:	7bfb      	ldrb	r3, [r7, #15]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	58024400 	.word	0x58024400
 80033a4:	08009624 	.word	0x08009624
 80033a8:	24000004 	.word	0x24000004
 80033ac:	24000000 	.word	0x24000000
 80033b0:	24000008 	.word	0x24000008

080033b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b089      	sub	sp, #36	@ 0x24
 80033b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033ba:	4bb3      	ldr	r3, [pc, #716]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033c2:	2b18      	cmp	r3, #24
 80033c4:	f200 8155 	bhi.w	8003672 <HAL_RCC_GetSysClockFreq+0x2be>
 80033c8:	a201      	add	r2, pc, #4	@ (adr r2, 80033d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80033ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ce:	bf00      	nop
 80033d0:	08003435 	.word	0x08003435
 80033d4:	08003673 	.word	0x08003673
 80033d8:	08003673 	.word	0x08003673
 80033dc:	08003673 	.word	0x08003673
 80033e0:	08003673 	.word	0x08003673
 80033e4:	08003673 	.word	0x08003673
 80033e8:	08003673 	.word	0x08003673
 80033ec:	08003673 	.word	0x08003673
 80033f0:	0800345b 	.word	0x0800345b
 80033f4:	08003673 	.word	0x08003673
 80033f8:	08003673 	.word	0x08003673
 80033fc:	08003673 	.word	0x08003673
 8003400:	08003673 	.word	0x08003673
 8003404:	08003673 	.word	0x08003673
 8003408:	08003673 	.word	0x08003673
 800340c:	08003673 	.word	0x08003673
 8003410:	08003461 	.word	0x08003461
 8003414:	08003673 	.word	0x08003673
 8003418:	08003673 	.word	0x08003673
 800341c:	08003673 	.word	0x08003673
 8003420:	08003673 	.word	0x08003673
 8003424:	08003673 	.word	0x08003673
 8003428:	08003673 	.word	0x08003673
 800342c:	08003673 	.word	0x08003673
 8003430:	08003467 	.word	0x08003467
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003434:	4b94      	ldr	r3, [pc, #592]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d009      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003440:	4b91      	ldr	r3, [pc, #580]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	08db      	lsrs	r3, r3, #3
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	4a90      	ldr	r2, [pc, #576]	@ (800368c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
 8003450:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003452:	e111      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003454:	4b8d      	ldr	r3, [pc, #564]	@ (800368c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003456:	61bb      	str	r3, [r7, #24]
      break;
 8003458:	e10e      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800345a:	4b8d      	ldr	r3, [pc, #564]	@ (8003690 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800345c:	61bb      	str	r3, [r7, #24]
      break;
 800345e:	e10b      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003460:	4b8c      	ldr	r3, [pc, #560]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003462:	61bb      	str	r3, [r7, #24]
      break;
 8003464:	e108      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003466:	4b88      	ldr	r3, [pc, #544]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003470:	4b85      	ldr	r3, [pc, #532]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003474:	091b      	lsrs	r3, r3, #4
 8003476:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800347a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800347c:	4b82      	ldr	r3, [pc, #520]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800347e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003486:	4b80      	ldr	r3, [pc, #512]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800348a:	08db      	lsrs	r3, r3, #3
 800348c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	fb02 f303 	mul.w	r3, r2, r3
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800349e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80e1 	beq.w	800366c <HAL_RCC_GetSysClockFreq+0x2b8>
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	f000 8083 	beq.w	80035b8 <HAL_RCC_GetSysClockFreq+0x204>
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	f200 80a1 	bhi.w	80035fc <HAL_RCC_GetSysClockFreq+0x248>
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0x114>
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d056      	beq.n	8003574 <HAL_RCC_GetSysClockFreq+0x1c0>
 80034c6:	e099      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d02d      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80034d4:	4b6c      	ldr	r3, [pc, #432]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	08db      	lsrs	r3, r3, #3
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	4a6b      	ldr	r2, [pc, #428]	@ (800368c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034e0:	fa22 f303 	lsr.w	r3, r2, r3
 80034e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	ee07 3a90 	vmov	s15, r3
 80034ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034fe:	4b62      	ldr	r3, [pc, #392]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003506:	ee07 3a90 	vmov	s15, r3
 800350a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800350e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003512:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003698 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800351a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800351e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800352a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800352e:	e087      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	ee07 3a90 	vmov	s15, r3
 8003536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800353a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800369c <HAL_RCC_GetSysClockFreq+0x2e8>
 800353e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003542:	4b51      	ldr	r3, [pc, #324]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800354a:	ee07 3a90 	vmov	s15, r3
 800354e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003552:	ed97 6a02 	vldr	s12, [r7, #8]
 8003556:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003698 <HAL_RCC_GetSysClockFreq+0x2e4>
 800355a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800355e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003562:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800356a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800356e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003572:	e065      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	ee07 3a90 	vmov	s15, r3
 800357a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800357e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80036a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003586:	4b40      	ldr	r3, [pc, #256]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800358e:	ee07 3a90 	vmov	s15, r3
 8003592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003596:	ed97 6a02 	vldr	s12, [r7, #8]
 800359a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003698 <HAL_RCC_GetSysClockFreq+0x2e4>
 800359e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035b6:	e043      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	ee07 3a90 	vmov	s15, r3
 80035be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035c2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80036a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80035c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ca:	4b2f      	ldr	r3, [pc, #188]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d2:	ee07 3a90 	vmov	s15, r3
 80035d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035da:	ed97 6a02 	vldr	s12, [r7, #8]
 80035de:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003698 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035fa:	e021      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	ee07 3a90 	vmov	s15, r3
 8003602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003606:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80036a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800360a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800360e:	4b1e      	ldr	r3, [pc, #120]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003616:	ee07 3a90 	vmov	s15, r3
 800361a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800361e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003622:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003698 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800362a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800362e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800363a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800363e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003640:	4b11      	ldr	r3, [pc, #68]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003644:	0a5b      	lsrs	r3, r3, #9
 8003646:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800364a:	3301      	adds	r3, #1
 800364c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	ee07 3a90 	vmov	s15, r3
 8003654:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003658:	edd7 6a07 	vldr	s13, [r7, #28]
 800365c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003664:	ee17 3a90 	vmov	r3, s15
 8003668:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800366a:	e005      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	61bb      	str	r3, [r7, #24]
      break;
 8003670:	e002      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003672:	4b07      	ldr	r3, [pc, #28]	@ (8003690 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003674:	61bb      	str	r3, [r7, #24]
      break;
 8003676:	bf00      	nop
  }

  return sysclockfreq;
 8003678:	69bb      	ldr	r3, [r7, #24]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3724      	adds	r7, #36	@ 0x24
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	58024400 	.word	0x58024400
 800368c:	03d09000 	.word	0x03d09000
 8003690:	003d0900 	.word	0x003d0900
 8003694:	007a1200 	.word	0x007a1200
 8003698:	46000000 	.word	0x46000000
 800369c:	4c742400 	.word	0x4c742400
 80036a0:	4a742400 	.word	0x4a742400
 80036a4:	4af42400 	.word	0x4af42400

080036a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80036ae:	f7ff fe81 	bl	80033b4 <HAL_RCC_GetSysClockFreq>
 80036b2:	4602      	mov	r2, r0
 80036b4:	4b10      	ldr	r3, [pc, #64]	@ (80036f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	0a1b      	lsrs	r3, r3, #8
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	490f      	ldr	r1, [pc, #60]	@ (80036fc <HAL_RCC_GetHCLKFreq+0x54>)
 80036c0:	5ccb      	ldrb	r3, [r1, r3]
 80036c2:	f003 031f 	and.w	r3, r3, #31
 80036c6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036cc:	4b0a      	ldr	r3, [pc, #40]	@ (80036f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	4a09      	ldr	r2, [pc, #36]	@ (80036fc <HAL_RCC_GetHCLKFreq+0x54>)
 80036d6:	5cd3      	ldrb	r3, [r2, r3]
 80036d8:	f003 031f 	and.w	r3, r3, #31
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	fa22 f303 	lsr.w	r3, r2, r3
 80036e2:	4a07      	ldr	r2, [pc, #28]	@ (8003700 <HAL_RCC_GetHCLKFreq+0x58>)
 80036e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036e6:	4a07      	ldr	r2, [pc, #28]	@ (8003704 <HAL_RCC_GetHCLKFreq+0x5c>)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80036ec:	4b04      	ldr	r3, [pc, #16]	@ (8003700 <HAL_RCC_GetHCLKFreq+0x58>)
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	58024400 	.word	0x58024400
 80036fc:	08009624 	.word	0x08009624
 8003700:	24000004 	.word	0x24000004
 8003704:	24000000 	.word	0x24000000

08003708 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800370c:	b0c6      	sub	sp, #280	@ 0x118
 800370e:	af00      	add	r7, sp, #0
 8003710:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003714:	2300      	movs	r3, #0
 8003716:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800371a:	2300      	movs	r3, #0
 800371c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800372c:	2500      	movs	r5, #0
 800372e:	ea54 0305 	orrs.w	r3, r4, r5
 8003732:	d049      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003738:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800373a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800373e:	d02f      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003740:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003744:	d828      	bhi.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003746:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800374a:	d01a      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800374c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003750:	d822      	bhi.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003756:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800375a:	d007      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800375c:	e01c      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800375e:	4bab      	ldr	r3, [pc, #684]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003762:	4aaa      	ldr	r2, [pc, #680]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003764:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003768:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800376a:	e01a      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800376c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003770:	3308      	adds	r3, #8
 8003772:	2102      	movs	r1, #2
 8003774:	4618      	mov	r0, r3
 8003776:	f001 f967 	bl	8004a48 <RCCEx_PLL2_Config>
 800377a:	4603      	mov	r3, r0
 800377c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003780:	e00f      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003786:	3328      	adds	r3, #40	@ 0x28
 8003788:	2102      	movs	r1, #2
 800378a:	4618      	mov	r0, r3
 800378c:	f001 fa0e 	bl	8004bac <RCCEx_PLL3_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003796:	e004      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800379e:	e000      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80037a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10a      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80037aa:	4b98      	ldr	r3, [pc, #608]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80037b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037b8:	4a94      	ldr	r2, [pc, #592]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037ba:	430b      	orrs	r3, r1
 80037bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80037be:	e003      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80037d4:	f04f 0900 	mov.w	r9, #0
 80037d8:	ea58 0309 	orrs.w	r3, r8, r9
 80037dc:	d047      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80037de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d82a      	bhi.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80037e8:	a201      	add	r2, pc, #4	@ (adr r2, 80037f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80037ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ee:	bf00      	nop
 80037f0:	08003805 	.word	0x08003805
 80037f4:	08003813 	.word	0x08003813
 80037f8:	08003829 	.word	0x08003829
 80037fc:	08003847 	.word	0x08003847
 8003800:	08003847 	.word	0x08003847
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003804:	4b81      	ldr	r3, [pc, #516]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003808:	4a80      	ldr	r2, [pc, #512]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800380a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800380e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003810:	e01a      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003816:	3308      	adds	r3, #8
 8003818:	2100      	movs	r1, #0
 800381a:	4618      	mov	r0, r3
 800381c:	f001 f914 	bl	8004a48 <RCCEx_PLL2_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003826:	e00f      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800382c:	3328      	adds	r3, #40	@ 0x28
 800382e:	2100      	movs	r1, #0
 8003830:	4618      	mov	r0, r3
 8003832:	f001 f9bb 	bl	8004bac <RCCEx_PLL3_Config>
 8003836:	4603      	mov	r3, r0
 8003838:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800383c:	e004      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003844:	e000      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003846:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003848:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10a      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003850:	4b6e      	ldr	r3, [pc, #440]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003854:	f023 0107 	bic.w	r1, r3, #7
 8003858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800385c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385e:	4a6b      	ldr	r2, [pc, #428]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003860:	430b      	orrs	r3, r1
 8003862:	6513      	str	r3, [r2, #80]	@ 0x50
 8003864:	e003      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003866:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800386a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800386e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003876:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800387a:	f04f 0b00 	mov.w	fp, #0
 800387e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003882:	d05b      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003888:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800388c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003890:	d03b      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003892:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003896:	d834      	bhi.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003898:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800389c:	d037      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800389e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80038a2:	d82e      	bhi.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80038a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80038a8:	d033      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80038aa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80038ae:	d828      	bhi.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80038b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038b4:	d01a      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80038b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038ba:	d822      	bhi.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80038c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038c4:	d007      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80038c6:	e01c      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038c8:	4b50      	ldr	r3, [pc, #320]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038cc:	4a4f      	ldr	r2, [pc, #316]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038d4:	e01e      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038da:	3308      	adds	r3, #8
 80038dc:	2100      	movs	r1, #0
 80038de:	4618      	mov	r0, r3
 80038e0:	f001 f8b2 	bl	8004a48 <RCCEx_PLL2_Config>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80038ea:	e013      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038f0:	3328      	adds	r3, #40	@ 0x28
 80038f2:	2100      	movs	r1, #0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f001 f959 	bl	8004bac <RCCEx_PLL3_Config>
 80038fa:	4603      	mov	r3, r0
 80038fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003900:	e008      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003908:	e004      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800390a:	bf00      	nop
 800390c:	e002      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800390e:	bf00      	nop
 8003910:	e000      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003914:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10b      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800391c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800391e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003920:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003928:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800392c:	4a37      	ldr	r2, [pc, #220]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800392e:	430b      	orrs	r3, r1
 8003930:	6593      	str	r3, [r2, #88]	@ 0x58
 8003932:	e003      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003934:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003938:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800393c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003944:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003948:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800394c:	2300      	movs	r3, #0
 800394e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003952:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003956:	460b      	mov	r3, r1
 8003958:	4313      	orrs	r3, r2
 800395a:	d05d      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800395c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003960:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003964:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003968:	d03b      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800396a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800396e:	d834      	bhi.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003970:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003974:	d037      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003976:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800397a:	d82e      	bhi.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800397c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003980:	d033      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003982:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003986:	d828      	bhi.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003988:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800398c:	d01a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800398e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003992:	d822      	bhi.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003998:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800399c:	d007      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800399e:	e01c      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a0:	4b1a      	ldr	r3, [pc, #104]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a4:	4a19      	ldr	r2, [pc, #100]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039ac:	e01e      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039b2:	3308      	adds	r3, #8
 80039b4:	2100      	movs	r1, #0
 80039b6:	4618      	mov	r0, r3
 80039b8:	f001 f846 	bl	8004a48 <RCCEx_PLL2_Config>
 80039bc:	4603      	mov	r3, r0
 80039be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80039c2:	e013      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039c8:	3328      	adds	r3, #40	@ 0x28
 80039ca:	2100      	movs	r1, #0
 80039cc:	4618      	mov	r0, r3
 80039ce:	f001 f8ed 	bl	8004bac <RCCEx_PLL3_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039d8:	e008      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039e0:	e004      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80039e2:	bf00      	nop
 80039e4:	e002      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80039e6:	bf00      	nop
 80039e8:	e000      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80039ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10d      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80039f4:	4b05      	ldr	r3, [pc, #20]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80039fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a00:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a04:	4a01      	ldr	r2, [pc, #4]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a06:	430b      	orrs	r3, r1
 8003a08:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a0a:	e005      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003a0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a20:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003a24:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003a2e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4313      	orrs	r3, r2
 8003a36:	d03a      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3e:	2b30      	cmp	r3, #48	@ 0x30
 8003a40:	d01f      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003a42:	2b30      	cmp	r3, #48	@ 0x30
 8003a44:	d819      	bhi.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d00c      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	d815      	bhi.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d019      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003a52:	2b10      	cmp	r3, #16
 8003a54:	d111      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a56:	4baa      	ldr	r3, [pc, #680]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5a:	4aa9      	ldr	r2, [pc, #676]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003a62:	e011      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a68:	3308      	adds	r3, #8
 8003a6a:	2102      	movs	r1, #2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 ffeb 	bl	8004a48 <RCCEx_PLL2_Config>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003a78:	e006      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a80:	e002      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003a82:	bf00      	nop
 8003a84:	e000      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003a86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003a90:	4b9b      	ldr	r3, [pc, #620]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a94:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a9e:	4a98      	ldr	r2, [pc, #608]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003aa4:	e003      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003aaa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003aba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003ac4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4313      	orrs	r3, r2
 8003acc:	d051      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ad8:	d035      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003ada:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ade:	d82e      	bhi.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003ae0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ae4:	d031      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003ae6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003aea:	d828      	bhi.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003aec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003af0:	d01a      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003af2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003af6:	d822      	bhi.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b00:	d007      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003b02:	e01c      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b04:	4b7e      	ldr	r3, [pc, #504]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b08:	4a7d      	ldr	r2, [pc, #500]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b10:	e01c      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b16:	3308      	adds	r3, #8
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 ff94 	bl	8004a48 <RCCEx_PLL2_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b26:	e011      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b2c:	3328      	adds	r3, #40	@ 0x28
 8003b2e:	2100      	movs	r1, #0
 8003b30:	4618      	mov	r0, r3
 8003b32:	f001 f83b 	bl	8004bac <RCCEx_PLL3_Config>
 8003b36:	4603      	mov	r3, r0
 8003b38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b3c:	e006      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b44:	e002      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003b46:	bf00      	nop
 8003b48:	e000      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b54:	4b6a      	ldr	r3, [pc, #424]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b58:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b62:	4a67      	ldr	r2, [pc, #412]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b64:	430b      	orrs	r3, r1
 8003b66:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b68:	e003      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003b7e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b82:	2300      	movs	r3, #0
 8003b84:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b88:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	d053      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b9c:	d033      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003b9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ba2:	d82c      	bhi.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003ba4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ba8:	d02f      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003baa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003bae:	d826      	bhi.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003bb0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003bb4:	d02b      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003bb6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003bba:	d820      	bhi.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003bbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bc0:	d012      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003bc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bc6:	d81a      	bhi.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d022      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd0:	d115      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bd6:	3308      	adds	r3, #8
 8003bd8:	2101      	movs	r1, #1
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 ff34 	bl	8004a48 <RCCEx_PLL2_Config>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003be6:	e015      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bec:	3328      	adds	r3, #40	@ 0x28
 8003bee:	2101      	movs	r1, #1
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 ffdb 	bl	8004bac <RCCEx_PLL3_Config>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003bfc:	e00a      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c04:	e006      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003c06:	bf00      	nop
 8003c08:	e004      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003c0a:	bf00      	nop
 8003c0c:	e002      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003c0e:	bf00      	nop
 8003c10:	e000      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10a      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c1c:	4b38      	ldr	r3, [pc, #224]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c20:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c2a:	4a35      	ldr	r2, [pc, #212]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c30:	e003      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c36:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c42:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003c46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003c50:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c54:	460b      	mov	r3, r1
 8003c56:	4313      	orrs	r3, r2
 8003c58:	d058      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c66:	d033      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c6c:	d82c      	bhi.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c72:	d02f      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c78:	d826      	bhi.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003c7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c7e:	d02b      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003c80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c84:	d820      	bhi.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003c86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c8a:	d012      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003c8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c90:	d81a      	bhi.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d022      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003c96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c9a:	d115      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fecf 	bl	8004a48 <RCCEx_PLL2_Config>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003cb0:	e015      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cb6:	3328      	adds	r3, #40	@ 0x28
 8003cb8:	2101      	movs	r1, #1
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 ff76 	bl	8004bac <RCCEx_PLL3_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003cc6:	e00a      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003cce:	e006      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003cd0:	bf00      	nop
 8003cd2:	e004      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003cd4:	bf00      	nop
 8003cd6:	e002      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003cd8:	bf00      	nop
 8003cda:	e000      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10e      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ce6:	4b06      	ldr	r3, [pc, #24]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cf2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003cf6:	4a02      	ldr	r2, [pc, #8]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003cf8:	430b      	orrs	r3, r1
 8003cfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cfc:	e006      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003cfe:	bf00      	nop
 8003d00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003d18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003d22:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	d037      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d36:	d00e      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003d38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d3c:	d816      	bhi.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d018      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003d42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d46:	d111      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d48:	4bc4      	ldr	r3, [pc, #784]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4c:	4ac3      	ldr	r2, [pc, #780]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d54:	e00f      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d5a:	3308      	adds	r3, #8
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fe72 	bl	8004a48 <RCCEx_PLL2_Config>
 8003d64:	4603      	mov	r3, r0
 8003d66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d6a:	e004      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d72:	e000      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10a      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d7e:	4bb7      	ldr	r3, [pc, #732]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d82:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d8c:	4ab3      	ldr	r2, [pc, #716]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d8e:	430b      	orrs	r3, r1
 8003d90:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d92:	e003      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003da8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003dac:	2300      	movs	r3, #0
 8003dae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003db2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003db6:	460b      	mov	r3, r1
 8003db8:	4313      	orrs	r3, r2
 8003dba:	d039      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d81c      	bhi.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dcc:	08003e09 	.word	0x08003e09
 8003dd0:	08003ddd 	.word	0x08003ddd
 8003dd4:	08003deb 	.word	0x08003deb
 8003dd8:	08003e09 	.word	0x08003e09
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ddc:	4b9f      	ldr	r3, [pc, #636]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de0:	4a9e      	ldr	r2, [pc, #632]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003de2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003de6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003de8:	e00f      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dee:	3308      	adds	r3, #8
 8003df0:	2102      	movs	r1, #2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fe28 	bl	8004a48 <RCCEx_PLL2_Config>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003dfe:	e004      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e06:	e000      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003e08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10a      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e12:	4b92      	ldr	r3, [pc, #584]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e16:	f023 0103 	bic.w	r1, r3, #3
 8003e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e20:	4a8e      	ldr	r2, [pc, #568]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e22:	430b      	orrs	r3, r1
 8003e24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e26:	e003      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e38:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003e3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e40:	2300      	movs	r3, #0
 8003e42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e46:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f000 8099 	beq.w	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e52:	4b83      	ldr	r3, [pc, #524]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a82      	ldr	r2, [pc, #520]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e5e:	f7fc fd83 	bl	8000968 <HAL_GetTick>
 8003e62:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e66:	e00b      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e68:	f7fc fd7e 	bl	8000968 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b64      	cmp	r3, #100	@ 0x64
 8003e76:	d903      	bls.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e7e:	e005      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e80:	4b77      	ldr	r3, [pc, #476]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0ed      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003e8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d173      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e94:	4b71      	ldr	r3, [pc, #452]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ea0:	4053      	eors	r3, r2
 8003ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d015      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eaa:	4b6c      	ldr	r3, [pc, #432]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eb2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003eb6:	4b69      	ldr	r3, [pc, #420]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eba:	4a68      	ldr	r2, [pc, #416]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec2:	4b66      	ldr	r3, [pc, #408]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec6:	4a65      	ldr	r2, [pc, #404]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ec8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ecc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ece:	4a63      	ldr	r2, [pc, #396]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ed4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ede:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ee2:	d118      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee4:	f7fc fd40 	bl	8000968 <HAL_GetTick>
 8003ee8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eec:	e00d      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eee:	f7fc fd3b 	bl	8000968 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003ef8:	1ad2      	subs	r2, r2, r3
 8003efa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d903      	bls.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003f08:	e005      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f0a:	4b54      	ldr	r3, [pc, #336]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0eb      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003f16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d129      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f2e:	d10e      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003f30:	4b4a      	ldr	r3, [pc, #296]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003f40:	091a      	lsrs	r2, r3, #4
 8003f42:	4b48      	ldr	r3, [pc, #288]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	4a45      	ldr	r2, [pc, #276]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	6113      	str	r3, [r2, #16]
 8003f4c:	e005      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003f4e:	4b43      	ldr	r3, [pc, #268]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	4a42      	ldr	r2, [pc, #264]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f54:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003f58:	6113      	str	r3, [r2, #16]
 8003f5a:	4b40      	ldr	r3, [pc, #256]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f5c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f6a:	4a3c      	ldr	r2, [pc, #240]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f70:	e008      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003f7a:	e003      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8c:	f002 0301 	and.w	r3, r2, #1
 8003f90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f94:	2300      	movs	r3, #0
 8003f96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003f9a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f000 808f 	beq.w	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003faa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fac:	2b28      	cmp	r3, #40	@ 0x28
 8003fae:	d871      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb6:	bf00      	nop
 8003fb8:	0800409d 	.word	0x0800409d
 8003fbc:	08004095 	.word	0x08004095
 8003fc0:	08004095 	.word	0x08004095
 8003fc4:	08004095 	.word	0x08004095
 8003fc8:	08004095 	.word	0x08004095
 8003fcc:	08004095 	.word	0x08004095
 8003fd0:	08004095 	.word	0x08004095
 8003fd4:	08004095 	.word	0x08004095
 8003fd8:	08004069 	.word	0x08004069
 8003fdc:	08004095 	.word	0x08004095
 8003fe0:	08004095 	.word	0x08004095
 8003fe4:	08004095 	.word	0x08004095
 8003fe8:	08004095 	.word	0x08004095
 8003fec:	08004095 	.word	0x08004095
 8003ff0:	08004095 	.word	0x08004095
 8003ff4:	08004095 	.word	0x08004095
 8003ff8:	0800407f 	.word	0x0800407f
 8003ffc:	08004095 	.word	0x08004095
 8004000:	08004095 	.word	0x08004095
 8004004:	08004095 	.word	0x08004095
 8004008:	08004095 	.word	0x08004095
 800400c:	08004095 	.word	0x08004095
 8004010:	08004095 	.word	0x08004095
 8004014:	08004095 	.word	0x08004095
 8004018:	0800409d 	.word	0x0800409d
 800401c:	08004095 	.word	0x08004095
 8004020:	08004095 	.word	0x08004095
 8004024:	08004095 	.word	0x08004095
 8004028:	08004095 	.word	0x08004095
 800402c:	08004095 	.word	0x08004095
 8004030:	08004095 	.word	0x08004095
 8004034:	08004095 	.word	0x08004095
 8004038:	0800409d 	.word	0x0800409d
 800403c:	08004095 	.word	0x08004095
 8004040:	08004095 	.word	0x08004095
 8004044:	08004095 	.word	0x08004095
 8004048:	08004095 	.word	0x08004095
 800404c:	08004095 	.word	0x08004095
 8004050:	08004095 	.word	0x08004095
 8004054:	08004095 	.word	0x08004095
 8004058:	0800409d 	.word	0x0800409d
 800405c:	58024400 	.word	0x58024400
 8004060:	58024800 	.word	0x58024800
 8004064:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800406c:	3308      	adds	r3, #8
 800406e:	2101      	movs	r1, #1
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fce9 	bl	8004a48 <RCCEx_PLL2_Config>
 8004076:	4603      	mov	r3, r0
 8004078:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800407c:	e00f      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800407e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004082:	3328      	adds	r3, #40	@ 0x28
 8004084:	2101      	movs	r1, #1
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fd90 	bl	8004bac <RCCEx_PLL3_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004092:	e004      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800409a:	e000      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800409c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10a      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80040a6:	4bbf      	ldr	r3, [pc, #764]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80040a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040aa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80040ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040b4:	4abb      	ldr	r2, [pc, #748]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80040b6:	430b      	orrs	r3, r1
 80040b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80040ba:	e003      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80040c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040cc:	f002 0302 	and.w	r3, r2, #2
 80040d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040d4:	2300      	movs	r3, #0
 80040d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80040de:	460b      	mov	r3, r1
 80040e0:	4313      	orrs	r3, r2
 80040e2:	d041      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80040e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ea:	2b05      	cmp	r3, #5
 80040ec:	d824      	bhi.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80040ee:	a201      	add	r2, pc, #4	@ (adr r2, 80040f4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80040f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f4:	08004141 	.word	0x08004141
 80040f8:	0800410d 	.word	0x0800410d
 80040fc:	08004123 	.word	0x08004123
 8004100:	08004141 	.word	0x08004141
 8004104:	08004141 	.word	0x08004141
 8004108:	08004141 	.word	0x08004141
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800410c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004110:	3308      	adds	r3, #8
 8004112:	2101      	movs	r1, #1
 8004114:	4618      	mov	r0, r3
 8004116:	f000 fc97 	bl	8004a48 <RCCEx_PLL2_Config>
 800411a:	4603      	mov	r3, r0
 800411c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004120:	e00f      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004126:	3328      	adds	r3, #40	@ 0x28
 8004128:	2101      	movs	r1, #1
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fd3e 	bl	8004bac <RCCEx_PLL3_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004136:	e004      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800413e:	e000      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004142:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10a      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800414a:	4b96      	ldr	r3, [pc, #600]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800414c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414e:	f023 0107 	bic.w	r1, r3, #7
 8004152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004158:	4a92      	ldr	r2, [pc, #584]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800415a:	430b      	orrs	r3, r1
 800415c:	6553      	str	r3, [r2, #84]	@ 0x54
 800415e:	e003      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004160:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004164:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	f002 0304 	and.w	r3, r2, #4
 8004174:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004178:	2300      	movs	r3, #0
 800417a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800417e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004182:	460b      	mov	r3, r1
 8004184:	4313      	orrs	r3, r2
 8004186:	d044      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800418c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004190:	2b05      	cmp	r3, #5
 8004192:	d825      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004194:	a201      	add	r2, pc, #4	@ (adr r2, 800419c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419a:	bf00      	nop
 800419c:	080041e9 	.word	0x080041e9
 80041a0:	080041b5 	.word	0x080041b5
 80041a4:	080041cb 	.word	0x080041cb
 80041a8:	080041e9 	.word	0x080041e9
 80041ac:	080041e9 	.word	0x080041e9
 80041b0:	080041e9 	.word	0x080041e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041b8:	3308      	adds	r3, #8
 80041ba:	2101      	movs	r1, #1
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fc43 	bl	8004a48 <RCCEx_PLL2_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80041c8:	e00f      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ce:	3328      	adds	r3, #40	@ 0x28
 80041d0:	2101      	movs	r1, #1
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 fcea 	bl	8004bac <RCCEx_PLL3_Config>
 80041d8:	4603      	mov	r3, r0
 80041da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80041de:	e004      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80041e6:	e000      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80041e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10b      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041f2:	4b6c      	ldr	r3, [pc, #432]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80041f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f6:	f023 0107 	bic.w	r1, r3, #7
 80041fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004202:	4a68      	ldr	r2, [pc, #416]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004204:	430b      	orrs	r3, r1
 8004206:	6593      	str	r3, [r2, #88]	@ 0x58
 8004208:	e003      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800420e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421a:	f002 0320 	and.w	r3, r2, #32
 800421e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004222:	2300      	movs	r3, #0
 8004224:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004228:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800422c:	460b      	mov	r3, r1
 800422e:	4313      	orrs	r3, r2
 8004230:	d055      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004236:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800423a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800423e:	d033      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004240:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004244:	d82c      	bhi.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800424a:	d02f      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800424c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004250:	d826      	bhi.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004252:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004256:	d02b      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004258:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800425c:	d820      	bhi.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800425e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004262:	d012      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004264:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004268:	d81a      	bhi.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800426a:	2b00      	cmp	r3, #0
 800426c:	d022      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800426e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004272:	d115      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004278:	3308      	adds	r3, #8
 800427a:	2100      	movs	r1, #0
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fbe3 	bl	8004a48 <RCCEx_PLL2_Config>
 8004282:	4603      	mov	r3, r0
 8004284:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004288:	e015      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800428a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800428e:	3328      	adds	r3, #40	@ 0x28
 8004290:	2102      	movs	r1, #2
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fc8a 	bl	8004bac <RCCEx_PLL3_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800429e:	e00a      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042a6:	e006      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80042a8:	bf00      	nop
 80042aa:	e004      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80042ac:	bf00      	nop
 80042ae:	e002      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80042b0:	bf00      	nop
 80042b2:	e000      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80042b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10b      	bne.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042be:	4b39      	ldr	r3, [pc, #228]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80042c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80042c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042ce:	4a35      	ldr	r2, [pc, #212]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80042d0:	430b      	orrs	r3, r1
 80042d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80042d4:	e003      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80042de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80042ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042ee:	2300      	movs	r3, #0
 80042f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042f4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80042f8:	460b      	mov	r3, r1
 80042fa:	4313      	orrs	r3, r2
 80042fc:	d058      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80042fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004302:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004306:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800430a:	d033      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800430c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004310:	d82c      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004316:	d02f      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800431c:	d826      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800431e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004322:	d02b      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004324:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004328:	d820      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800432a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800432e:	d012      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004330:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004334:	d81a      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004336:	2b00      	cmp	r3, #0
 8004338:	d022      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800433a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800433e:	d115      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004344:	3308      	adds	r3, #8
 8004346:	2100      	movs	r1, #0
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fb7d 	bl	8004a48 <RCCEx_PLL2_Config>
 800434e:	4603      	mov	r3, r0
 8004350:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004354:	e015      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800435a:	3328      	adds	r3, #40	@ 0x28
 800435c:	2102      	movs	r1, #2
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fc24 	bl	8004bac <RCCEx_PLL3_Config>
 8004364:	4603      	mov	r3, r0
 8004366:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800436a:	e00a      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004372:	e006      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004374:	bf00      	nop
 8004376:	e004      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004378:	bf00      	nop
 800437a:	e002      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800437c:	bf00      	nop
 800437e:	e000      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004382:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10e      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800438a:	4b06      	ldr	r3, [pc, #24]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800438c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004396:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800439a:	4a02      	ldr	r2, [pc, #8]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800439c:	430b      	orrs	r3, r1
 800439e:	6593      	str	r3, [r2, #88]	@ 0x58
 80043a0:	e006      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80043a2:	bf00      	nop
 80043a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80043b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80043bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043c0:	2300      	movs	r3, #0
 80043c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80043c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80043ca:	460b      	mov	r3, r1
 80043cc:	4313      	orrs	r3, r2
 80043ce:	d055      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80043d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043d8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80043dc:	d033      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80043de:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80043e2:	d82c      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80043e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043e8:	d02f      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80043ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043ee:	d826      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80043f0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80043f4:	d02b      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80043f6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80043fa:	d820      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80043fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004400:	d012      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004402:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004406:	d81a      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004408:	2b00      	cmp	r3, #0
 800440a:	d022      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800440c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004410:	d115      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004416:	3308      	adds	r3, #8
 8004418:	2100      	movs	r1, #0
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fb14 	bl	8004a48 <RCCEx_PLL2_Config>
 8004420:	4603      	mov	r3, r0
 8004422:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004426:	e015      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800442c:	3328      	adds	r3, #40	@ 0x28
 800442e:	2102      	movs	r1, #2
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fbbb 	bl	8004bac <RCCEx_PLL3_Config>
 8004436:	4603      	mov	r3, r0
 8004438:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800443c:	e00a      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004444:	e006      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004446:	bf00      	nop
 8004448:	e004      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800444a:	bf00      	nop
 800444c:	e002      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800444e:	bf00      	nop
 8004450:	e000      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004454:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10b      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800445c:	4ba0      	ldr	r3, [pc, #640]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800445e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004460:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004468:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800446c:	4a9c      	ldr	r2, [pc, #624]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800446e:	430b      	orrs	r3, r1
 8004470:	6593      	str	r3, [r2, #88]	@ 0x58
 8004472:	e003      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004474:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004478:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800447c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004484:	f002 0308 	and.w	r3, r2, #8
 8004488:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800448c:	2300      	movs	r3, #0
 800448e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004492:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004496:	460b      	mov	r3, r1
 8004498:	4313      	orrs	r3, r2
 800449a:	d01e      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800449c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ae:	3328      	adds	r3, #40	@ 0x28
 80044b0:	2102      	movs	r1, #2
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fb7a 	bl	8004bac <RCCEx_PLL3_Config>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80044c4:	4b86      	ldr	r3, [pc, #536]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80044c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044d4:	4a82      	ldr	r2, [pc, #520]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80044d6:	430b      	orrs	r3, r1
 80044d8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e2:	f002 0310 	and.w	r3, r2, #16
 80044e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80044ea:	2300      	movs	r3, #0
 80044ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80044f0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80044f4:	460b      	mov	r3, r1
 80044f6:	4313      	orrs	r3, r2
 80044f8:	d01e      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80044fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004506:	d10c      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800450c:	3328      	adds	r3, #40	@ 0x28
 800450e:	2102      	movs	r1, #2
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fb4b 	bl	8004bac <RCCEx_PLL3_Config>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004522:	4b6f      	ldr	r3, [pc, #444]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004526:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800452a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800452e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004532:	4a6b      	ldr	r2, [pc, #428]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004534:	430b      	orrs	r3, r1
 8004536:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004540:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004544:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004546:	2300      	movs	r3, #0
 8004548:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800454a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800454e:	460b      	mov	r3, r1
 8004550:	4313      	orrs	r3, r2
 8004552:	d03e      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004558:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800455c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004560:	d022      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004562:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004566:	d81b      	bhi.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004570:	d00b      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004572:	e015      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004578:	3308      	adds	r3, #8
 800457a:	2100      	movs	r1, #0
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fa63 	bl	8004a48 <RCCEx_PLL2_Config>
 8004582:	4603      	mov	r3, r0
 8004584:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004588:	e00f      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800458a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800458e:	3328      	adds	r3, #40	@ 0x28
 8004590:	2102      	movs	r1, #2
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fb0a 	bl	8004bac <RCCEx_PLL3_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800459e:	e004      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80045a6:	e000      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80045a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10b      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045b2:	4b4b      	ldr	r3, [pc, #300]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80045b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80045ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80045c2:	4a47      	ldr	r2, [pc, #284]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80045c4:	430b      	orrs	r3, r1
 80045c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80045c8:	e003      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045da:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80045de:	673b      	str	r3, [r7, #112]	@ 0x70
 80045e0:	2300      	movs	r3, #0
 80045e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80045e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80045e8:	460b      	mov	r3, r1
 80045ea:	4313      	orrs	r3, r2
 80045ec:	d03b      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80045ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045fa:	d01f      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80045fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004600:	d818      	bhi.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004602:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004606:	d003      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004608:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800460c:	d007      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800460e:	e011      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004610:	4b33      	ldr	r3, [pc, #204]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004614:	4a32      	ldr	r2, [pc, #200]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004616:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800461a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800461c:	e00f      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800461e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004622:	3328      	adds	r3, #40	@ 0x28
 8004624:	2101      	movs	r1, #1
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fac0 	bl	8004bac <RCCEx_PLL3_Config>
 800462c:	4603      	mov	r3, r0
 800462e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004632:	e004      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800463a:	e000      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800463c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800463e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10b      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004646:	4b26      	ldr	r3, [pc, #152]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800464e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004652:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004656:	4a22      	ldr	r2, [pc, #136]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004658:	430b      	orrs	r3, r1
 800465a:	6553      	str	r3, [r2, #84]	@ 0x54
 800465c:	e003      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004662:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004672:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004674:	2300      	movs	r3, #0
 8004676:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004678:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800467c:	460b      	mov	r3, r1
 800467e:	4313      	orrs	r3, r2
 8004680:	d034      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800468c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004690:	d007      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004692:	e011      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004694:	4b12      	ldr	r3, [pc, #72]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004698:	4a11      	ldr	r2, [pc, #68]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800469a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800469e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80046a0:	e00e      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046a6:	3308      	adds	r3, #8
 80046a8:	2102      	movs	r1, #2
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 f9cc 	bl	8004a48 <RCCEx_PLL2_Config>
 80046b0:	4603      	mov	r3, r0
 80046b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80046b6:	e003      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80046be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10d      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80046c8:	4b05      	ldr	r3, [pc, #20]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80046ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046cc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80046d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046d6:	4a02      	ldr	r2, [pc, #8]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80046d8:	430b      	orrs	r3, r1
 80046da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046dc:	e006      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80046de:	bf00      	nop
 80046e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80046f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80046fa:	2300      	movs	r3, #0
 80046fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80046fe:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004702:	460b      	mov	r3, r1
 8004704:	4313      	orrs	r3, r2
 8004706:	d00c      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800470c:	3328      	adds	r3, #40	@ 0x28
 800470e:	2102      	movs	r1, #2
 8004710:	4618      	mov	r0, r3
 8004712:	f000 fa4b 	bl	8004bac <RCCEx_PLL3_Config>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800472e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004730:	2300      	movs	r3, #0
 8004732:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004734:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004738:	460b      	mov	r3, r1
 800473a:	4313      	orrs	r3, r2
 800473c:	d036      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800473e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004742:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004744:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004748:	d018      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800474a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800474e:	d811      	bhi.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004754:	d014      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004756:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800475a:	d80b      	bhi.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800475c:	2b00      	cmp	r3, #0
 800475e:	d011      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004764:	d106      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004766:	4bb7      	ldr	r3, [pc, #732]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476a:	4ab6      	ldr	r2, [pc, #728]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800476c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004770:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004772:	e008      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800477a:	e004      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800477c:	bf00      	nop
 800477e:	e002      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004780:	bf00      	nop
 8004782:	e000      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004786:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10a      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800478e:	4bad      	ldr	r3, [pc, #692]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004792:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800479a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800479c:	4aa9      	ldr	r2, [pc, #676]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800479e:	430b      	orrs	r3, r1
 80047a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80047a2:	e003      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80047b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80047ba:	2300      	movs	r3, #0
 80047bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80047be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80047c2:	460b      	mov	r3, r1
 80047c4:	4313      	orrs	r3, r2
 80047c6:	d009      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047c8:	4b9e      	ldr	r3, [pc, #632]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047cc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80047d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d6:	4a9b      	ldr	r2, [pc, #620]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047d8:	430b      	orrs	r3, r1
 80047da:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80047e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047ea:	2300      	movs	r3, #0
 80047ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047ee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80047f2:	460b      	mov	r3, r1
 80047f4:	4313      	orrs	r3, r2
 80047f6:	d009      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047f8:	4b92      	ldr	r3, [pc, #584]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047fc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004804:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004806:	4a8f      	ldr	r2, [pc, #572]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004808:	430b      	orrs	r3, r1
 800480a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800480c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004814:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004818:	643b      	str	r3, [r7, #64]	@ 0x40
 800481a:	2300      	movs	r3, #0
 800481c:	647b      	str	r3, [r7, #68]	@ 0x44
 800481e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004822:	460b      	mov	r3, r1
 8004824:	4313      	orrs	r3, r2
 8004826:	d00e      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004828:	4b86      	ldr	r3, [pc, #536]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	4a85      	ldr	r2, [pc, #532]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800482e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004832:	6113      	str	r3, [r2, #16]
 8004834:	4b83      	ldr	r3, [pc, #524]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004836:	6919      	ldr	r1, [r3, #16]
 8004838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800483c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004840:	4a80      	ldr	r2, [pc, #512]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004842:	430b      	orrs	r3, r1
 8004844:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004852:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004854:	2300      	movs	r3, #0
 8004856:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004858:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800485c:	460b      	mov	r3, r1
 800485e:	4313      	orrs	r3, r2
 8004860:	d009      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004862:	4b78      	ldr	r3, [pc, #480]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004866:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800486a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800486e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004870:	4a74      	ldr	r2, [pc, #464]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004872:	430b      	orrs	r3, r1
 8004874:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800487a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004882:	633b      	str	r3, [r7, #48]	@ 0x30
 8004884:	2300      	movs	r3, #0
 8004886:	637b      	str	r3, [r7, #52]	@ 0x34
 8004888:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800488c:	460b      	mov	r3, r1
 800488e:	4313      	orrs	r3, r2
 8004890:	d00a      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004892:	4b6c      	ldr	r3, [pc, #432]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004896:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800489a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800489e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a2:	4a68      	ldr	r2, [pc, #416]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80048a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	2100      	movs	r1, #0
 80048b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048ba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80048be:	460b      	mov	r3, r1
 80048c0:	4313      	orrs	r3, r2
 80048c2:	d011      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c8:	3308      	adds	r3, #8
 80048ca:	2100      	movs	r1, #0
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 f8bb 	bl	8004a48 <RCCEx_PLL2_Config>
 80048d2:	4603      	mov	r3, r0
 80048d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80048d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80048e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f0:	2100      	movs	r1, #0
 80048f2:	6239      	str	r1, [r7, #32]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80048fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80048fe:	460b      	mov	r3, r1
 8004900:	4313      	orrs	r3, r2
 8004902:	d011      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004908:	3308      	adds	r3, #8
 800490a:	2101      	movs	r1, #1
 800490c:	4618      	mov	r0, r3
 800490e:	f000 f89b 	bl	8004a48 <RCCEx_PLL2_Config>
 8004912:	4603      	mov	r3, r0
 8004914:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004918:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004920:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004924:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	2100      	movs	r1, #0
 8004932:	61b9      	str	r1, [r7, #24]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	61fb      	str	r3, [r7, #28]
 800493a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800493e:	460b      	mov	r3, r1
 8004940:	4313      	orrs	r3, r2
 8004942:	d011      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004948:	3308      	adds	r3, #8
 800494a:	2102      	movs	r1, #2
 800494c:	4618      	mov	r0, r3
 800494e:	f000 f87b 	bl	8004a48 <RCCEx_PLL2_Config>
 8004952:	4603      	mov	r3, r0
 8004954:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004958:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004960:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004964:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800496c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004970:	2100      	movs	r1, #0
 8004972:	6139      	str	r1, [r7, #16]
 8004974:	f003 0308 	and.w	r3, r3, #8
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800497e:	460b      	mov	r3, r1
 8004980:	4313      	orrs	r3, r2
 8004982:	d011      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004988:	3328      	adds	r3, #40	@ 0x28
 800498a:	2100      	movs	r1, #0
 800498c:	4618      	mov	r0, r3
 800498e:	f000 f90d 	bl	8004bac <RCCEx_PLL3_Config>
 8004992:	4603      	mov	r3, r0
 8004994:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004998:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80049a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b0:	2100      	movs	r1, #0
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80049be:	460b      	mov	r3, r1
 80049c0:	4313      	orrs	r3, r2
 80049c2:	d011      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049c8:	3328      	adds	r3, #40	@ 0x28
 80049ca:	2101      	movs	r1, #1
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 f8ed 	bl	8004bac <RCCEx_PLL3_Config>
 80049d2:	4603      	mov	r3, r0
 80049d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80049d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80049e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	2100      	movs	r1, #0
 80049f2:	6039      	str	r1, [r7, #0]
 80049f4:	f003 0320 	and.w	r3, r3, #32
 80049f8:	607b      	str	r3, [r7, #4]
 80049fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80049fe:	460b      	mov	r3, r1
 8004a00:	4313      	orrs	r3, r2
 8004a02:	d011      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a08:	3328      	adds	r3, #40	@ 0x28
 8004a0a:	2102      	movs	r1, #2
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 f8cd 	bl	8004bac <RCCEx_PLL3_Config>
 8004a12:	4603      	mov	r3, r0
 8004a14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004a18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004a28:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	e000      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a42:	bf00      	nop
 8004a44:	58024400 	.word	0x58024400

08004a48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a56:	4b53      	ldr	r3, [pc, #332]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	2b03      	cmp	r3, #3
 8004a60:	d101      	bne.n	8004a66 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e099      	b.n	8004b9a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a66:	4b4f      	ldr	r3, [pc, #316]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a4e      	ldr	r2, [pc, #312]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004a6c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a72:	f7fb ff79 	bl	8000968 <HAL_GetTick>
 8004a76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a78:	e008      	b.n	8004a8c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a7a:	f7fb ff75 	bl	8000968 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e086      	b.n	8004b9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a8c:	4b45      	ldr	r3, [pc, #276]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1f0      	bne.n	8004a7a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a98:	4b42      	ldr	r3, [pc, #264]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a9c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	031b      	lsls	r3, r3, #12
 8004aa6:	493f      	ldr	r1, [pc, #252]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	628b      	str	r3, [r1, #40]	@ 0x28
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	025b      	lsls	r3, r3, #9
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	041b      	lsls	r3, r3, #16
 8004aca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	061b      	lsls	r3, r3, #24
 8004ad8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004adc:	4931      	ldr	r1, [pc, #196]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ae2:	4b30      	ldr	r3, [pc, #192]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	492d      	ldr	r1, [pc, #180]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004af4:	4b2b      	ldr	r3, [pc, #172]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af8:	f023 0220 	bic.w	r2, r3, #32
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	4928      	ldr	r1, [pc, #160]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b06:	4b27      	ldr	r3, [pc, #156]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0a:	4a26      	ldr	r2, [pc, #152]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004b0c:	f023 0310 	bic.w	r3, r3, #16
 8004b10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b12:	4b24      	ldr	r3, [pc, #144]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004b14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b16:	4b24      	ldr	r3, [pc, #144]	@ (8004ba8 <RCCEx_PLL2_Config+0x160>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	69d2      	ldr	r2, [r2, #28]
 8004b1e:	00d2      	lsls	r2, r2, #3
 8004b20:	4920      	ldr	r1, [pc, #128]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b26:	4b1f      	ldr	r3, [pc, #124]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004b2c:	f043 0310 	orr.w	r3, r3, #16
 8004b30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d106      	bne.n	8004b46 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b38:	4b1a      	ldr	r3, [pc, #104]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3c:	4a19      	ldr	r2, [pc, #100]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004b3e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004b44:	e00f      	b.n	8004b66 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d106      	bne.n	8004b5a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b4c:	4b15      	ldr	r3, [pc, #84]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b50:	4a14      	ldr	r2, [pc, #80]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004b52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004b58:	e005      	b.n	8004b66 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b5a:	4b12      	ldr	r3, [pc, #72]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5e:	4a11      	ldr	r2, [pc, #68]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004b60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004b64:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b66:	4b0f      	ldr	r3, [pc, #60]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a0e      	ldr	r2, [pc, #56]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004b6c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b72:	f7fb fef9 	bl	8000968 <HAL_GetTick>
 8004b76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b78:	e008      	b.n	8004b8c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b7a:	f7fb fef5 	bl	8000968 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d901      	bls.n	8004b8c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e006      	b.n	8004b9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ba4 <RCCEx_PLL2_Config+0x15c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0f0      	beq.n	8004b7a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	58024400 	.word	0x58024400
 8004ba8:	ffff0007 	.word	0xffff0007

08004bac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bba:	4b53      	ldr	r3, [pc, #332]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d101      	bne.n	8004bca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e099      	b.n	8004cfe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004bca:	4b4f      	ldr	r3, [pc, #316]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a4e      	ldr	r2, [pc, #312]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004bd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd6:	f7fb fec7 	bl	8000968 <HAL_GetTick>
 8004bda:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bdc:	e008      	b.n	8004bf0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004bde:	f7fb fec3 	bl	8000968 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e086      	b.n	8004cfe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bf0:	4b45      	ldr	r3, [pc, #276]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1f0      	bne.n	8004bde <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004bfc:	4b42      	ldr	r3, [pc, #264]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c00:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	051b      	lsls	r3, r3, #20
 8004c0a:	493f      	ldr	r1, [pc, #252]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	025b      	lsls	r3, r3, #9
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	041b      	lsls	r3, r3, #16
 8004c2e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	061b      	lsls	r3, r3, #24
 8004c3c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c40:	4931      	ldr	r1, [pc, #196]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c46:	4b30      	ldr	r3, [pc, #192]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	492d      	ldr	r1, [pc, #180]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c58:	4b2b      	ldr	r3, [pc, #172]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	4928      	ldr	r1, [pc, #160]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c6a:	4b27      	ldr	r3, [pc, #156]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6e:	4a26      	ldr	r2, [pc, #152]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004c70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c76:	4b24      	ldr	r3, [pc, #144]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004c78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c7a:	4b24      	ldr	r3, [pc, #144]	@ (8004d0c <RCCEx_PLL3_Config+0x160>)
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	69d2      	ldr	r2, [r2, #28]
 8004c82:	00d2      	lsls	r2, r2, #3
 8004c84:	4920      	ldr	r1, [pc, #128]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8e:	4a1e      	ldr	r2, [pc, #120]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d106      	bne.n	8004caa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca0:	4a19      	ldr	r2, [pc, #100]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004ca2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ca8:	e00f      	b.n	8004cca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d106      	bne.n	8004cbe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004cb0:	4b15      	ldr	r3, [pc, #84]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb4:	4a14      	ldr	r2, [pc, #80]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004cb6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004cba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004cbc:	e005      	b.n	8004cca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004cbe:	4b12      	ldr	r3, [pc, #72]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc2:	4a11      	ldr	r2, [pc, #68]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004cc4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004cca:	4b0f      	ldr	r3, [pc, #60]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a0e      	ldr	r2, [pc, #56]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd6:	f7fb fe47 	bl	8000968 <HAL_GetTick>
 8004cda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cdc:	e008      	b.n	8004cf0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004cde:	f7fb fe43 	bl	8000968 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e006      	b.n	8004cfe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cf0:	4b05      	ldr	r3, [pc, #20]	@ (8004d08 <RCCEx_PLL3_Config+0x15c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0f0      	beq.n	8004cde <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	58024400 	.word	0x58024400
 8004d0c:	ffff0007 	.word	0xffff0007

08004d10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d10:	b084      	sub	sp, #16
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b084      	sub	sp, #16
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	f107 001c 	add.w	r0, r7, #28
 8004d1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d22:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d121      	bne.n	8004d6e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	4b2c      	ldr	r3, [pc, #176]	@ (8004dec <USB_CoreInit+0xdc>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d105      	bne.n	8004d62 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f001 fa1a 	bl	800619c <USB_CoreReset>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	73fb      	strb	r3, [r7, #15]
 8004d6c:	e01b      	b.n	8004da6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f001 fa0e 	bl	800619c <USB_CoreReset>
 8004d80:	4603      	mov	r3, r0
 8004d82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d84:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d106      	bne.n	8004d9a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d90:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d98:	e005      	b.n	8004da6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004da6:	7fbb      	ldrb	r3, [r7, #30]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d116      	bne.n	8004dda <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004dba:	4b0d      	ldr	r3, [pc, #52]	@ (8004df0 <USB_CoreInit+0xe0>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f043 0206 	orr.w	r2, r3, #6
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f043 0220 	orr.w	r2, r3, #32
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004de6:	b004      	add	sp, #16
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	ffbdffbf 	.word	0xffbdffbf
 8004df0:	03ee0000 	.word	0x03ee0000

08004df4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d165      	bne.n	8004ed4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	4a41      	ldr	r2, [pc, #260]	@ (8004f10 <USB_SetTurnaroundTime+0x11c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d906      	bls.n	8004e1e <USB_SetTurnaroundTime+0x2a>
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4a40      	ldr	r2, [pc, #256]	@ (8004f14 <USB_SetTurnaroundTime+0x120>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d202      	bcs.n	8004e1e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e18:	230f      	movs	r3, #15
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	e062      	b.n	8004ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	4a3c      	ldr	r2, [pc, #240]	@ (8004f14 <USB_SetTurnaroundTime+0x120>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d306      	bcc.n	8004e34 <USB_SetTurnaroundTime+0x40>
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	4a3b      	ldr	r2, [pc, #236]	@ (8004f18 <USB_SetTurnaroundTime+0x124>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d202      	bcs.n	8004e34 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e2e:	230e      	movs	r3, #14
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e057      	b.n	8004ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4a38      	ldr	r2, [pc, #224]	@ (8004f18 <USB_SetTurnaroundTime+0x124>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d306      	bcc.n	8004e4a <USB_SetTurnaroundTime+0x56>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4a37      	ldr	r2, [pc, #220]	@ (8004f1c <USB_SetTurnaroundTime+0x128>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d202      	bcs.n	8004e4a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e44:	230d      	movs	r3, #13
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	e04c      	b.n	8004ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4a33      	ldr	r2, [pc, #204]	@ (8004f1c <USB_SetTurnaroundTime+0x128>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d306      	bcc.n	8004e60 <USB_SetTurnaroundTime+0x6c>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	4a32      	ldr	r2, [pc, #200]	@ (8004f20 <USB_SetTurnaroundTime+0x12c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d802      	bhi.n	8004e60 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e5a:	230c      	movs	r3, #12
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	e041      	b.n	8004ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4a2f      	ldr	r2, [pc, #188]	@ (8004f20 <USB_SetTurnaroundTime+0x12c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d906      	bls.n	8004e76 <USB_SetTurnaroundTime+0x82>
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	4a2e      	ldr	r2, [pc, #184]	@ (8004f24 <USB_SetTurnaroundTime+0x130>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d802      	bhi.n	8004e76 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e70:	230b      	movs	r3, #11
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	e036      	b.n	8004ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	4a2a      	ldr	r2, [pc, #168]	@ (8004f24 <USB_SetTurnaroundTime+0x130>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d906      	bls.n	8004e8c <USB_SetTurnaroundTime+0x98>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4a29      	ldr	r2, [pc, #164]	@ (8004f28 <USB_SetTurnaroundTime+0x134>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d802      	bhi.n	8004e8c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e86:	230a      	movs	r3, #10
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	e02b      	b.n	8004ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4a26      	ldr	r2, [pc, #152]	@ (8004f28 <USB_SetTurnaroundTime+0x134>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d906      	bls.n	8004ea2 <USB_SetTurnaroundTime+0xae>
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	4a25      	ldr	r2, [pc, #148]	@ (8004f2c <USB_SetTurnaroundTime+0x138>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d202      	bcs.n	8004ea2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e9c:	2309      	movs	r3, #9
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	e020      	b.n	8004ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4a21      	ldr	r2, [pc, #132]	@ (8004f2c <USB_SetTurnaroundTime+0x138>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d306      	bcc.n	8004eb8 <USB_SetTurnaroundTime+0xc4>
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	4a20      	ldr	r2, [pc, #128]	@ (8004f30 <USB_SetTurnaroundTime+0x13c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d802      	bhi.n	8004eb8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004eb2:	2308      	movs	r3, #8
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	e015      	b.n	8004ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4a1d      	ldr	r2, [pc, #116]	@ (8004f30 <USB_SetTurnaroundTime+0x13c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d906      	bls.n	8004ece <USB_SetTurnaroundTime+0xda>
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8004f34 <USB_SetTurnaroundTime+0x140>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d202      	bcs.n	8004ece <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004ec8:	2307      	movs	r3, #7
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	e00a      	b.n	8004ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ece:	2306      	movs	r3, #6
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	e007      	b.n	8004ee4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ed4:	79fb      	ldrb	r3, [r7, #7]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d102      	bne.n	8004ee0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004eda:	2309      	movs	r3, #9
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	e001      	b.n	8004ee4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ee0:	2309      	movs	r3, #9
 8004ee2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	029b      	lsls	r3, r3, #10
 8004ef8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004efc:	431a      	orrs	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	371c      	adds	r7, #28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	00d8acbf 	.word	0x00d8acbf
 8004f14:	00e4e1c0 	.word	0x00e4e1c0
 8004f18:	00f42400 	.word	0x00f42400
 8004f1c:	01067380 	.word	0x01067380
 8004f20:	011a499f 	.word	0x011a499f
 8004f24:	01312cff 	.word	0x01312cff
 8004f28:	014ca43f 	.word	0x014ca43f
 8004f2c:	016e3600 	.word	0x016e3600
 8004f30:	01a6ab1f 	.word	0x01a6ab1f
 8004f34:	01e84800 	.word	0x01e84800

08004f38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f043 0201 	orr.w	r2, r3, #1
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f023 0201 	bic.w	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d115      	bne.n	8004fca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004faa:	200a      	movs	r0, #10
 8004fac:	f7fb fce8 	bl	8000980 <HAL_Delay>
      ms += 10U;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	330a      	adds	r3, #10
 8004fb4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f001 f85f 	bl	800607a <USB_GetMode>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d01e      	beq.n	8005000 <USB_SetCurrentMode+0x84>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2bc7      	cmp	r3, #199	@ 0xc7
 8004fc6:	d9f0      	bls.n	8004faa <USB_SetCurrentMode+0x2e>
 8004fc8:	e01a      	b.n	8005000 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fca:	78fb      	ldrb	r3, [r7, #3]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d115      	bne.n	8004ffc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004fdc:	200a      	movs	r0, #10
 8004fde:	f7fb fccf 	bl	8000980 <HAL_Delay>
      ms += 10U;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	330a      	adds	r3, #10
 8004fe6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f001 f846 	bl	800607a <USB_GetMode>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <USB_SetCurrentMode+0x84>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2bc7      	cmp	r3, #199	@ 0xc7
 8004ff8:	d9f0      	bls.n	8004fdc <USB_SetCurrentMode+0x60>
 8004ffa:	e001      	b.n	8005000 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e005      	b.n	800500c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2bc8      	cmp	r3, #200	@ 0xc8
 8005004:	d101      	bne.n	800500a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005014:	b084      	sub	sp, #16
 8005016:	b580      	push	{r7, lr}
 8005018:	b086      	sub	sp, #24
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005022:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800502e:	2300      	movs	r3, #0
 8005030:	613b      	str	r3, [r7, #16]
 8005032:	e009      	b.n	8005048 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	3340      	adds	r3, #64	@ 0x40
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	2200      	movs	r2, #0
 8005040:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	3301      	adds	r3, #1
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	2b0e      	cmp	r3, #14
 800504c:	d9f2      	bls.n	8005034 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800504e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005052:	2b00      	cmp	r3, #0
 8005054:	d11c      	bne.n	8005090 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005064:	f043 0302 	orr.w	r3, r3, #2
 8005068:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800506e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	e005      	b.n	800509c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005094:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80050a2:	461a      	mov	r2, r3
 80050a4:	2300      	movs	r3, #0
 80050a6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050a8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d10d      	bne.n	80050cc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d104      	bne.n	80050c2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050b8:	2100      	movs	r1, #0
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f968 	bl	8005390 <USB_SetDevSpeed>
 80050c0:	e008      	b.n	80050d4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050c2:	2101      	movs	r1, #1
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f963 	bl	8005390 <USB_SetDevSpeed>
 80050ca:	e003      	b.n	80050d4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050cc:	2103      	movs	r1, #3
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f95e 	bl	8005390 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050d4:	2110      	movs	r1, #16
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f8fa 	bl	80052d0 <USB_FlushTxFifo>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f924 	bl	8005334 <USB_FlushRxFifo>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050fc:	461a      	mov	r2, r3
 80050fe:	2300      	movs	r3, #0
 8005100:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005108:	461a      	mov	r2, r3
 800510a:	2300      	movs	r3, #0
 800510c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005114:	461a      	mov	r2, r3
 8005116:	2300      	movs	r3, #0
 8005118:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800511a:	2300      	movs	r3, #0
 800511c:	613b      	str	r3, [r7, #16]
 800511e:	e043      	b.n	80051a8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005132:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005136:	d118      	bne.n	800516a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10a      	bne.n	8005154 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800514a:	461a      	mov	r2, r3
 800514c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	e013      	b.n	800517c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005160:	461a      	mov	r2, r3
 8005162:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	e008      	b.n	800517c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005176:	461a      	mov	r2, r3
 8005178:	2300      	movs	r3, #0
 800517a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005188:	461a      	mov	r2, r3
 800518a:	2300      	movs	r3, #0
 800518c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800519a:	461a      	mov	r2, r3
 800519c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	3301      	adds	r3, #1
 80051a6:	613b      	str	r3, [r7, #16]
 80051a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80051ac:	461a      	mov	r2, r3
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d3b5      	bcc.n	8005120 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051b4:	2300      	movs	r3, #0
 80051b6:	613b      	str	r3, [r7, #16]
 80051b8:	e043      	b.n	8005242 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051d0:	d118      	bne.n	8005204 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10a      	bne.n	80051ee <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051e4:	461a      	mov	r2, r3
 80051e6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80051ea:	6013      	str	r3, [r2, #0]
 80051ec:	e013      	b.n	8005216 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051fa:	461a      	mov	r2, r3
 80051fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	e008      	b.n	8005216 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005210:	461a      	mov	r2, r3
 8005212:	2300      	movs	r3, #0
 8005214:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005222:	461a      	mov	r2, r3
 8005224:	2300      	movs	r3, #0
 8005226:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005234:	461a      	mov	r2, r3
 8005236:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800523a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	3301      	adds	r3, #1
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005246:	461a      	mov	r2, r3
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	4293      	cmp	r3, r2
 800524c:	d3b5      	bcc.n	80051ba <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800525c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005260:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800526e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005270:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005274:	2b00      	cmp	r3, #0
 8005276:	d105      	bne.n	8005284 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	f043 0210 	orr.w	r2, r3, #16
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699a      	ldr	r2, [r3, #24]
 8005288:	4b0f      	ldr	r3, [pc, #60]	@ (80052c8 <USB_DevInit+0x2b4>)
 800528a:	4313      	orrs	r3, r2
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005290:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005294:	2b00      	cmp	r3, #0
 8005296:	d005      	beq.n	80052a4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	f043 0208 	orr.w	r2, r3, #8
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052a4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d105      	bne.n	80052b8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699a      	ldr	r2, [r3, #24]
 80052b0:	4b06      	ldr	r3, [pc, #24]	@ (80052cc <USB_DevInit+0x2b8>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052c4:	b004      	add	sp, #16
 80052c6:	4770      	bx	lr
 80052c8:	803c3800 	.word	0x803c3800
 80052cc:	40000004 	.word	0x40000004

080052d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	3301      	adds	r3, #1
 80052e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052ea:	d901      	bls.n	80052f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e01b      	b.n	8005328 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	daf2      	bge.n	80052de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	019b      	lsls	r3, r3, #6
 8005300:	f043 0220 	orr.w	r2, r3, #32
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3301      	adds	r3, #1
 800530c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005314:	d901      	bls.n	800531a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e006      	b.n	8005328 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b20      	cmp	r3, #32
 8005324:	d0f0      	beq.n	8005308 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3301      	adds	r3, #1
 8005344:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800534c:	d901      	bls.n	8005352 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e018      	b.n	8005384 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	2b00      	cmp	r3, #0
 8005358:	daf2      	bge.n	8005340 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2210      	movs	r2, #16
 8005362:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3301      	adds	r3, #1
 8005368:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005370:	d901      	bls.n	8005376 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e006      	b.n	8005384 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f003 0310 	and.w	r3, r3, #16
 800537e:	2b10      	cmp	r3, #16
 8005380:	d0f0      	beq.n	8005364 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	68f9      	ldr	r1, [r7, #12]
 80053ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053b0:	4313      	orrs	r3, r2
 80053b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b087      	sub	sp, #28
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 0306 	and.w	r3, r3, #6
 80053da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d102      	bne.n	80053e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80053e2:	2300      	movs	r3, #0
 80053e4:	75fb      	strb	r3, [r7, #23]
 80053e6:	e00a      	b.n	80053fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d002      	beq.n	80053f4 <USB_GetDevSpeed+0x32>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b06      	cmp	r3, #6
 80053f2:	d102      	bne.n	80053fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80053f4:	2302      	movs	r3, #2
 80053f6:	75fb      	strb	r3, [r7, #23]
 80053f8:	e001      	b.n	80053fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80053fa:	230f      	movs	r3, #15
 80053fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80053fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005400:	4618      	mov	r0, r3
 8005402:	371c      	adds	r7, #28
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	785b      	ldrb	r3, [r3, #1]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d139      	bne.n	800549c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800542e:	69da      	ldr	r2, [r3, #28]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	f003 030f 	and.w	r3, r3, #15
 8005438:	2101      	movs	r1, #1
 800543a:	fa01 f303 	lsl.w	r3, r1, r3
 800543e:	b29b      	uxth	r3, r3
 8005440:	68f9      	ldr	r1, [r7, #12]
 8005442:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005446:	4313      	orrs	r3, r2
 8005448:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d153      	bne.n	8005508 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	791b      	ldrb	r3, [r3, #4]
 800547a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800547c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	059b      	lsls	r3, r3, #22
 8005482:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005484:	431a      	orrs	r2, r3
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	0159      	lsls	r1, r3, #5
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	440b      	add	r3, r1
 800548e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005492:	4619      	mov	r1, r3
 8005494:	4b20      	ldr	r3, [pc, #128]	@ (8005518 <USB_ActivateEndpoint+0x10c>)
 8005496:	4313      	orrs	r3, r2
 8005498:	600b      	str	r3, [r1, #0]
 800549a:	e035      	b.n	8005508 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054a2:	69da      	ldr	r2, [r3, #28]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	f003 030f 	and.w	r3, r3, #15
 80054ac:	2101      	movs	r1, #1
 80054ae:	fa01 f303 	lsl.w	r3, r1, r3
 80054b2:	041b      	lsls	r3, r3, #16
 80054b4:	68f9      	ldr	r1, [r7, #12]
 80054b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054ba:	4313      	orrs	r3, r2
 80054bc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d119      	bne.n	8005508 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	791b      	ldrb	r3, [r3, #4]
 80054ee:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054f0:	430b      	orrs	r3, r1
 80054f2:	431a      	orrs	r2, r3
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	0159      	lsls	r1, r3, #5
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	440b      	add	r3, r1
 80054fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005500:	4619      	mov	r1, r3
 8005502:	4b05      	ldr	r3, [pc, #20]	@ (8005518 <USB_ActivateEndpoint+0x10c>)
 8005504:	4313      	orrs	r3, r2
 8005506:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	10008000 	.word	0x10008000

0800551c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08a      	sub	sp, #40	@ 0x28
 8005520:	af02      	add	r7, sp, #8
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	4613      	mov	r3, r2
 8005528:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	785b      	ldrb	r3, [r3, #1]
 8005538:	2b01      	cmp	r3, #1
 800553a:	f040 8181 	bne.w	8005840 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d132      	bne.n	80055ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005552:	691a      	ldr	r2, [r3, #16]
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	0159      	lsls	r1, r3, #5
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	440b      	add	r3, r1
 800555c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005560:	4619      	mov	r1, r3
 8005562:	4ba5      	ldr	r3, [pc, #660]	@ (80057f8 <USB_EPStartXfer+0x2dc>)
 8005564:	4013      	ands	r3, r2
 8005566:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	0151      	lsls	r1, r2, #5
 800557a:	69fa      	ldr	r2, [r7, #28]
 800557c:	440a      	add	r2, r1
 800557e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005582:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005586:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005594:	691a      	ldr	r2, [r3, #16]
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	0159      	lsls	r1, r3, #5
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	440b      	add	r3, r1
 800559e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055a2:	4619      	mov	r1, r3
 80055a4:	4b95      	ldr	r3, [pc, #596]	@ (80057fc <USB_EPStartXfer+0x2e0>)
 80055a6:	4013      	ands	r3, r2
 80055a8:	610b      	str	r3, [r1, #16]
 80055aa:	e092      	b.n	80056d2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055b8:	691a      	ldr	r2, [r3, #16]
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	0159      	lsls	r1, r3, #5
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	440b      	add	r3, r1
 80055c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055c6:	4619      	mov	r1, r3
 80055c8:	4b8c      	ldr	r3, [pc, #560]	@ (80057fc <USB_EPStartXfer+0x2e0>)
 80055ca:	4013      	ands	r3, r2
 80055cc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	0159      	lsls	r1, r3, #5
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	440b      	add	r3, r1
 80055e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055e8:	4619      	mov	r1, r3
 80055ea:	4b83      	ldr	r3, [pc, #524]	@ (80057f8 <USB_EPStartXfer+0x2dc>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d11a      	bne.n	800562c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	691a      	ldr	r2, [r3, #16]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d903      	bls.n	800560a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	4413      	add	r3, r2
 8005612:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	0151      	lsls	r1, r2, #5
 800561c:	69fa      	ldr	r2, [r7, #28]
 800561e:	440a      	add	r2, r1
 8005620:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005624:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005628:	6113      	str	r3, [r2, #16]
 800562a:	e01b      	b.n	8005664 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005638:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	6919      	ldr	r1, [r3, #16]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	440b      	add	r3, r1
 8005644:	1e59      	subs	r1, r3, #1
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	fbb1 f3f3 	udiv	r3, r1, r3
 800564e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005650:	4b6b      	ldr	r3, [pc, #428]	@ (8005800 <USB_EPStartXfer+0x2e4>)
 8005652:	400b      	ands	r3, r1
 8005654:	69b9      	ldr	r1, [r7, #24]
 8005656:	0148      	lsls	r0, r1, #5
 8005658:	69f9      	ldr	r1, [r7, #28]
 800565a:	4401      	add	r1, r0
 800565c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005660:	4313      	orrs	r3, r2
 8005662:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005670:	691a      	ldr	r2, [r3, #16]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800567a:	69b9      	ldr	r1, [r7, #24]
 800567c:	0148      	lsls	r0, r1, #5
 800567e:	69f9      	ldr	r1, [r7, #28]
 8005680:	4401      	add	r1, r0
 8005682:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005686:	4313      	orrs	r3, r2
 8005688:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	791b      	ldrb	r3, [r3, #4]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d11f      	bne.n	80056d2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	0151      	lsls	r1, r2, #5
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	440a      	add	r2, r1
 80056a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056ac:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80056b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	0151      	lsls	r1, r2, #5
 80056c4:	69fa      	ldr	r2, [r7, #28]
 80056c6:	440a      	add	r2, r1
 80056c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80056d0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d14b      	bne.n	8005770 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d009      	beq.n	80056f4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ec:	461a      	mov	r2, r3
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	791b      	ldrb	r3, [r3, #4]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d128      	bne.n	800574e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005708:	2b00      	cmp	r3, #0
 800570a:	d110      	bne.n	800572e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	0151      	lsls	r1, r2, #5
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	440a      	add	r2, r1
 8005722:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005726:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	e00f      	b.n	800574e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	4413      	add	r3, r2
 8005736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	0151      	lsls	r1, r2, #5
 8005740:	69fa      	ldr	r2, [r7, #28]
 8005742:	440a      	add	r2, r1
 8005744:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800574c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	0151      	lsls	r1, r2, #5
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	440a      	add	r2, r1
 8005764:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005768:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	e16a      	b.n	8005a46 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	0151      	lsls	r1, r2, #5
 8005782:	69fa      	ldr	r2, [r7, #28]
 8005784:	440a      	add	r2, r1
 8005786:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800578a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800578e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	791b      	ldrb	r3, [r3, #4]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d015      	beq.n	80057c4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 8152 	beq.w	8005a46 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	2101      	movs	r1, #1
 80057b4:	fa01 f303 	lsl.w	r3, r1, r3
 80057b8:	69f9      	ldr	r1, [r7, #28]
 80057ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057be:	4313      	orrs	r3, r2
 80057c0:	634b      	str	r3, [r1, #52]	@ 0x34
 80057c2:	e140      	b.n	8005a46 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d117      	bne.n	8005804 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	0151      	lsls	r1, r2, #5
 80057e6:	69fa      	ldr	r2, [r7, #28]
 80057e8:	440a      	add	r2, r1
 80057ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	e016      	b.n	8005824 <USB_EPStartXfer+0x308>
 80057f6:	bf00      	nop
 80057f8:	e007ffff 	.word	0xe007ffff
 80057fc:	fff80000 	.word	0xfff80000
 8005800:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	0151      	lsls	r1, r2, #5
 8005816:	69fa      	ldr	r2, [r7, #28]
 8005818:	440a      	add	r2, r1
 800581a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800581e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005822:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	68d9      	ldr	r1, [r3, #12]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	781a      	ldrb	r2, [r3, #0]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	b298      	uxth	r0, r3
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	4603      	mov	r3, r0
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 f9b9 	bl	8005bb0 <USB_WritePacket>
 800583e:	e102      	b.n	8005a46 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800584c:	691a      	ldr	r2, [r3, #16]
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	0159      	lsls	r1, r3, #5
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	440b      	add	r3, r1
 8005856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800585a:	4619      	mov	r1, r3
 800585c:	4b7c      	ldr	r3, [pc, #496]	@ (8005a50 <USB_EPStartXfer+0x534>)
 800585e:	4013      	ands	r3, r2
 8005860:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	0159      	lsls	r1, r3, #5
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	440b      	add	r3, r1
 8005878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800587c:	4619      	mov	r1, r3
 800587e:	4b75      	ldr	r3, [pc, #468]	@ (8005a54 <USB_EPStartXfer+0x538>)
 8005880:	4013      	ands	r3, r2
 8005882:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d12f      	bne.n	80058ea <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	689a      	ldr	r2, [r3, #8]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	689a      	ldr	r2, [r3, #8]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ae:	691a      	ldr	r2, [r3, #16]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058b8:	69b9      	ldr	r1, [r7, #24]
 80058ba:	0148      	lsls	r0, r1, #5
 80058bc:	69f9      	ldr	r1, [r7, #28]
 80058be:	4401      	add	r1, r0
 80058c0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80058c4:	4313      	orrs	r3, r2
 80058c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	0151      	lsls	r1, r2, #5
 80058da:	69fa      	ldr	r2, [r7, #28]
 80058dc:	440a      	add	r2, r1
 80058de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80058e6:	6113      	str	r3, [r2, #16]
 80058e8:	e05f      	b.n	80059aa <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d123      	bne.n	800593a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058fe:	691a      	ldr	r2, [r3, #16]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005908:	69b9      	ldr	r1, [r7, #24]
 800590a:	0148      	lsls	r0, r1, #5
 800590c:	69f9      	ldr	r1, [r7, #28]
 800590e:	4401      	add	r1, r0
 8005910:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005914:	4313      	orrs	r3, r2
 8005916:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	0151      	lsls	r1, r2, #5
 800592a:	69fa      	ldr	r2, [r7, #28]
 800592c:	440a      	add	r2, r1
 800592e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005932:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005936:	6113      	str	r3, [r2, #16]
 8005938:	e037      	b.n	80059aa <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	691a      	ldr	r2, [r3, #16]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	4413      	add	r3, r2
 8005944:	1e5a      	subs	r2, r3, #1
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	fbb2 f3f3 	udiv	r3, r2, r3
 800594e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	8afa      	ldrh	r2, [r7, #22]
 8005956:	fb03 f202 	mul.w	r2, r3, r2
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	4413      	add	r3, r2
 8005966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	8afb      	ldrh	r3, [r7, #22]
 800596e:	04d9      	lsls	r1, r3, #19
 8005970:	4b39      	ldr	r3, [pc, #228]	@ (8005a58 <USB_EPStartXfer+0x53c>)
 8005972:	400b      	ands	r3, r1
 8005974:	69b9      	ldr	r1, [r7, #24]
 8005976:	0148      	lsls	r0, r1, #5
 8005978:	69f9      	ldr	r1, [r7, #28]
 800597a:	4401      	add	r1, r0
 800597c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005980:	4313      	orrs	r3, r2
 8005982:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005990:	691a      	ldr	r2, [r3, #16]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800599a:	69b9      	ldr	r1, [r7, #24]
 800599c:	0148      	lsls	r0, r1, #5
 800599e:	69f9      	ldr	r1, [r7, #28]
 80059a0:	4401      	add	r1, r0
 80059a2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80059a6:	4313      	orrs	r3, r2
 80059a8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d10d      	bne.n	80059cc <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d009      	beq.n	80059cc <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	68d9      	ldr	r1, [r3, #12]
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059c8:	460a      	mov	r2, r1
 80059ca:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	791b      	ldrb	r3, [r3, #4]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d128      	bne.n	8005a26 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d110      	bne.n	8005a06 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	0151      	lsls	r1, r2, #5
 80059f6:	69fa      	ldr	r2, [r7, #28]
 80059f8:	440a      	add	r2, r1
 80059fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059fe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005a02:	6013      	str	r3, [r2, #0]
 8005a04:	e00f      	b.n	8005a26 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	0151      	lsls	r1, r2, #5
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	440a      	add	r2, r1
 8005a1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a24:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	0151      	lsls	r1, r2, #5
 8005a38:	69fa      	ldr	r2, [r7, #28]
 8005a3a:	440a      	add	r2, r1
 8005a3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a40:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005a44:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3720      	adds	r7, #32
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	fff80000 	.word	0xfff80000
 8005a54:	e007ffff 	.word	0xe007ffff
 8005a58:	1ff80000 	.word	0x1ff80000

08005a5c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b087      	sub	sp, #28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	785b      	ldrb	r3, [r3, #1]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d14a      	bne.n	8005b10 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a92:	f040 8086 	bne.w	8005ba2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	7812      	ldrb	r2, [r2, #0]
 8005aaa:	0151      	lsls	r1, r2, #5
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	440a      	add	r2, r1
 8005ab0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ab4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ab8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	7812      	ldrb	r2, [r2, #0]
 8005ace:	0151      	lsls	r1, r2, #5
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	440a      	add	r2, r1
 8005ad4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ad8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005adc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d902      	bls.n	8005af4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	75fb      	strb	r3, [r7, #23]
          break;
 8005af2:	e056      	b.n	8005ba2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b0c:	d0e7      	beq.n	8005ade <USB_EPStopXfer+0x82>
 8005b0e:	e048      	b.n	8005ba2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b28:	d13b      	bne.n	8005ba2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	7812      	ldrb	r2, [r2, #0]
 8005b3e:	0151      	lsls	r1, r2, #5
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	440a      	add	r2, r1
 8005b44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b48:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b4c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	7812      	ldrb	r2, [r2, #0]
 8005b62:	0151      	lsls	r1, r2, #5
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	440a      	add	r2, r1
 8005b68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3301      	adds	r3, #1
 8005b76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d902      	bls.n	8005b88 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	75fb      	strb	r3, [r7, #23]
          break;
 8005b86:	e00c      	b.n	8005ba2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ba0:	d0e7      	beq.n	8005b72 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	371c      	adds	r7, #28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b089      	sub	sp, #36	@ 0x24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	4611      	mov	r1, r2
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	71fb      	strb	r3, [r7, #7]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005bce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d123      	bne.n	8005c1e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005bd6:	88bb      	ldrh	r3, [r7, #4]
 8005bd8:	3303      	adds	r3, #3
 8005bda:	089b      	lsrs	r3, r3, #2
 8005bdc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005bde:	2300      	movs	r3, #0
 8005be0:	61bb      	str	r3, [r7, #24]
 8005be2:	e018      	b.n	8005c16 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005be4:	79fb      	ldrb	r3, [r7, #7]
 8005be6:	031a      	lsls	r2, r3, #12
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	3301      	adds	r3, #1
 8005c02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	3301      	adds	r3, #1
 8005c08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	3301      	adds	r3, #1
 8005c14:	61bb      	str	r3, [r7, #24]
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d3e2      	bcc.n	8005be4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3724      	adds	r7, #36	@ 0x24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b08b      	sub	sp, #44	@ 0x2c
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	4613      	mov	r3, r2
 8005c38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c42:	88fb      	ldrh	r3, [r7, #6]
 8005c44:	089b      	lsrs	r3, r3, #2
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c4a:	88fb      	ldrh	r3, [r7, #6]
 8005c4c:	f003 0303 	and.w	r3, r3, #3
 8005c50:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c52:	2300      	movs	r3, #0
 8005c54:	623b      	str	r3, [r7, #32]
 8005c56:	e014      	b.n	8005c82 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c62:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c66:	3301      	adds	r3, #1
 8005c68:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c72:	3301      	adds	r3, #1
 8005c74:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c78:	3301      	adds	r3, #1
 8005c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	623b      	str	r3, [r7, #32]
 8005c82:	6a3a      	ldr	r2, [r7, #32]
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d3e6      	bcc.n	8005c58 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c8a:	8bfb      	ldrh	r3, [r7, #30]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d01e      	beq.n	8005cce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c90:	2300      	movs	r3, #0
 8005c92:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f107 0310 	add.w	r3, r7, #16
 8005ca0:	6812      	ldr	r2, [r2, #0]
 8005ca2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb4:	701a      	strb	r2, [r3, #0]
      i++;
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	623b      	str	r3, [r7, #32]
      pDest++;
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005cc2:	8bfb      	ldrh	r3, [r7, #30]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005cc8:	8bfb      	ldrh	r3, [r7, #30]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1ea      	bne.n	8005ca4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	372c      	adds	r7, #44	@ 0x2c
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	785b      	ldrb	r3, [r3, #1]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d12c      	bne.n	8005d52 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	db12      	blt.n	8005d30 <USB_EPSetStall+0x54>
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00f      	beq.n	8005d30 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	0151      	lsls	r1, r2, #5
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	440a      	add	r2, r1
 8005d26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d2a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d2e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	0151      	lsls	r1, r2, #5
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	440a      	add	r2, r1
 8005d46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d4a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	e02b      	b.n	8005daa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	db12      	blt.n	8005d8a <USB_EPSetStall+0xae>
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00f      	beq.n	8005d8a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	0151      	lsls	r1, r2, #5
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	440a      	add	r2, r1
 8005d80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d84:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d88:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	0151      	lsls	r1, r2, #5
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	440a      	add	r2, r1
 8005da0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005da4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005da8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	785b      	ldrb	r3, [r3, #1]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d128      	bne.n	8005e26 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	0151      	lsls	r1, r2, #5
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	440a      	add	r2, r1
 8005dea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005df2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	791b      	ldrb	r3, [r3, #4]
 8005df8:	2b03      	cmp	r3, #3
 8005dfa:	d003      	beq.n	8005e04 <USB_EPClearStall+0x4c>
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	791b      	ldrb	r3, [r3, #4]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d138      	bne.n	8005e76 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	0151      	lsls	r1, r2, #5
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	440a      	add	r2, r1
 8005e1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	e027      	b.n	8005e76 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	0151      	lsls	r1, r2, #5
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	440a      	add	r2, r1
 8005e3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e40:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e44:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	791b      	ldrb	r3, [r3, #4]
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	d003      	beq.n	8005e56 <USB_EPClearStall+0x9e>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	791b      	ldrb	r3, [r3, #4]
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d10f      	bne.n	8005e76 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	0151      	lsls	r1, r2, #5
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e74:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ea2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005ea6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	011b      	lsls	r3, r3, #4
 8005eb4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005eb8:	68f9      	ldr	r1, [r7, #12]
 8005eba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005eea:	f023 0303 	bic.w	r3, r3, #3
 8005eee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005efe:	f023 0302 	bic.w	r3, r3, #2
 8005f02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b085      	sub	sp, #20
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005f2c:	f023 0303 	bic.w	r3, r3, #3
 8005f30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f40:	f043 0302 	orr.w	r3, r3, #2
 8005f44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	4013      	ands	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b085      	sub	sp, #20
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	0c1b      	lsrs	r3, r3, #16
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b085      	sub	sp, #20
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	b29b      	uxth	r3, r3
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b085      	sub	sp, #20
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	460b      	mov	r3, r1
 8005fec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005ff2:	78fb      	ldrb	r3, [r7, #3]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	4013      	ands	r3, r2
 800600e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006010:	68bb      	ldr	r3, [r7, #8]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800601e:	b480      	push	{r7}
 8006020:	b087      	sub	sp, #28
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	460b      	mov	r3, r1
 8006028:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800603e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006040:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006042:	78fb      	ldrb	r3, [r7, #3]
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	fa22 f303 	lsr.w	r3, r2, r3
 800604e:	01db      	lsls	r3, r3, #7
 8006050:	b2db      	uxtb	r3, r3
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	4313      	orrs	r3, r2
 8006056:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006058:	78fb      	ldrb	r3, [r7, #3]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	4013      	ands	r3, r2
 800606a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800606c:	68bb      	ldr	r3, [r7, #8]
}
 800606e:	4618      	mov	r0, r3
 8006070:	371c      	adds	r7, #28
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	f003 0301 	and.w	r3, r3, #1
}
 800608a:	4618      	mov	r0, r3
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
	...

08006098 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060b2:	4619      	mov	r1, r3
 80060b4:	4b09      	ldr	r3, [pc, #36]	@ (80060dc <USB_ActivateSetup+0x44>)
 80060b6:	4013      	ands	r3, r2
 80060b8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	fffff800 	.word	0xfffff800

080060e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	460b      	mov	r3, r1
 80060ea:	607a      	str	r2, [r7, #4]
 80060ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	333c      	adds	r3, #60	@ 0x3c
 80060f6:	3304      	adds	r3, #4
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	4a26      	ldr	r2, [pc, #152]	@ (8006198 <USB_EP0_OutStart+0xb8>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d90a      	bls.n	800611a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006110:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006114:	d101      	bne.n	800611a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006116:	2300      	movs	r3, #0
 8006118:	e037      	b.n	800618a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006120:	461a      	mov	r2, r3
 8006122:	2300      	movs	r3, #0
 8006124:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006134:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006138:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006148:	f043 0318 	orr.w	r3, r3, #24
 800614c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800615c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006160:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006162:	7afb      	ldrb	r3, [r7, #11]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d10f      	bne.n	8006188 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800616e:	461a      	mov	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006182:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006186:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	371c      	adds	r7, #28
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	4f54300a 	.word	0x4f54300a

0800619c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3301      	adds	r3, #1
 80061ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061b4:	d901      	bls.n	80061ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e01b      	b.n	80061f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	daf2      	bge.n	80061a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	f043 0201 	orr.w	r2, r3, #1
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	3301      	adds	r3, #1
 80061d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061de:	d901      	bls.n	80061e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e006      	b.n	80061f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d0f0      	beq.n	80061d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
	...

08006200 <__NVIC_SystemReset>:
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006204:	f3bf 8f4f 	dsb	sy
}
 8006208:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800620a:	4b06      	ldr	r3, [pc, #24]	@ (8006224 <__NVIC_SystemReset+0x24>)
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006212:	4904      	ldr	r1, [pc, #16]	@ (8006224 <__NVIC_SystemReset+0x24>)
 8006214:	4b04      	ldr	r3, [pc, #16]	@ (8006228 <__NVIC_SystemReset+0x28>)
 8006216:	4313      	orrs	r3, r2
 8006218:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800621a:	f3bf 8f4f 	dsb	sy
}
 800621e:	bf00      	nop
    __NOP();
 8006220:	bf00      	nop
 8006222:	e7fd      	b.n	8006220 <__NVIC_SystemReset+0x20>
 8006224:	e000ed00 	.word	0xe000ed00
 8006228:	05fa0004 	.word	0x05fa0004

0800622c <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	460b      	mov	r3, r1
 8006236:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = (USBD_DFU_HandleTypeDef *)USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8006238:	f44f 5081 	mov.w	r0, #4128	@ 0x1020
 800623c:	f003 f920 	bl	8009480 <USBD_static_malloc>
 8006240:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d109      	bne.n	800625c <USBD_DFU_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	32b0      	adds	r2, #176	@ 0xb0
 8006252:	2100      	movs	r1, #0
 8006254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006258:	2302      	movs	r3, #2
 800625a:	e061      	b.n	8006320 <USBD_DFU_Init+0xf4>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	32b0      	adds	r2, #176	@ 0xb0
 8006266:	68f9      	ldr	r1, [r7, #12]
 8006268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	32b0      	adds	r2, #176	@ 0xb0
 8006276:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006286:	461a      	mov	r2, r3
 8006288:	2300      	movs	r3, #0
 800628a:	6113      	str	r3, [r2, #16]
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006292:	461a      	mov	r2, r3
 8006294:	4b24      	ldr	r3, [pc, #144]	@ (8006328 <USBD_DFU_Init+0xfc>)
 8006296:	6093      	str	r3, [r2, #8]
  hdfu->wblock_num = 0U;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800629e:	461a      	mov	r2, r3
 80062a0:	2300      	movs	r3, #0
 80062a2:	6013      	str	r3, [r2, #0]
  hdfu->wlength = 0U;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062aa:	461a      	mov	r2, r3
 80062ac:	2300      	movs	r3, #0
 80062ae:	6053      	str	r3, [r2, #4]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062b6:	2200      	movs	r2, #0
 80062b8:	775a      	strb	r2, [r3, #29]
  hdfu->dev_state = DFU_STATE_IDLE;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062c0:	2202      	movs	r2, #2
 80062c2:	771a      	strb	r2, [r3, #28]

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062ca:	2200      	movs	r2, #0
 80062cc:	751a      	strb	r2, [r3, #20]
  hdfu->dev_status[1] = 0U;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062d4:	2200      	movs	r2, #0
 80062d6:	755a      	strb	r2, [r3, #21]
  hdfu->dev_status[2] = 0U;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062de:	2200      	movs	r2, #0
 80062e0:	759a      	strb	r2, [r3, #22]
  hdfu->dev_status[3] = 0U;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062e8:	2200      	movs	r2, #0
 80062ea:	75da      	strb	r2, [r3, #23]
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062f2:	2202      	movs	r2, #2
 80062f4:	761a      	strb	r2, [r3, #24]
  hdfu->dev_status[5] = 0U;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062fc:	2200      	movs	r2, #0
 80062fe:	765a      	strb	r2, [r3, #25]

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	33b0      	adds	r3, #176	@ 0xb0
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	4798      	blx	r3
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <USBD_DFU_Init+0xf2>
  {
    return (uint8_t)USBD_FAIL;
 800631a:	2303      	movs	r3, #3
 800631c:	e000      	b.n	8006320 <USBD_DFU_Init+0xf4>
  }

  return (uint8_t)USBD_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	08020000 	.word	0x08020000

0800632c <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	460b      	mov	r3, r1
 8006336:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	32b0      	adds	r2, #176	@ 0xb0
 8006342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <USBD_DFU_DeInit+0x22>
  {
    return (uint8_t)USBD_EMEM;
 800634a:	2302      	movs	r3, #2
 800634c:	e043      	b.n	80063d6 <USBD_DFU_DeInit+0xaa>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	32b0      	adds	r2, #176	@ 0xb0
 8006358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800635c:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006364:	461a      	mov	r2, r3
 8006366:	2300      	movs	r3, #0
 8006368:	6013      	str	r3, [r2, #0]
  hdfu->wlength = 0U;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006370:	461a      	mov	r2, r3
 8006372:	2300      	movs	r3, #0
 8006374:	6053      	str	r3, [r2, #4]

  hdfu->dev_state = DFU_STATE_IDLE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800637c:	2202      	movs	r2, #2
 800637e:	771a      	strb	r2, [r3, #28]
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006386:	2200      	movs	r2, #0
 8006388:	751a      	strb	r2, [r3, #20]
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006390:	2202      	movs	r2, #2
 8006392:	761a      	strb	r2, [r3, #24]

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	33b0      	adds	r3, #176	@ 0xb0
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	4798      	blx	r3
  USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	32b0      	adds	r2, #176	@ 0xb0
 80063b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f003 f870 	bl	800949c <USBD_static_free>
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	32b0      	adds	r2, #176	@ 0xb0
 80063c6:	2100      	movs	r1, #0
 80063c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = NULL;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
	...

080063e0 <USBD_GetMSDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetMSDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	82fb      	strh	r3, [r7, #22]
  uint8_t *pbuf = NULL;
 80063ee:	2300      	movs	r3, #0
 80063f0:	613b      	str	r3, [r7, #16]
  uint8_t err = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	73fb      	strb	r3, [r7, #15]


  switch (req->wValue >> 8)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	885b      	ldrh	r3, [r3, #2]
 80063fa:	0a1b      	lsrs	r3, r3, #8
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d12a      	bne.n	8006458 <USBD_GetMSDescriptor+0x78>
  {
    case 0x00:
        if(0x00 == (uint8_t)(req->wValue) || 0x01 == (uint8_t)(req->wValue) ){//device or interface
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	885b      	ldrh	r3, [r3, #2]
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b00      	cmp	r3, #0
 800640a:	d004      	beq.n	8006416 <USBD_GetMSDescriptor+0x36>
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	885b      	ldrh	r3, [r3, #2]
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b01      	cmp	r3, #1
 8006414:	d118      	bne.n	8006448 <USBD_GetMSDescriptor+0x68>
            switch(req->wIndex){
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	889b      	ldrh	r3, [r3, #4]
 800641a:	2b05      	cmp	r3, #5
 800641c:	d00a      	beq.n	8006434 <USBD_GetMSDescriptor+0x54>
 800641e:	2b05      	cmp	r3, #5
 8006420:	dc0d      	bgt.n	800643e <USBD_GetMSDescriptor+0x5e>
 8006422:	2b01      	cmp	r3, #1
 8006424:	d00d      	beq.n	8006442 <USBD_GetMSDescriptor+0x62>
 8006426:	2b04      	cmp	r3, #4
 8006428:	d109      	bne.n	800643e <USBD_GetMSDescriptor+0x5e>
            case 0x0001://genre
                break;

            case 0x0004://Extended Compact ID
				pbuf = EXTEND_COMPACT_ID_OS_FEAT_DESC;
 800642a:	4b22      	ldr	r3, [pc, #136]	@ (80064b4 <USBD_GetMSDescriptor+0xd4>)
 800642c:	613b      	str	r3, [r7, #16]
				len = LEN_EXTEND_COMPACT_ID;
 800642e:	2328      	movs	r3, #40	@ 0x28
 8006430:	82fb      	strh	r3, [r7, #22]
                break;
 8006432:	e007      	b.n	8006444 <USBD_GetMSDescriptor+0x64>

            case 0x0005://Extended Properties
                pbuf = EXTEND_PROPERTIES_OS_FEAT_DESC;
 8006434:	4b20      	ldr	r3, [pc, #128]	@ (80064b8 <USBD_GetMSDescriptor+0xd8>)
 8006436:	613b      	str	r3, [r7, #16]
                len = LEN_EXTEND_PROPERTIES;
 8006438:	238e      	movs	r3, #142	@ 0x8e
 800643a:	82fb      	strh	r3, [r7, #22]
                break;
 800643c:	e002      	b.n	8006444 <USBD_GetMSDescriptor+0x64>

            default:
                break;
 800643e:	bf00      	nop
 8006440:	e000      	b.n	8006444 <USBD_GetMSDescriptor+0x64>
                break;
 8006442:	bf00      	nop
            switch(req->wIndex){
 8006444:	bf00      	nop
            }
        }else{
            USBD_CtlError(pdev, req);
            err++;
        }
        break;
 8006446:	e00f      	b.n	8006468 <USBD_GetMSDescriptor+0x88>
            USBD_CtlError(pdev, req);
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f002 f9fd 	bl	800884a <USBD_CtlError>
            err++;
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	3301      	adds	r3, #1
 8006454:	73fb      	strb	r3, [r7, #15]
        break;
 8006456:	e007      	b.n	8006468 <USBD_GetMSDescriptor+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f002 f9f5 	bl	800884a <USBD_CtlError>
      err++;
 8006460:	7bfb      	ldrb	r3, [r7, #15]
 8006462:	3301      	adds	r3, #1
 8006464:	73fb      	strb	r3, [r7, #15]
      break;
 8006466:	bf00      	nop
  }

  if (err != 0U)
 8006468:	7bfb      	ldrb	r3, [r7, #15]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d11d      	bne.n	80064aa <USBD_GetMSDescriptor+0xca>
  {
    return;
  }

  if (req->wLength != 0U)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	88db      	ldrh	r3, [r3, #6]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d015      	beq.n	80064a2 <USBD_GetMSDescriptor+0xc2>
  {
    if (len != 0U)
 8006476:	8afb      	ldrh	r3, [r7, #22]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00d      	beq.n	8006498 <USBD_GetMSDescriptor+0xb8>
    {
      len = MIN(len, req->wLength);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	88db      	ldrh	r3, [r3, #6]
 8006480:	8afa      	ldrh	r2, [r7, #22]
 8006482:	4293      	cmp	r3, r2
 8006484:	bf28      	it	cs
 8006486:	4613      	movcs	r3, r2
 8006488:	82fb      	strh	r3, [r7, #22]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800648a:	8afb      	ldrh	r3, [r7, #22]
 800648c:	461a      	mov	r2, r3
 800648e:	6939      	ldr	r1, [r7, #16]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f002 fa57 	bl	8008944 <USBD_CtlSendData>
 8006496:	e009      	b.n	80064ac <USBD_GetMSDescriptor+0xcc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f002 f9d5 	bl	800884a <USBD_CtlError>
 80064a0:	e004      	b.n	80064ac <USBD_GetMSDescriptor+0xcc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f002 faa8 	bl	80089f8 <USBD_CtlSendStatus>
 80064a8:	e000      	b.n	80064ac <USBD_GetMSDescriptor+0xcc>
    return;
 80064aa:	bf00      	nop
  }
}
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	24000074 	.word	0x24000074
 80064b8:	2400009c 	.word	0x2400009c

080064bc <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	32b0      	adds	r2, #176	@ 0xb0
 80064d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pbuf;
  uint16_t len;
  uint16_t status_info = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	813b      	strh	r3, [r7, #8]

  //MS OS String Descriptor
  if(0xC0 == req->bmRequest || 0xC1 == req->bmRequest){
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80064e4:	d003      	beq.n	80064ee <USBD_DFU_Setup+0x32>
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	2bc1      	cmp	r3, #193	@ 0xc1
 80064ec:	d10b      	bne.n	8006506 <USBD_DFU_Setup+0x4a>
	  if(MS_VENDER_CODE == req->bRequest){
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	785b      	ldrb	r3, [r3, #1]
 80064f2:	2bbe      	cmp	r3, #190	@ 0xbe
 80064f4:	d105      	bne.n	8006502 <USBD_DFU_Setup+0x46>
		  USBD_GetMSDescriptor(pdev, req);
 80064f6:	6839      	ldr	r1, [r7, #0]
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7ff ff71 	bl	80063e0 <USBD_GetMSDescriptor>
		  return ret;
 80064fe:	7dfb      	ldrb	r3, [r7, #23]
 8006500:	e0f1      	b.n	80066e6 <USBD_DFU_Setup+0x22a>
	  }
	  return (uint8_t)USBD_FAIL;
 8006502:	2303      	movs	r3, #3
 8006504:	e0ef      	b.n	80066e6 <USBD_DFU_Setup+0x22a>
  }

  if (hdfu == NULL)
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <USBD_DFU_Setup+0x54>
  {
    return (uint8_t)USBD_FAIL;
 800650c:	2303      	movs	r3, #3
 800650e:	e0ea      	b.n	80066e6 <USBD_DFU_Setup+0x22a>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006518:	2b00      	cmp	r3, #0
 800651a:	d03e      	beq.n	800659a <USBD_DFU_Setup+0xde>
 800651c:	2b20      	cmp	r3, #32
 800651e:	f040 80da 	bne.w	80066d6 <USBD_DFU_Setup+0x21a>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	785b      	ldrb	r3, [r3, #1]
 8006526:	2b06      	cmp	r3, #6
 8006528:	d82f      	bhi.n	800658a <USBD_DFU_Setup+0xce>
 800652a:	a201      	add	r2, pc, #4	@ (adr r2, 8006530 <USBD_DFU_Setup+0x74>)
 800652c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006530:	08006581 	.word	0x08006581
 8006534:	0800654d 	.word	0x0800654d
 8006538:	08006557 	.word	0x08006557
 800653c:	08006561 	.word	0x08006561
 8006540:	08006569 	.word	0x08006569
 8006544:	08006571 	.word	0x08006571
 8006548:	08006579 	.word	0x08006579
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fb0b 	bl	8006b6a <DFU_Download>
          break;
 8006554:	e020      	b.n	8006598 <USBD_DFU_Setup+0xdc>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fb8d 	bl	8006c78 <DFU_Upload>
          break;
 800655e:	e01b      	b.n	8006598 <USBD_DFU_Setup+0xdc>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fcbe 	bl	8006ee2 <DFU_GetStatus>
          break;
 8006566:	e017      	b.n	8006598 <USBD_DFU_Setup+0xdc>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fdaa 	bl	80070c2 <DFU_ClearStatus>
          break;
 800656e:	e013      	b.n	8006598 <USBD_DFU_Setup+0xdc>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fe0f 	bl	8007194 <DFU_GetState>
          break;
 8006576:	e00f      	b.n	8006598 <USBD_DFU_Setup+0xdc>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fe28 	bl	80071ce <DFU_Abort>
          break;
 800657e:	e00b      	b.n	8006598 <USBD_DFU_Setup+0xdc>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fa70 	bl	8006a68 <DFU_Detach>
          break;
 8006588:	e006      	b.n	8006598 <USBD_DFU_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f002 f95c 	bl	800884a <USBD_CtlError>
          ret = USBD_FAIL;
 8006592:	2303      	movs	r3, #3
 8006594:	75fb      	strb	r3, [r7, #23]
          break;
 8006596:	bf00      	nop
      }
      break;
 8006598:	e0a4      	b.n	80066e4 <USBD_DFU_Setup+0x228>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	785b      	ldrb	r3, [r3, #1]
 800659e:	2b0b      	cmp	r3, #11
 80065a0:	f200 808e 	bhi.w	80066c0 <USBD_DFU_Setup+0x204>
 80065a4:	a201      	add	r2, pc, #4	@ (adr r2, 80065ac <USBD_DFU_Setup+0xf0>)
 80065a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065aa:	bf00      	nop
 80065ac:	080065dd 	.word	0x080065dd
 80065b0:	080066cf 	.word	0x080066cf
 80065b4:	080066c1 	.word	0x080066c1
 80065b8:	080066c1 	.word	0x080066c1
 80065bc:	080066c1 	.word	0x080066c1
 80065c0:	080066c1 	.word	0x080066c1
 80065c4:	08006607 	.word	0x08006607
 80065c8:	080066c1 	.word	0x080066c1
 80065cc:	080066c1 	.word	0x080066c1
 80065d0:	080066c1 	.word	0x080066c1
 80065d4:	0800664f 	.word	0x0800664f
 80065d8:	0800667d 	.word	0x0800667d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d107      	bne.n	80065f8 <USBD_DFU_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80065e8:	f107 0308 	add.w	r3, r7, #8
 80065ec:	2202      	movs	r2, #2
 80065ee:	4619      	mov	r1, r3
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f002 f9a7 	bl	8008944 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065f6:	e06d      	b.n	80066d4 <USBD_DFU_Setup+0x218>
            USBD_CtlError(pdev, req);
 80065f8:	6839      	ldr	r1, [r7, #0]
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f002 f925 	bl	800884a <USBD_CtlError>
            ret = USBD_FAIL;
 8006600:	2303      	movs	r3, #3
 8006602:	75fb      	strb	r3, [r7, #23]
          break;
 8006604:	e066      	b.n	80066d4 <USBD_DFU_Setup+0x218>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	885b      	ldrh	r3, [r3, #2]
 800660a:	0a1b      	lsrs	r3, r3, #8
 800660c:	b29b      	uxth	r3, r3
 800660e:	2b21      	cmp	r3, #33	@ 0x21
 8006610:	d15f      	bne.n	80066d2 <USBD_DFU_Setup+0x216>
          {
            pbuf = (uint8_t *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8006618:	4618      	mov	r0, r3
 800661a:	f000 feb0 	bl	800737e <USBD_DFU_GetDfuFuncDesc>
 800661e:	60f8      	str	r0, [r7, #12]

            if (pbuf != NULL)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00c      	beq.n	8006640 <USBD_DFU_Setup+0x184>
            {
              len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	88db      	ldrh	r3, [r3, #6]
 800662a:	2b09      	cmp	r3, #9
 800662c:	bf28      	it	cs
 800662e:	2309      	movcs	r3, #9
 8006630:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8006632:	897b      	ldrh	r3, [r7, #10]
 8006634:	461a      	mov	r2, r3
 8006636:	68f9      	ldr	r1, [r7, #12]
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f002 f983 	bl	8008944 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 800663e:	e048      	b.n	80066d2 <USBD_DFU_Setup+0x216>
              USBD_CtlError(pdev, req);
 8006640:	6839      	ldr	r1, [r7, #0]
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f002 f901 	bl	800884a <USBD_CtlError>
              ret = USBD_FAIL;
 8006648:	2303      	movs	r3, #3
 800664a:	75fb      	strb	r3, [r7, #23]
          break;
 800664c:	e041      	b.n	80066d2 <USBD_DFU_Setup+0x216>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b03      	cmp	r3, #3
 8006658:	d109      	bne.n	800666e <USBD_DFU_Setup+0x1b2>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	f241 0310 	movw	r3, #4112	@ 0x1010
 8006660:	4413      	add	r3, r2
 8006662:	2201      	movs	r2, #1
 8006664:	4619      	mov	r1, r3
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f002 f96c 	bl	8008944 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800666c:	e032      	b.n	80066d4 <USBD_DFU_Setup+0x218>
            USBD_CtlError(pdev, req);
 800666e:	6839      	ldr	r1, [r7, #0]
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f002 f8ea 	bl	800884a <USBD_CtlError>
            ret = USBD_FAIL;
 8006676:	2303      	movs	r3, #3
 8006678:	75fb      	strb	r3, [r7, #23]
          break;
 800667a:	e02b      	b.n	80066d4 <USBD_DFU_Setup+0x218>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	885b      	ldrh	r3, [r3, #2]
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d115      	bne.n	80066b2 <USBD_DFU_Setup+0x1f6>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b03      	cmp	r3, #3
 8006690:	d108      	bne.n	80066a4 <USBD_DFU_Setup+0x1e8>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	885b      	ldrh	r3, [r3, #2]
 8006696:	b2db      	uxtb	r3, r3
 8006698:	461a      	mov	r2, r3
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066a0:	611a      	str	r2, [r3, #16]
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066a2:	e017      	b.n	80066d4 <USBD_DFU_Setup+0x218>
              USBD_CtlError(pdev, req);
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f002 f8cf 	bl	800884a <USBD_CtlError>
              ret = USBD_FAIL;
 80066ac:	2303      	movs	r3, #3
 80066ae:	75fb      	strb	r3, [r7, #23]
          break;
 80066b0:	e010      	b.n	80066d4 <USBD_DFU_Setup+0x218>
            USBD_CtlError(pdev, req);
 80066b2:	6839      	ldr	r1, [r7, #0]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f002 f8c8 	bl	800884a <USBD_CtlError>
            ret = USBD_FAIL;
 80066ba:	2303      	movs	r3, #3
 80066bc:	75fb      	strb	r3, [r7, #23]
          break;
 80066be:	e009      	b.n	80066d4 <USBD_DFU_Setup+0x218>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f002 f8c1 	bl	800884a <USBD_CtlError>
          ret = USBD_FAIL;
 80066c8:	2303      	movs	r3, #3
 80066ca:	75fb      	strb	r3, [r7, #23]
          break;
 80066cc:	e002      	b.n	80066d4 <USBD_DFU_Setup+0x218>
          break;
 80066ce:	bf00      	nop
 80066d0:	e008      	b.n	80066e4 <USBD_DFU_Setup+0x228>
          break;
 80066d2:	bf00      	nop
      }
      break;
 80066d4:	e006      	b.n	80066e4 <USBD_DFU_Setup+0x228>

    default:
      USBD_CtlError(pdev, req);
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f002 f8b6 	bl	800884a <USBD_CtlError>
      ret = USBD_FAIL;
 80066de:	2303      	movs	r3, #3
 80066e0:	75fb      	strb	r3, [r7, #23]
      break;
 80066e2:	bf00      	nop
  }

  return (uint8_t)ret;
 80066e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop

080066f0 <USBD_DFU_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	221b      	movs	r2, #27
 80066fc:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 80066fe:	4b03      	ldr	r3, [pc, #12]	@ (800670c <USBD_DFU_GetCfgDesc+0x1c>)
}
 8006700:	4618      	mov	r0, r3
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	2400004c 	.word	0x2400004c

08006710 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b088      	sub	sp, #32
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t app_addr_ptr;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	32b0      	adds	r2, #176	@ 0xb0
 8006738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673c:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	33b0      	adds	r3, #176	@ 0xb0
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	61bb      	str	r3, [r7, #24]
#if (USBD_DFU_VENDOR_CMD_ENABLED == 1U) || (USBD_DFU_VENDOR_CHECK_ENABLED == 1U)
  uint32_t VendorStatus = 0U;
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

  if (hdfu == NULL)
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <USBD_DFU_EP0_TxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006756:	2303      	movs	r3, #3
 8006758:	e11d      	b.n	8006996 <USBD_DFU_EP0_TxReady+0x270>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006760:	7f1b      	ldrb	r3, [r3, #28]
 8006762:	2b04      	cmp	r3, #4
 8006764:	f040 810a 	bne.w	800697c <USBD_DFU_EP0_TxReady+0x256>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	f040 8099 	bne.w	80068a8 <USBD_DFU_EP0_TxReady+0x182>
    {
      if (hdfu->wlength == 1U)
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b01      	cmp	r3, #1
 8006780:	f000 80d3 	beq.w	800692a <USBD_DFU_EP0_TxReady+0x204>
            return (uint8_t)USBD_FAIL;
          }
        }
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */
      }
      else if (hdfu->wlength == 5U)
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	2b05      	cmp	r3, #5
 800678e:	d174      	bne.n	800687a <USBD_DFU_EP0_TxReady+0x154>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	2b21      	cmp	r3, #33	@ 0x21
 8006796:	d12b      	bne.n	80067f0 <USBD_DFU_EP0_TxReady+0xca>
            hdfu->dev_status[4] = hdfu->dev_state;
            return (uint8_t)USBD_FAIL;
          }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

          hdfu->data_ptr = hdfu->buffer.d8[1];
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	785b      	ldrb	r3, [r3, #1]
 800679c:	461a      	mov	r2, r3
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067a4:	609a      	str	r2, [r3, #8]
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067ac:	689a      	ldr	r2, [r3, #8]
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	789b      	ldrb	r3, [r3, #2]
 80067b2:	021b      	lsls	r3, r3, #8
 80067b4:	4413      	add	r3, r2
 80067b6:	69fa      	ldr	r2, [r7, #28]
 80067b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80067bc:	6093      	str	r3, [r2, #8]
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067c4:	689a      	ldr	r2, [r3, #8]
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	78db      	ldrb	r3, [r3, #3]
 80067ca:	041b      	lsls	r3, r3, #16
 80067cc:	4413      	add	r3, r2
 80067ce:	69fa      	ldr	r2, [r7, #28]
 80067d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80067d4:	6093      	str	r3, [r2, #8]
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067dc:	689a      	ldr	r2, [r3, #8]
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	791b      	ldrb	r3, [r3, #4]
 80067e2:	061b      	lsls	r3, r3, #24
 80067e4:	4413      	add	r3, r2
 80067e6:	69fa      	ldr	r2, [r7, #28]
 80067e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80067ec:	6093      	str	r3, [r2, #8]
 80067ee:	e09c      	b.n	800692a <USBD_DFU_EP0_TxReady+0x204>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b41      	cmp	r3, #65	@ 0x41
 80067f6:	d13e      	bne.n	8006876 <USBD_DFU_EP0_TxReady+0x150>
            hdfu->dev_status[4] = hdfu->dev_state;
            return (uint8_t)USBD_FAIL;
          }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

          app_addr_ptr = hdfu->buffer.d8[1];
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	785b      	ldrb	r3, [r3, #1]
 80067fc:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	789b      	ldrb	r3, [r3, #2]
 8006802:	021b      	lsls	r3, r3, #8
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	4413      	add	r3, r2
 8006808:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	78db      	ldrb	r3, [r3, #3]
 800680e:	041b      	lsls	r3, r3, #16
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4413      	add	r3, r2
 8006814:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	791b      	ldrb	r3, [r3, #4]
 800681a:	061b      	lsls	r3, r3, #24
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	4413      	add	r3, r2
 8006820:	613b      	str	r3, [r7, #16]

          if (DfuInterface->Erase(app_addr_ptr) != USBD_OK)
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	6938      	ldr	r0, [r7, #16]
 8006828:	4798      	blx	r3
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d07c      	beq.n	800692a <USBD_DFU_EP0_TxReady+0x204>
          {
            /* Update the state machine */
            hdfu->dev_state = DFU_STATE_ERROR;
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006836:	220a      	movs	r2, #10
 8006838:	771a      	strb	r2, [r3, #28]
            hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006840:	220b      	movs	r2, #11
 8006842:	751a      	strb	r2, [r3, #20]
            hdfu->dev_status[1] = 0U;
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800684a:	2200      	movs	r2, #0
 800684c:	755a      	strb	r2, [r3, #21]
            hdfu->dev_status[2] = 0U;
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006854:	2200      	movs	r2, #0
 8006856:	759a      	strb	r2, [r3, #22]
            hdfu->dev_status[3] = 0U;
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800685e:	2200      	movs	r2, #0
 8006860:	75da      	strb	r2, [r3, #23]
            hdfu->dev_status[4] = hdfu->dev_state;
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006868:	7f1a      	ldrb	r2, [r3, #28]
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006870:	761a      	strb	r2, [r3, #24]
            return (uint8_t)USBD_FAIL;
 8006872:	2303      	movs	r3, #3
 8006874:	e08f      	b.n	8006996 <USBD_DFU_EP0_TxReady+0x270>
          }
        }
#else
        else
        {
          return (uint8_t)USBD_FAIL;
 8006876:	2303      	movs	r3, #3
 8006878:	e08d      	b.n	8006996 <USBD_DFU_EP0_TxReady+0x270>
          req.wLength = 1U;
          USBD_CtlError(pdev, &req);
        }
#else
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006880:	461a      	mov	r2, r3
 8006882:	2300      	movs	r3, #0
 8006884:	6053      	str	r3, [r2, #4]
        hdfu->wblock_num = 0U;
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800688c:	461a      	mov	r2, r3
 800688e:	2300      	movs	r3, #0
 8006890:	6013      	str	r3, [r2, #0]

        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	723b      	strb	r3, [r7, #8]
        req.wLength = 1U;
 8006896:	2301      	movs	r3, #1
 8006898:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError(pdev, &req);
 800689a:	f107 0308 	add.w	r3, r7, #8
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 ffd2 	bl	800884a <USBD_CtlError>
 80068a6:	e040      	b.n	800692a <USBD_DFU_EP0_TxReady+0x204>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d93a      	bls.n	800692a <USBD_DFU_EP0_TxReady+0x204>
          return (uint8_t)USBD_FAIL;
        }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3b02      	subs	r3, #2
 80068be:	031a      	lsls	r2, r3, #12
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	4413      	add	r3, r2
 80068ca:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	69f8      	ldr	r0, [r7, #28]
 80068d2:	6979      	ldr	r1, [r7, #20]
 80068d4:	69fa      	ldr	r2, [r7, #28]
 80068d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80068da:	6852      	ldr	r2, [r2, #4]
 80068dc:	4798      	blx	r3
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d022      	beq.n	800692a <USBD_DFU_EP0_TxReady+0x204>
        {
          /* Update the state machine */
          hdfu->dev_state = DFU_STATE_ERROR;
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068ea:	220a      	movs	r2, #10
 80068ec:	771a      	strb	r2, [r3, #28]
          hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068f4:	220b      	movs	r2, #11
 80068f6:	751a      	strb	r2, [r3, #20]
          hdfu->dev_status[1] = 0U;
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068fe:	2200      	movs	r2, #0
 8006900:	755a      	strb	r2, [r3, #21]
          hdfu->dev_status[2] = 0U;
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006908:	2200      	movs	r2, #0
 800690a:	759a      	strb	r2, [r3, #22]
          hdfu->dev_status[3] = 0U;
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006912:	2200      	movs	r2, #0
 8006914:	75da      	strb	r2, [r3, #23]
          hdfu->dev_status[4] = hdfu->dev_state;
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800691c:	7f1a      	ldrb	r2, [r3, #28]
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006924:	761a      	strb	r2, [r3, #24]
          return (uint8_t)USBD_FAIL;
 8006926:	2303      	movs	r3, #3
 8006928:	e035      	b.n	8006996 <USBD_DFU_EP0_TxReady+0x270>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006930:	461a      	mov	r2, r3
 8006932:	2300      	movs	r3, #0
 8006934:	6053      	str	r3, [r2, #4]
    hdfu->wblock_num = 0U;
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800693c:	461a      	mov	r2, r3
 800693e:	2300      	movs	r3, #0
 8006940:	6013      	str	r3, [r2, #0]

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006948:	2203      	movs	r2, #3
 800694a:	771a      	strb	r2, [r3, #28]

    hdfu->dev_status[1] = 0U;
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006952:	2200      	movs	r2, #0
 8006954:	755a      	strb	r2, [r3, #21]
    hdfu->dev_status[2] = 0U;
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800695c:	2200      	movs	r2, #0
 800695e:	759a      	strb	r2, [r3, #22]
    hdfu->dev_status[3] = 0U;
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006966:	2200      	movs	r2, #0
 8006968:	75da      	strb	r2, [r3, #23]
    hdfu->dev_status[4] = hdfu->dev_state;
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006970:	7f1a      	ldrb	r2, [r3, #28]
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006978:	761a      	strb	r2, [r3, #24]
 800697a:	e00b      	b.n	8006994 <USBD_DFU_EP0_TxReady+0x26e>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006982:	7f1b      	ldrb	r3, [r3, #28]
 8006984:	2b07      	cmp	r3, #7
 8006986:	d103      	bne.n	8006990 <USBD_DFU_EP0_TxReady+0x26a>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fc86 	bl	800729a <DFU_Leave>
 800698e:	e001      	b.n	8006994 <USBD_DFU_EP0_TxReady+0x26e>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8006990:	2303      	movs	r3, #3
 8006992:	e000      	b.n	8006996 <USBD_DFU_EP0_TxReady+0x270>
  }

  return (uint8_t)USBD_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3720      	adds	r7, #32
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	220a      	movs	r2, #10
 80069c0:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 80069c2:	4b03      	ldr	r3, [pc, #12]	@ (80069d0 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	24000068 	.word	0x24000068

080069d4 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	460b      	mov	r3, r1
 80069de:	607a      	str	r2, [r7, #4]
 80069e0:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	33b0      	adds	r3, #176	@ 0xb0
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80069f4:	7afb      	ldrb	r3, [r7, #11]
 80069f6:	2b06      	cmp	r3, #6
 80069f8:	d808      	bhi.n	8006a0c <USBD_DFU_GetUsrStringDesc+0x38>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	490a      	ldr	r1, [pc, #40]	@ (8006a2c <USBD_DFU_GetUsrStringDesc+0x58>)
 8006a02:	4618      	mov	r0, r3
 8006a04:	f001 ff32 	bl	800886c <USBD_GetString>
    return USBD_StrDesc;
 8006a08:	4b08      	ldr	r3, [pc, #32]	@ (8006a2c <USBD_DFU_GetUsrStringDesc+0x58>)
 8006a0a:	e00a      	b.n	8006a22 <USBD_DFU_GetUsrStringDesc+0x4e>
  }
  else if(0xEE == index)
 8006a0c:	7afb      	ldrb	r3, [r7, #11]
 8006a0e:	2bee      	cmp	r3, #238	@ 0xee
 8006a10:	d104      	bne.n	8006a1c <USBD_DFU_GetUsrStringDesc+0x48>
  {
      *length = 0x12;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2212      	movs	r2, #18
 8006a16:	801a      	strh	r2, [r3, #0]
      return USBD_OS_STRING_DESC;
 8006a18:	4b05      	ldr	r3, [pc, #20]	@ (8006a30 <USBD_DFU_GetUsrStringDesc+0x5c>)
 8006a1a:	e002      	b.n	8006a22 <USBD_DFU_GetUsrStringDesc+0x4e>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    length = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	607b      	str	r3, [r7, #4]
    return NULL;
 8006a20:	2300      	movs	r3, #0
  }
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	240001ec 	.word	0x240001ec
 8006a30:	2400012c 	.word	0x2400012c

08006a34 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e009      	b.n	8006a5c <USBD_DFU_RegisterMedia+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	33b0      	adds	r3, #176	@ 0xb0
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	32b0      	adds	r2, #176	@ 0xb0
 8006a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a80:	60fb      	str	r3, [r7, #12]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 fc78 	bl	800737e <USBD_DFU_GetDfuFuncDesc>
 8006a8e:	60b8      	str	r0, [r7, #8]

  if ((hdfu == NULL) || (pDfuFunc == NULL))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d065      	beq.n	8006b62 <DFU_Detach+0xfa>
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d062      	beq.n	8006b62 <DFU_Detach+0xfa>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aa2:	7f1b      	ldrb	r3, [r3, #28]
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d017      	beq.n	8006ad8 <DFU_Detach+0x70>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aae:	7f1b      	ldrb	r3, [r3, #28]
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8006ab0:	2b03      	cmp	r3, #3
 8006ab2:	d011      	beq.n	8006ad8 <DFU_Detach+0x70>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aba:	7f1b      	ldrb	r3, [r3, #28]
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8006abc:	2b05      	cmp	r3, #5
 8006abe:	d00b      	beq.n	8006ad8 <DFU_Detach+0x70>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ac6:	7f1b      	ldrb	r3, [r3, #28]
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8006ac8:	2b06      	cmp	r3, #6
 8006aca:	d005      	beq.n	8006ad8 <DFU_Detach+0x70>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ad2:	7f1b      	ldrb	r3, [r3, #28]
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8006ad4:	2b09      	cmp	r3, #9
 8006ad6:	d131      	bne.n	8006b3c <DFU_Detach+0xd4>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ade:	2202      	movs	r2, #2
 8006ae0:	771a      	strb	r2, [r3, #28]
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ae8:	2200      	movs	r2, #0
 8006aea:	751a      	strb	r2, [r3, #20]
    hdfu->dev_status[1] = 0U;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006af2:	2200      	movs	r2, #0
 8006af4:	755a      	strb	r2, [r3, #21]
    hdfu->dev_status[2] = 0U;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006afc:	2200      	movs	r2, #0
 8006afe:	759a      	strb	r2, [r3, #22]
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b06:	2200      	movs	r2, #0
 8006b08:	75da      	strb	r2, [r3, #23]
    hdfu->dev_status[4] = hdfu->dev_state;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b10:	7f1a      	ldrb	r2, [r3, #28]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b18:	761a      	strb	r2, [r3, #24]
    hdfu->dev_status[5] = 0U; /*iString*/
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b20:	2200      	movs	r2, #0
 8006b22:	765a      	strb	r2, [r3, #25]
    hdfu->wblock_num = 0U;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	6013      	str	r3, [r2, #0]
    hdfu->wlength = 0U;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b36:	461a      	mov	r2, r3
 8006b38:	2300      	movs	r3, #0
 8006b3a:	6053      	str	r3, [r2, #4]
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U)
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	789b      	ldrb	r3, [r3, #2]
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d006      	beq.n	8006b56 <DFU_Detach+0xee>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fcb8 	bl	80074be <USBD_Stop>
    (void)USBD_Start(pdev);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fca9 	bl	80074a6 <USBD_Start>
 8006b54:	e006      	b.n	8006b64 <DFU_Detach+0xfc>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	885b      	ldrh	r3, [r3, #2]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7f9 ff10 	bl	8000980 <HAL_Delay>
 8006b60:	e000      	b.n	8006b64 <DFU_Detach+0xfc>
    return;
 8006b62:	bf00      	nop
  }
}
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	32b0      	adds	r2, #176	@ 0xb0
 8006b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b82:	60fb      	str	r3, [r7, #12]
#if (USBD_DFU_VENDOR_CHECK_ENABLED == 1U)
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
  uint32_t VendorStatus = 0U;
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

  if (hdfu == NULL)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d072      	beq.n	8006c70 <DFU_Download+0x106>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	88db      	ldrh	r3, [r3, #6]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d03b      	beq.n	8006c0a <DFU_Download+0xa0>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b98:	7f1b      	ldrb	r3, [r3, #28]
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d005      	beq.n	8006baa <DFU_Download+0x40>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ba4:	7f1b      	ldrb	r3, [r3, #28]
 8006ba6:	2b05      	cmp	r3, #5
 8006ba8:	d12a      	bne.n	8006c00 <DFU_Download+0x96>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	885b      	ldrh	r3, [r3, #2]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bb6:	601a      	str	r2, [r3, #0]
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	88db      	ldrh	r3, [r3, #6]
 8006bbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bc0:	bf28      	it	cs
 8006bc2:	f44f 5380 	movcs.w	r3, #4096	@ 0x1000
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	461a      	mov	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bd0:	605a      	str	r2, [r3, #4]

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bd8:	2203      	movs	r2, #3
 8006bda:	771a      	strb	r2, [r3, #28]
      hdfu->dev_status[4] = hdfu->dev_state;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006be2:	7f1a      	ldrb	r2, [r3, #28]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bea:	761a      	strb	r2, [r3, #24]

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8006bec:	68f9      	ldr	r1, [r7, #12]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 fecf 	bl	800899c <USBD_CtlPrepareRx>
 8006bfe:	e038      	b.n	8006c72 <DFU_Download+0x108>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8006c00:	6839      	ldr	r1, [r7, #0]
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f001 fe21 	bl	800884a <USBD_CtlError>
 8006c08:	e033      	b.n	8006c72 <DFU_Download+0x108>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation */
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c10:	7f1b      	ldrb	r3, [r3, #28]
 8006c12:	2b05      	cmp	r3, #5
 8006c14:	d005      	beq.n	8006c22 <DFU_Download+0xb8>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c1c:	7f1b      	ldrb	r3, [r3, #28]
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d121      	bne.n	8006c66 <DFU_Download+0xfc>
        hdfu->dev_status[4] = hdfu->dev_state;
      }
      else
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */
      {
        hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c28:	2201      	movs	r2, #1
 8006c2a:	775a      	strb	r2, [r3, #29]
        hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c32:	2206      	movs	r2, #6
 8006c34:	771a      	strb	r2, [r3, #28]
        hdfu->dev_status[1] = 0U;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	755a      	strb	r2, [r3, #21]
        hdfu->dev_status[2] = 0U;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c46:	2200      	movs	r2, #0
 8006c48:	759a      	strb	r2, [r3, #22]
        hdfu->dev_status[3] = 0U;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c50:	2200      	movs	r2, #0
 8006c52:	75da      	strb	r2, [r3, #23]
        hdfu->dev_status[4] = hdfu->dev_state;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c5a:	7f1a      	ldrb	r2, [r3, #28]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c62:	761a      	strb	r2, [r3, #24]
 8006c64:	e005      	b.n	8006c72 <DFU_Download+0x108>
      }
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8006c66:	6839      	ldr	r1, [r7, #0]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f001 fdee 	bl	800884a <USBD_CtlError>
 8006c6e:	e000      	b.n	8006c72 <DFU_Download+0x108>
    return;
 8006c70:	bf00      	nop
    }
  }
}
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b088      	sub	sp, #32
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	32b0      	adds	r2, #176	@ 0xb0
 8006c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c90:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	33b0      	adds	r3, #176	@ 0xb0
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	61bb      	str	r3, [r7, #24]
  uint8_t VendorCmdLength = 0U;
  uint8_t VendorCmdBuffer[DFU_VENDOR_CMD_MAX];
  uint8_t idx;
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

  if (hdfu == NULL)
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f000 8117 	beq.w	8006eda <DFU_Upload+0x262>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	88db      	ldrh	r3, [r3, #6]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 80f5 	beq.w	8006ea0 <DFU_Upload+0x228>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cbc:	7f1b      	ldrb	r3, [r3, #28]
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d006      	beq.n	8006cd0 <DFU_Upload+0x58>
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cc8:	7f1b      	ldrb	r3, [r3, #28]
 8006cca:	2b09      	cmp	r3, #9
 8006ccc:	f040 80d7 	bne.w	8006e7e <DFU_Upload+0x206>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	885b      	ldrh	r3, [r3, #2]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cdc:	601a      	str	r2, [r3, #0]
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	88db      	ldrh	r3, [r3, #6]
 8006ce2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ce6:	bf28      	it	cs
 8006ce8:	f44f 5380 	movcs.w	r3, #4096	@ 0x1000
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	461a      	mov	r2, r3
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cf6:	605a      	str	r2, [r3, #4]

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d135      	bne.n	8006d70 <DFU_Upload+0xf8>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	2b03      	cmp	r3, #3
 8006d0e:	d901      	bls.n	8006d14 <DFU_Upload+0x9c>
 8006d10:	2202      	movs	r2, #2
 8006d12:	e000      	b.n	8006d16 <DFU_Upload+0x9e>
 8006d14:	2209      	movs	r2, #9
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d1c:	771a      	strb	r2, [r3, #28]

        hdfu->dev_status[1] = 0U;
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d24:	2200      	movs	r2, #0
 8006d26:	755a      	strb	r2, [r3, #21]
        hdfu->dev_status[2] = 0U;
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d2e:	2200      	movs	r2, #0
 8006d30:	759a      	strb	r2, [r3, #22]
        hdfu->dev_status[3] = 0U;
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d38:	2200      	movs	r2, #0
 8006d3a:	75da      	strb	r2, [r3, #23]
        hdfu->dev_status[4] = hdfu->dev_state;
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d42:	7f1a      	ldrb	r2, [r3, #28]
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d4a:	761a      	strb	r2, [r3, #24]

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	2221      	movs	r2, #33	@ 0x21
 8006d56:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	2241      	movs	r2, #65	@ 0x41
 8006d5c:	709a      	strb	r2, [r3, #2]

        CmdLength = 3U;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	60fb      	str	r3, [r7, #12]
          CmdLength += MIN(VendorCmdLength, DFU_VENDOR_CMD_MAX);
        }
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), CmdLength);
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 fdeb 	bl	8008944 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8006d6e:	e0b5      	b.n	8006edc <DFU_Upload+0x264>
      }
      else if (hdfu->wblock_num > 1U)
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d95f      	bls.n	8006e3c <DFU_Upload+0x1c4>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d82:	2209      	movs	r2, #9
 8006d84:	771a      	strb	r2, [r3, #28]

        hdfu->dev_status[1] = 0U;
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	755a      	strb	r2, [r3, #21]
        hdfu->dev_status[2] = 0U;
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d96:	2200      	movs	r2, #0
 8006d98:	759a      	strb	r2, [r3, #22]
        hdfu->dev_status[3] = 0U;
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006da0:	2200      	movs	r2, #0
 8006da2:	75da      	strb	r2, [r3, #23]
        hdfu->dev_status[4] = hdfu->dev_state;
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006daa:	7f1a      	ldrb	r2, [r3, #28]
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006db2:	761a      	strb	r2, [r3, #24]
        }

        if (VendorStatus == IS_DFU_PHY_ADDRESS)
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */
        {
          addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	3b02      	subs	r3, #2
 8006dbe:	031a      	lsls	r2, r3, #12
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	4413      	add	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]

          /* Return the physical address where data are stored */
          phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	6978      	ldr	r0, [r7, #20]
 8006dd2:	69f9      	ldr	r1, [r7, #28]
 8006dd4:	69fa      	ldr	r2, [r7, #28]
 8006dd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006dda:	6852      	ldr	r2, [r2, #4]
 8006ddc:	4798      	blx	r3
 8006dde:	6138      	str	r0, [r7, #16]

          if (phaddr == NULL)
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d120      	bne.n	8006e28 <DFU_Upload+0x1b0>
          {
            hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dec:	220f      	movs	r2, #15
 8006dee:	771a      	strb	r2, [r3, #28]

            hdfu->dev_status[1] = 0U;
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006df6:	2200      	movs	r2, #0
 8006df8:	755a      	strb	r2, [r3, #21]
            hdfu->dev_status[2] = 0U;
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e00:	2200      	movs	r2, #0
 8006e02:	759a      	strb	r2, [r3, #22]
            hdfu->dev_status[3] = 0U;
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	75da      	strb	r2, [r3, #23]
            hdfu->dev_status[4] = hdfu->dev_state;
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e14:	7f1a      	ldrb	r2, [r3, #28]
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e1c:	761a      	strb	r2, [r3, #24]

            /* Call the error management function (command will be NAKed) */
            USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f001 fd12 	bl	800884a <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8006e26:	e059      	b.n	8006edc <DFU_Upload+0x264>
          }
          else
          {
            /* Send the status data over EP0 */
            (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	461a      	mov	r2, r3
 8006e32:	6939      	ldr	r1, [r7, #16]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f001 fd85 	bl	8008944 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8006e3a:	e04f      	b.n	8006edc <DFU_Upload+0x264>
          }
        }
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e42:	220f      	movs	r2, #15
 8006e44:	771a      	strb	r2, [r3, #28]

        hdfu->dev_status[1] = 0U;
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	755a      	strb	r2, [r3, #21]
        hdfu->dev_status[2] = 0U;
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e56:	2200      	movs	r2, #0
 8006e58:	759a      	strb	r2, [r3, #22]
        hdfu->dev_status[3] = 0U;
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e60:	2200      	movs	r2, #0
 8006e62:	75da      	strb	r2, [r3, #23]
        hdfu->dev_status[4] = hdfu->dev_state;
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e6a:	7f1a      	ldrb	r2, [r3, #28]
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e72:	761a      	strb	r2, [r3, #24]

        /* Call the error management function (command will be NAKed) */
        USBD_CtlError(pdev, req);
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f001 fce7 	bl	800884a <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8006e7c:	e02e      	b.n	8006edc <DFU_Upload+0x264>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e84:	461a      	mov	r2, r3
 8006e86:	2300      	movs	r3, #0
 8006e88:	6053      	str	r3, [r2, #4]
      hdfu->wblock_num = 0U;
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e90:	461a      	mov	r2, r3
 8006e92:	2300      	movs	r3, #0
 8006e94:	6013      	str	r3, [r2, #0]

      /* Call the error management function (command will be NAKed) */
      USBD_CtlError(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 fcd6 	bl	800884a <USBD_CtlError>
 8006e9e:	e01d      	b.n	8006edc <DFU_Upload+0x264>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	771a      	strb	r2, [r3, #28]

    hdfu->dev_status[1] = 0U;
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	755a      	strb	r2, [r3, #21]
    hdfu->dev_status[2] = 0U;
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eba:	2200      	movs	r2, #0
 8006ebc:	759a      	strb	r2, [r3, #22]
    hdfu->dev_status[3] = 0U;
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	75da      	strb	r2, [r3, #23]
    hdfu->dev_status[4] = hdfu->dev_state;
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ece:	7f1a      	ldrb	r2, [r3, #28]
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ed6:	761a      	strb	r2, [r3, #24]
 8006ed8:	e000      	b.n	8006edc <DFU_Upload+0x264>
    return;
 8006eda:	bf00      	nop
  }
}
 8006edc:	3720      	adds	r7, #32
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8006ee2:	b590      	push	{r4, r7, lr}
 8006ee4:	b087      	sub	sp, #28
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	32b0      	adds	r2, #176	@ 0xb0
 8006ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef8:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	33b0      	adds	r3, #176	@ 0xb0
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 fa33 	bl	800737e <USBD_DFU_GetDfuFuncDesc>
 8006f18:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 80cc 	beq.w	80070ba <DFU_GetStatus+0x1d8>
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 80c8 	beq.w	80070ba <DFU_GetStatus+0x1d8>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f000 80c4 	beq.w	80070ba <DFU_GetStatus+0x1d8>
  {
    return;
  }

  switch (hdfu->dev_state)
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f38:	7f1b      	ldrb	r3, [r3, #28]
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d002      	beq.n	8006f44 <DFU_GetStatus+0x62>
 8006f3e:	2b06      	cmp	r3, #6
 8006f40:	d065      	beq.n	800700e <DFU_GetStatus+0x12c>
        }
      }
      break;

    default:
      break;
 8006f42:	e0b0      	b.n	80070a6 <DFU_GetStatus+0x1c4>
      if (hdfu->wlength != 0U)
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d041      	beq.n	8006fd4 <DFU_GetStatus+0xf2>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f56:	2204      	movs	r2, #4
 8006f58:	771a      	strb	r2, [r3, #28]
        hdfu->dev_status[1] = 0U;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f60:	2200      	movs	r2, #0
 8006f62:	755a      	strb	r2, [r3, #21]
        hdfu->dev_status[2] = 0U;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	759a      	strb	r2, [r3, #22]
        hdfu->dev_status[3] = 0U;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f74:	2200      	movs	r2, #0
 8006f76:	75da      	strb	r2, [r3, #23]
        hdfu->dev_status[4] = hdfu->dev_state;
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f7e:	7f1a      	ldrb	r2, [r3, #28]
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f86:	761a      	strb	r2, [r3, #24]
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d111      	bne.n	8006fb8 <DFU_GetStatus+0xd6>
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	2b41      	cmp	r3, #65	@ 0x41
 8006f9a:	d10d      	bne.n	8006fb8 <DFU_GetStatus+0xd6>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	699c      	ldr	r4, [r3, #24]
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fa6:	6898      	ldr	r0, [r3, #8]
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	f241 0314 	movw	r3, #4116	@ 0x1014
 8006fae:	4413      	add	r3, r2
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	47a0      	blx	r4
      break;
 8006fb6:	e076      	b.n	80070a6 <DFU_GetStatus+0x1c4>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	699c      	ldr	r4, [r3, #24]
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fc2:	6898      	ldr	r0, [r3, #8]
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	f241 0314 	movw	r3, #4116	@ 0x1014
 8006fca:	4413      	add	r3, r2
 8006fcc:	461a      	mov	r2, r3
 8006fce:	2101      	movs	r1, #1
 8006fd0:	47a0      	blx	r4
      break;
 8006fd2:	e068      	b.n	80070a6 <DFU_GetStatus+0x1c4>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fda:	2205      	movs	r2, #5
 8006fdc:	771a      	strb	r2, [r3, #28]
        hdfu->dev_status[1] = 0U;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	755a      	strb	r2, [r3, #21]
        hdfu->dev_status[2] = 0U;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fee:	2200      	movs	r2, #0
 8006ff0:	759a      	strb	r2, [r3, #22]
        hdfu->dev_status[3] = 0U;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	75da      	strb	r2, [r3, #23]
        hdfu->dev_status[4] = hdfu->dev_state;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007002:	7f1a      	ldrb	r2, [r3, #28]
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800700a:	761a      	strb	r2, [r3, #24]
      break;
 800700c:	e04b      	b.n	80070a6 <DFU_GetStatus+0x1c4>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007014:	7f5b      	ldrb	r3, [r3, #29]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d11c      	bne.n	8007054 <DFU_GetStatus+0x172>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007020:	2207      	movs	r2, #7
 8007022:	771a      	strb	r2, [r3, #28]
        hdfu->dev_status[1] = 1U;             /* bwPollTimeout = 1ms */
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800702a:	2201      	movs	r2, #1
 800702c:	755a      	strb	r2, [r3, #21]
        hdfu->dev_status[2] = 0U;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007034:	2200      	movs	r2, #0
 8007036:	759a      	strb	r2, [r3, #22]
        hdfu->dev_status[3] = 0U;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800703e:	2200      	movs	r2, #0
 8007040:	75da      	strb	r2, [r3, #23]
        hdfu->dev_status[4] = hdfu->dev_state;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007048:	7f1a      	ldrb	r2, [r3, #28]
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007050:	761a      	strb	r2, [r3, #24]
      break;
 8007052:	e027      	b.n	80070a4 <DFU_GetStatus+0x1c2>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800705a:	7f5b      	ldrb	r3, [r3, #29]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d121      	bne.n	80070a4 <DFU_GetStatus+0x1c2>
            ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	789b      	ldrb	r3, [r3, #2]
 8007064:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8007068:	2b00      	cmp	r3, #0
 800706a:	d01b      	beq.n	80070a4 <DFU_GetStatus+0x1c2>
          hdfu->dev_state = DFU_STATE_IDLE;
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007072:	2202      	movs	r2, #2
 8007074:	771a      	strb	r2, [r3, #28]
          hdfu->dev_status[1] = 0U;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800707c:	2200      	movs	r2, #0
 800707e:	755a      	strb	r2, [r3, #21]
          hdfu->dev_status[2] = 0U;
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007086:	2200      	movs	r2, #0
 8007088:	759a      	strb	r2, [r3, #22]
          hdfu->dev_status[3] = 0U;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007090:	2200      	movs	r2, #0
 8007092:	75da      	strb	r2, [r3, #23]
          hdfu->dev_status[4] = hdfu->dev_state;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800709a:	7f1a      	ldrb	r2, [r3, #28]
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070a2:	761a      	strb	r2, [r3, #24]
      break;
 80070a4:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	f241 0314 	movw	r3, #4116	@ 0x1014
 80070ac:	4413      	add	r3, r2
 80070ae:	2206      	movs	r2, #6
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f001 fc46 	bl	8008944 <USBD_CtlSendData>
 80070b8:	e000      	b.n	80070bc <DFU_GetStatus+0x1da>
    return;
 80070ba:	bf00      	nop
}
 80070bc:	371c      	adds	r7, #28
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd90      	pop	{r4, r7, pc}

080070c2 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b085      	sub	sp, #20
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	32b0      	adds	r2, #176	@ 0xb0
 80070d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d8:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d053      	beq.n	8007188 <DFU_ClearStatus+0xc6>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070e6:	7f1b      	ldrb	r3, [r3, #28]
 80070e8:	2b0a      	cmp	r3, #10
 80070ea:	d126      	bne.n	800713a <DFU_ClearStatus+0x78>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070f2:	2202      	movs	r2, #2
 80070f4:	771a      	strb	r2, [r3, #28]
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070fc:	2200      	movs	r2, #0
 80070fe:	751a      	strb	r2, [r3, #20]
    hdfu->dev_status[1] = 0U;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007106:	2200      	movs	r2, #0
 8007108:	755a      	strb	r2, [r3, #21]
    hdfu->dev_status[2] = 0U;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007110:	2200      	movs	r2, #0
 8007112:	759a      	strb	r2, [r3, #22]
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800711a:	2200      	movs	r2, #0
 800711c:	75da      	strb	r2, [r3, #23]
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007124:	7f1a      	ldrb	r2, [r3, #28]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800712c:	761a      	strb	r2, [r3, #24]
    hdfu->dev_status[5] = 0U; /* iString */
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007134:	2200      	movs	r2, #0
 8007136:	765a      	strb	r2, [r3, #25]
 8007138:	e027      	b.n	800718a <DFU_ClearStatus+0xc8>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007140:	220a      	movs	r2, #10
 8007142:	771a      	strb	r2, [r3, #28]
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800714a:	220e      	movs	r2, #14
 800714c:	751a      	strb	r2, [r3, #20]
    hdfu->dev_status[1] = 0U;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007154:	2200      	movs	r2, #0
 8007156:	755a      	strb	r2, [r3, #21]
    hdfu->dev_status[2] = 0U;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800715e:	2200      	movs	r2, #0
 8007160:	759a      	strb	r2, [r3, #22]
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007168:	2200      	movs	r2, #0
 800716a:	75da      	strb	r2, [r3, #23]
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007172:	7f1a      	ldrb	r2, [r3, #28]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800717a:	761a      	strb	r2, [r3, #24]
    hdfu->dev_status[5] = 0U; /* iString */
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007182:	2200      	movs	r2, #0
 8007184:	765a      	strb	r2, [r3, #25]
 8007186:	e000      	b.n	800718a <DFU_ClearStatus+0xc8>
    return;
 8007188:	bf00      	nop
  }
}
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	32b0      	adds	r2, #176	@ 0xb0
 80071a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071aa:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d009      	beq.n	80071c6 <DFU_GetState+0x32>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	f241 031c 	movw	r3, #4124	@ 0x101c
 80071b8:	4413      	add	r3, r2
 80071ba:	2201      	movs	r2, #1
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f001 fbc0 	bl	8008944 <USBD_CtlSendData>
 80071c4:	e000      	b.n	80071c8 <DFU_GetState+0x34>
    return;
 80071c6:	bf00      	nop
}
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b085      	sub	sp, #20
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	32b0      	adds	r2, #176	@ 0xb0
 80071e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e4:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d050      	beq.n	800728e <DFU_Abort+0xc0>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071f2:	7f1b      	ldrb	r3, [r3, #28]
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d017      	beq.n	8007228 <DFU_Abort+0x5a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071fe:	7f1b      	ldrb	r3, [r3, #28]
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8007200:	2b03      	cmp	r3, #3
 8007202:	d011      	beq.n	8007228 <DFU_Abort+0x5a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800720a:	7f1b      	ldrb	r3, [r3, #28]
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800720c:	2b05      	cmp	r3, #5
 800720e:	d00b      	beq.n	8007228 <DFU_Abort+0x5a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007216:	7f1b      	ldrb	r3, [r3, #28]
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8007218:	2b06      	cmp	r3, #6
 800721a:	d005      	beq.n	8007228 <DFU_Abort+0x5a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007222:	7f1b      	ldrb	r3, [r3, #28]
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007224:	2b09      	cmp	r3, #9
 8007226:	d133      	bne.n	8007290 <DFU_Abort+0xc2>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800722e:	2202      	movs	r2, #2
 8007230:	771a      	strb	r2, [r3, #28]
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007238:	2200      	movs	r2, #0
 800723a:	751a      	strb	r2, [r3, #20]
    hdfu->dev_status[1] = 0U;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007242:	2200      	movs	r2, #0
 8007244:	755a      	strb	r2, [r3, #21]
    hdfu->dev_status[2] = 0U;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800724c:	2200      	movs	r2, #0
 800724e:	759a      	strb	r2, [r3, #22]
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007256:	2200      	movs	r2, #0
 8007258:	75da      	strb	r2, [r3, #23]
    hdfu->dev_status[4] = hdfu->dev_state;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007260:	7f1a      	ldrb	r2, [r3, #28]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007268:	761a      	strb	r2, [r3, #24]
    hdfu->dev_status[5] = 0U; /* iString */
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007270:	2200      	movs	r2, #0
 8007272:	765a      	strb	r2, [r3, #25]
    hdfu->wblock_num = 0U;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800727a:	461a      	mov	r2, r3
 800727c:	2300      	movs	r3, #0
 800727e:	6013      	str	r3, [r2, #0]
    hdfu->wlength = 0U;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007286:	461a      	mov	r2, r3
 8007288:	2300      	movs	r3, #0
 800728a:	6053      	str	r3, [r2, #4]
 800728c:	e000      	b.n	8007290 <DFU_Abort+0xc2>
    return;
 800728e:	bf00      	nop
  }
}
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b086      	sub	sp, #24
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	32b0      	adds	r2, #176	@ 0xb0
 80072ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b0:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	33b0      	adds	r3, #176	@ 0xb0
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4413      	add	r3, r2
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 f857 	bl	800737e <USBD_DFU_GetDfuFuncDesc>
 80072d0:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d04e      	beq.n	8007376 <DFU_Leave+0xdc>
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d04b      	beq.n	8007376 <DFU_Leave+0xdc>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d048      	beq.n	8007376 <DFU_Leave+0xdc>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072ea:	2200      	movs	r2, #0
 80072ec:	775a      	strb	r2, [r3, #29]

  if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	789b      	ldrb	r3, [r3, #2]
 80072f2:	f003 0304 	and.w	r3, r3, #4
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d01c      	beq.n	8007334 <DFU_Leave+0x9a>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007300:	2206      	movs	r2, #6
 8007302:	771a      	strb	r2, [r3, #28]

    hdfu->dev_status[1] = 0U;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800730a:	2200      	movs	r2, #0
 800730c:	755a      	strb	r2, [r3, #21]
    hdfu->dev_status[2] = 0U;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007314:	2200      	movs	r2, #0
 8007316:	759a      	strb	r2, [r3, #22]
    hdfu->dev_status[3] = 0U;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800731e:	2200      	movs	r2, #0
 8007320:	75da      	strb	r2, [r3, #23]
    hdfu->dev_status[4] = hdfu->dev_state;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007328:	7f1a      	ldrb	r2, [r3, #28]
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007330:	761a      	strb	r2, [r3, #24]
    return;
 8007332:	e021      	b.n	8007378 <DFU_Leave+0xde>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800733a:	2208      	movs	r2, #8
 800733c:	771a      	strb	r2, [r3, #28]

    hdfu->dev_status[1] = 0U;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007344:	2200      	movs	r2, #0
 8007346:	755a      	strb	r2, [r3, #21]
    hdfu->dev_status[2] = 0U;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800734e:	2200      	movs	r2, #0
 8007350:	759a      	strb	r2, [r3, #22]
    hdfu->dev_status[3] = 0U;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007358:	2200      	movs	r2, #0
 800735a:	75da      	strb	r2, [r3, #23]
    hdfu->dev_status[4] = hdfu->dev_state;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007362:	7f1a      	ldrb	r2, [r3, #28]
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800736a:	761a      	strb	r2, [r3, #24]

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f8a6 	bl	80074be <USBD_Stop>
#if (USBD_DFU_VENDOR_EXIT_ENABLED == 1U)
    /* Jump should be ensured by user application */
    DfuInterface->LeaveDFU(hdfu->data_ptr);
#else
    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8007372:	f7fe ff45 	bl	8006200 <__NVIC_SystemReset>
    return;
 8007376:	bf00      	nop
#endif /* USBD_DFU_VENDOR_EXIT_ENABLED */

    /* The next instructions will not be reached (system reset) */
  }
}
 8007378:	3718      	adds	r7, #24
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <USBD_DFU_GetDfuFuncDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the DFU descriptor
  */
static void *USBD_DFU_GetDfuFuncDesc(uint8_t *pConfDesc)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b086      	sub	sp, #24
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	617b      	str	r3, [r7, #20]
  uint8_t *pDfuDesc = NULL;
 800738e:	2300      	movs	r3, #0
 8007390:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	885b      	ldrh	r3, [r3, #2]
 8007396:	b29b      	uxth	r3, r3
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	7812      	ldrb	r2, [r2, #0]
 800739c:	4293      	cmp	r3, r2
 800739e:	d917      	bls.n	80073d0 <USBD_DFU_GetDfuFuncDesc+0x52>
  {
    ptr = desc->bLength;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80073a6:	e00d      	b.n	80073c4 <USBD_DFU_GetDfuFuncDesc+0x46>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80073a8:	f107 030a 	add.w	r3, r7, #10
 80073ac:	4619      	mov	r1, r3
 80073ae:	6978      	ldr	r0, [r7, #20]
 80073b0:	f000 fbfd 	bl	8007bae <USBD_GetNextDesc>
 80073b4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	785b      	ldrb	r3, [r3, #1]
 80073ba:	2b21      	cmp	r3, #33	@ 0x21
 80073bc:	d102      	bne.n	80073c4 <USBD_DFU_GetDfuFuncDesc+0x46>
      {
        pDfuDesc = (uint8_t *)pdesc;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	613b      	str	r3, [r7, #16]
        break;
 80073c2:	e005      	b.n	80073d0 <USBD_DFU_GetDfuFuncDesc+0x52>
    while (ptr < desc->wTotalLength)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	885b      	ldrh	r3, [r3, #2]
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	897b      	ldrh	r3, [r7, #10]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d8eb      	bhi.n	80073a8 <USBD_DFU_GetDfuFuncDesc+0x2a>
      }
    }
  }
  return pDfuDesc;
 80073d0:	693b      	ldr	r3, [r7, #16]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3718      	adds	r7, #24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b086      	sub	sp, #24
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	4613      	mov	r3, r2
 80073e6:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e01f      	b.n	8007432 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	79fa      	ldrb	r2, [r7, #7]
 8007424:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f001 feb0 	bl	800918c <USBD_LL_Init>
 800742c:	4603      	mov	r3, r0
 800742e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007430:	7dfb      	ldrb	r3, [r7, #23]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007444:	2300      	movs	r3, #0
 8007446:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800744e:	2303      	movs	r3, #3
 8007450:	e025      	b.n	800749e <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	32ae      	adds	r2, #174	@ 0xae
 8007464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00f      	beq.n	800748e <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	32ae      	adds	r2, #174	@ 0xae
 8007478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800747e:	f107 020e 	add.w	r2, r7, #14
 8007482:	4610      	mov	r0, r2
 8007484:	4798      	blx	r3
 8007486:	4602      	mov	r2, r0
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007494:	1c5a      	adds	r2, r3, #1
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b082      	sub	sp, #8
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f001 febe 	bl	8009230 <USBD_LL_Start>
 80074b4:	4603      	mov	r3, r0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b082      	sub	sp, #8
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f001 fecd 	bl	8009266 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d009      	beq.n	80074ea <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6852      	ldr	r2, [r2, #4]
 80074e2:	b2d2      	uxtb	r2, r2
 80074e4:	4611      	mov	r1, r2
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80074fe:	4618      	mov	r0, r3
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	460b      	mov	r3, r1
 8007514:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007520:	2b00      	cmp	r3, #0
 8007522:	d009      	beq.n	8007538 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	78fa      	ldrb	r2, [r7, #3]
 800752e:	4611      	mov	r1, r2
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	4798      	blx	r3
 8007534:	4603      	mov	r3, r0
 8007536:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007538:	7bfb      	ldrb	r3, [r7, #15]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	460b      	mov	r3, r1
 800754c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	78fa      	ldrb	r2, [r7, #3]
 800755c:	4611      	mov	r1, r2
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	4798      	blx	r3
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007568:	2303      	movs	r3, #3
 800756a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800756c:	7bfb      	ldrb	r3, [r7, #15]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b084      	sub	sp, #16
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	4618      	mov	r0, r3
 800758a:	f001 f924 	bl	80087d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800759c:	461a      	mov	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80075aa:	f003 031f 	and.w	r3, r3, #31
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d01a      	beq.n	80075e8 <USBD_LL_SetupStage+0x72>
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d822      	bhi.n	80075fc <USBD_LL_SetupStage+0x86>
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d002      	beq.n	80075c0 <USBD_LL_SetupStage+0x4a>
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d00a      	beq.n	80075d4 <USBD_LL_SetupStage+0x5e>
 80075be:	e01d      	b.n	80075fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80075c6:	4619      	mov	r1, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fb2b 	bl	8007c24 <USBD_StdDevReq>
 80075ce:	4603      	mov	r3, r0
 80075d0:	73fb      	strb	r3, [r7, #15]
      break;
 80075d2:	e020      	b.n	8007616 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fb93 	bl	8007d08 <USBD_StdItfReq>
 80075e2:	4603      	mov	r3, r0
 80075e4:	73fb      	strb	r3, [r7, #15]
      break;
 80075e6:	e016      	b.n	8007616 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fbf5 	bl	8007de0 <USBD_StdEPReq>
 80075f6:	4603      	mov	r3, r0
 80075f8:	73fb      	strb	r3, [r7, #15]
      break;
 80075fa:	e00c      	b.n	8007616 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007602:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007606:	b2db      	uxtb	r3, r3
 8007608:	4619      	mov	r1, r3
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f001 fe6c 	bl	80092e8 <USBD_LL_StallEP>
 8007610:	4603      	mov	r3, r0
 8007612:	73fb      	strb	r3, [r7, #15]
      break;
 8007614:	bf00      	nop
  }

  return ret;
 8007616:	7bfb      	ldrb	r3, [r7, #15]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b086      	sub	sp, #24
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	460b      	mov	r3, r1
 800762a:	607a      	str	r2, [r7, #4]
 800762c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007632:	7afb      	ldrb	r3, [r7, #11]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d16e      	bne.n	8007716 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800763e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007646:	2b03      	cmp	r3, #3
 8007648:	f040 8098 	bne.w	800777c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	689a      	ldr	r2, [r3, #8]
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	429a      	cmp	r2, r3
 8007656:	d913      	bls.n	8007680 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	689a      	ldr	r2, [r3, #8]
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	1ad2      	subs	r2, r2, r3
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	68da      	ldr	r2, [r3, #12]
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	4293      	cmp	r3, r2
 8007670:	bf28      	it	cs
 8007672:	4613      	movcs	r3, r2
 8007674:	461a      	mov	r2, r3
 8007676:	6879      	ldr	r1, [r7, #4]
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f001 f9ac 	bl	80089d6 <USBD_CtlContinueRx>
 800767e:	e07d      	b.n	800777c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007686:	f003 031f 	and.w	r3, r3, #31
 800768a:	2b02      	cmp	r3, #2
 800768c:	d014      	beq.n	80076b8 <USBD_LL_DataOutStage+0x98>
 800768e:	2b02      	cmp	r3, #2
 8007690:	d81d      	bhi.n	80076ce <USBD_LL_DataOutStage+0xae>
 8007692:	2b00      	cmp	r3, #0
 8007694:	d002      	beq.n	800769c <USBD_LL_DataOutStage+0x7c>
 8007696:	2b01      	cmp	r3, #1
 8007698:	d003      	beq.n	80076a2 <USBD_LL_DataOutStage+0x82>
 800769a:	e018      	b.n	80076ce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800769c:	2300      	movs	r3, #0
 800769e:	75bb      	strb	r3, [r7, #22]
            break;
 80076a0:	e018      	b.n	80076d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	4619      	mov	r1, r3
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 fa64 	bl	8007b7a <USBD_CoreFindIF>
 80076b2:	4603      	mov	r3, r0
 80076b4:	75bb      	strb	r3, [r7, #22]
            break;
 80076b6:	e00d      	b.n	80076d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	4619      	mov	r1, r3
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f000 fa66 	bl	8007b94 <USBD_CoreFindEP>
 80076c8:	4603      	mov	r3, r0
 80076ca:	75bb      	strb	r3, [r7, #22]
            break;
 80076cc:	e002      	b.n	80076d4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	75bb      	strb	r3, [r7, #22]
            break;
 80076d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80076d4:	7dbb      	ldrb	r3, [r7, #22]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d119      	bne.n	800770e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d113      	bne.n	800770e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80076e6:	7dba      	ldrb	r2, [r7, #22]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	32ae      	adds	r2, #174	@ 0xae
 80076ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00b      	beq.n	800770e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80076f6:	7dba      	ldrb	r2, [r7, #22]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80076fe:	7dba      	ldrb	r2, [r7, #22]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	32ae      	adds	r2, #174	@ 0xae
 8007704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f001 f972 	bl	80089f8 <USBD_CtlSendStatus>
 8007714:	e032      	b.n	800777c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007716:	7afb      	ldrb	r3, [r7, #11]
 8007718:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800771c:	b2db      	uxtb	r3, r3
 800771e:	4619      	mov	r1, r3
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f000 fa37 	bl	8007b94 <USBD_CoreFindEP>
 8007726:	4603      	mov	r3, r0
 8007728:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800772a:	7dbb      	ldrb	r3, [r7, #22]
 800772c:	2bff      	cmp	r3, #255	@ 0xff
 800772e:	d025      	beq.n	800777c <USBD_LL_DataOutStage+0x15c>
 8007730:	7dbb      	ldrb	r3, [r7, #22]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d122      	bne.n	800777c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b03      	cmp	r3, #3
 8007740:	d117      	bne.n	8007772 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007742:	7dba      	ldrb	r2, [r7, #22]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	32ae      	adds	r2, #174	@ 0xae
 8007748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00f      	beq.n	8007772 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007752:	7dba      	ldrb	r2, [r7, #22]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800775a:	7dba      	ldrb	r2, [r7, #22]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	32ae      	adds	r2, #174	@ 0xae
 8007760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	7afa      	ldrb	r2, [r7, #11]
 8007768:	4611      	mov	r1, r2
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	4798      	blx	r3
 800776e:	4603      	mov	r3, r0
 8007770:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007772:	7dfb      	ldrb	r3, [r7, #23]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d001      	beq.n	800777c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007778:	7dfb      	ldrb	r3, [r7, #23]
 800777a:	e000      	b.n	800777e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3718      	adds	r7, #24
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b086      	sub	sp, #24
 800778a:	af00      	add	r7, sp, #0
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	460b      	mov	r3, r1
 8007790:	607a      	str	r2, [r7, #4]
 8007792:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007794:	7afb      	ldrb	r3, [r7, #11]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d16f      	bne.n	800787a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3314      	adds	r3, #20
 800779e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d15a      	bne.n	8007860 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	689a      	ldr	r2, [r3, #8]
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d914      	bls.n	80077e0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	689a      	ldr	r2, [r3, #8]
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	1ad2      	subs	r2, r2, r3
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	461a      	mov	r2, r3
 80077ca:	6879      	ldr	r1, [r7, #4]
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f001 f8d4 	bl	800897a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077d2:	2300      	movs	r3, #0
 80077d4:	2200      	movs	r2, #0
 80077d6:	2100      	movs	r1, #0
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f001 fe2f 	bl	800943c <USBD_LL_PrepareReceive>
 80077de:	e03f      	b.n	8007860 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	68da      	ldr	r2, [r3, #12]
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d11c      	bne.n	8007826 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d316      	bcc.n	8007826 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007802:	429a      	cmp	r2, r3
 8007804:	d20f      	bcs.n	8007826 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007806:	2200      	movs	r2, #0
 8007808:	2100      	movs	r1, #0
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f001 f8b5 	bl	800897a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007818:	2300      	movs	r3, #0
 800781a:	2200      	movs	r2, #0
 800781c:	2100      	movs	r1, #0
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f001 fe0c 	bl	800943c <USBD_LL_PrepareReceive>
 8007824:	e01c      	b.n	8007860 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b03      	cmp	r3, #3
 8007830:	d10f      	bne.n	8007852 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d009      	beq.n	8007852 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007852:	2180      	movs	r1, #128	@ 0x80
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f001 fd47 	bl	80092e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f001 f8df 	bl	8008a1e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d03a      	beq.n	80078e0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f7ff fe42 	bl	80074f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007878:	e032      	b.n	80078e0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800787a:	7afb      	ldrb	r3, [r7, #11]
 800787c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007880:	b2db      	uxtb	r3, r3
 8007882:	4619      	mov	r1, r3
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 f985 	bl	8007b94 <USBD_CoreFindEP>
 800788a:	4603      	mov	r3, r0
 800788c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800788e:	7dfb      	ldrb	r3, [r7, #23]
 8007890:	2bff      	cmp	r3, #255	@ 0xff
 8007892:	d025      	beq.n	80078e0 <USBD_LL_DataInStage+0x15a>
 8007894:	7dfb      	ldrb	r3, [r7, #23]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d122      	bne.n	80078e0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d11c      	bne.n	80078e0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80078a6:	7dfa      	ldrb	r2, [r7, #23]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	32ae      	adds	r2, #174	@ 0xae
 80078ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d014      	beq.n	80078e0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80078b6:	7dfa      	ldrb	r2, [r7, #23]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80078be:	7dfa      	ldrb	r2, [r7, #23]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	32ae      	adds	r2, #174	@ 0xae
 80078c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	7afa      	ldrb	r2, [r7, #11]
 80078cc:	4611      	mov	r1, r2
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	4798      	blx	r3
 80078d2:	4603      	mov	r3, r0
 80078d4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80078d6:	7dbb      	ldrb	r3, [r7, #22]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d001      	beq.n	80078e0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80078dc:	7dbb      	ldrb	r3, [r7, #22]
 80078de:	e000      	b.n	80078e2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b084      	sub	sp, #16
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007922:	2b00      	cmp	r3, #0
 8007924:	d014      	beq.n	8007950 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00e      	beq.n	8007950 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	6852      	ldr	r2, [r2, #4]
 800793e:	b2d2      	uxtb	r2, r2
 8007940:	4611      	mov	r1, r2
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	4798      	blx	r3
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800794c:	2303      	movs	r3, #3
 800794e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007950:	2340      	movs	r3, #64	@ 0x40
 8007952:	2200      	movs	r2, #0
 8007954:	2100      	movs	r1, #0
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f001 fca0 	bl	800929c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2240      	movs	r2, #64	@ 0x40
 8007968:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800796c:	2340      	movs	r3, #64	@ 0x40
 800796e:	2200      	movs	r2, #0
 8007970:	2180      	movs	r1, #128	@ 0x80
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f001 fc92 	bl	800929c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2240      	movs	r2, #64	@ 0x40
 8007982:	621a      	str	r2, [r3, #32]

  return ret;
 8007984:	7bfb      	ldrb	r3, [r7, #15]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800798e:	b480      	push	{r7}
 8007990:	b083      	sub	sp, #12
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	460b      	mov	r3, r1
 8007998:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	78fa      	ldrb	r2, [r7, #3]
 800799e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d006      	beq.n	80079d0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2204      	movs	r2, #4
 80079d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	d106      	bne.n	8007a08 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b082      	sub	sp, #8
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b03      	cmp	r3, #3
 8007a28:	d110      	bne.n	8007a4c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00b      	beq.n	8007a4c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d005      	beq.n	8007a4c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a46:	69db      	ldr	r3, [r3, #28]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b082      	sub	sp, #8
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	460b      	mov	r3, r1
 8007a60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	32ae      	adds	r2, #174	@ 0xae
 8007a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e01c      	b.n	8007ab2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	2b03      	cmp	r3, #3
 8007a82:	d115      	bne.n	8007ab0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	32ae      	adds	r2, #174	@ 0xae
 8007a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a92:	6a1b      	ldr	r3, [r3, #32]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00b      	beq.n	8007ab0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	32ae      	adds	r2, #174	@ 0xae
 8007aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa6:	6a1b      	ldr	r3, [r3, #32]
 8007aa8:	78fa      	ldrb	r2, [r7, #3]
 8007aaa:	4611      	mov	r1, r2
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b082      	sub	sp, #8
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	32ae      	adds	r2, #174	@ 0xae
 8007ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e01c      	b.n	8007b16 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d115      	bne.n	8007b14 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	32ae      	adds	r2, #174	@ 0xae
 8007af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00b      	beq.n	8007b14 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	32ae      	adds	r2, #174	@ 0xae
 8007b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b0c:	78fa      	ldrb	r2, [r7, #3]
 8007b0e:	4611      	mov	r1, r2
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b083      	sub	sp, #12
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00e      	beq.n	8007b70 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	6852      	ldr	r2, [r2, #4]
 8007b5e:	b2d2      	uxtb	r2, r2
 8007b60:	4611      	mov	r1, r2
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	4798      	blx	r3
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d001      	beq.n	8007b70 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	460b      	mov	r3, r1
 8007b84:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b86:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ba0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b085      	sub	sp, #20
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	881b      	ldrh	r3, [r3, #0]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	7812      	ldrb	r2, [r2, #0]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007be6:	b480      	push	{r7}
 8007be8:	b087      	sub	sp, #28
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c04:	8a3b      	ldrh	r3, [r7, #16]
 8007c06:	021b      	lsls	r3, r3, #8
 8007c08:	b21a      	sxth	r2, r3
 8007c0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	b21b      	sxth	r3, r3
 8007c12:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c14:	89fb      	ldrh	r3, [r7, #14]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	371c      	adds	r7, #28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
	...

08007c24 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c3a:	2b40      	cmp	r3, #64	@ 0x40
 8007c3c:	d005      	beq.n	8007c4a <USBD_StdDevReq+0x26>
 8007c3e:	2b40      	cmp	r3, #64	@ 0x40
 8007c40:	d857      	bhi.n	8007cf2 <USBD_StdDevReq+0xce>
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00f      	beq.n	8007c66 <USBD_StdDevReq+0x42>
 8007c46:	2b20      	cmp	r3, #32
 8007c48:	d153      	bne.n	8007cf2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	32ae      	adds	r2, #174	@ 0xae
 8007c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	6839      	ldr	r1, [r7, #0]
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	4798      	blx	r3
 8007c60:	4603      	mov	r3, r0
 8007c62:	73fb      	strb	r3, [r7, #15]
      break;
 8007c64:	e04a      	b.n	8007cfc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	785b      	ldrb	r3, [r3, #1]
 8007c6a:	2b09      	cmp	r3, #9
 8007c6c:	d83b      	bhi.n	8007ce6 <USBD_StdDevReq+0xc2>
 8007c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c74 <USBD_StdDevReq+0x50>)
 8007c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c74:	08007cc9 	.word	0x08007cc9
 8007c78:	08007cdd 	.word	0x08007cdd
 8007c7c:	08007ce7 	.word	0x08007ce7
 8007c80:	08007cd3 	.word	0x08007cd3
 8007c84:	08007ce7 	.word	0x08007ce7
 8007c88:	08007ca7 	.word	0x08007ca7
 8007c8c:	08007c9d 	.word	0x08007c9d
 8007c90:	08007ce7 	.word	0x08007ce7
 8007c94:	08007cbf 	.word	0x08007cbf
 8007c98:	08007cb1 	.word	0x08007cb1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c9c:	6839      	ldr	r1, [r7, #0]
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fa3c 	bl	800811c <USBD_GetDescriptor>
          break;
 8007ca4:	e024      	b.n	8007cf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ca6:	6839      	ldr	r1, [r7, #0]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 fbf1 	bl	8008490 <USBD_SetAddress>
          break;
 8007cae:	e01f      	b.n	8007cf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fc30 	bl	8008518 <USBD_SetConfig>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	73fb      	strb	r3, [r7, #15]
          break;
 8007cbc:	e018      	b.n	8007cf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007cbe:	6839      	ldr	r1, [r7, #0]
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fcd3 	bl	800866c <USBD_GetConfig>
          break;
 8007cc6:	e013      	b.n	8007cf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fd04 	bl	80086d8 <USBD_GetStatus>
          break;
 8007cd0:	e00e      	b.n	8007cf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fd33 	bl	8008740 <USBD_SetFeature>
          break;
 8007cda:	e009      	b.n	8007cf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fd57 	bl	8008792 <USBD_ClrFeature>
          break;
 8007ce4:	e004      	b.n	8007cf0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fdae 	bl	800884a <USBD_CtlError>
          break;
 8007cee:	bf00      	nop
      }
      break;
 8007cf0:	e004      	b.n	8007cfc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007cf2:	6839      	ldr	r1, [r7, #0]
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fda8 	bl	800884a <USBD_CtlError>
      break;
 8007cfa:	bf00      	nop
  }

  return ret;
 8007cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop

08007d08 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d1e:	2b40      	cmp	r3, #64	@ 0x40
 8007d20:	d005      	beq.n	8007d2e <USBD_StdItfReq+0x26>
 8007d22:	2b40      	cmp	r3, #64	@ 0x40
 8007d24:	d852      	bhi.n	8007dcc <USBD_StdItfReq+0xc4>
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d001      	beq.n	8007d2e <USBD_StdItfReq+0x26>
 8007d2a:	2b20      	cmp	r3, #32
 8007d2c:	d14e      	bne.n	8007dcc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	3b01      	subs	r3, #1
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d840      	bhi.n	8007dbe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	889b      	ldrh	r3, [r3, #4]
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d836      	bhi.n	8007db4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	889b      	ldrh	r3, [r3, #4]
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7ff ff13 	bl	8007b7a <USBD_CoreFindIF>
 8007d54:	4603      	mov	r3, r0
 8007d56:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
 8007d5a:	2bff      	cmp	r3, #255	@ 0xff
 8007d5c:	d01d      	beq.n	8007d9a <USBD_StdItfReq+0x92>
 8007d5e:	7bbb      	ldrb	r3, [r7, #14]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d11a      	bne.n	8007d9a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007d64:	7bba      	ldrb	r2, [r7, #14]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	32ae      	adds	r2, #174	@ 0xae
 8007d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00f      	beq.n	8007d94 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007d74:	7bba      	ldrb	r2, [r7, #14]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d7c:	7bba      	ldrb	r2, [r7, #14]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	32ae      	adds	r2, #174	@ 0xae
 8007d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	4798      	blx	r3
 8007d8e:	4603      	mov	r3, r0
 8007d90:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007d92:	e004      	b.n	8007d9e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007d94:	2303      	movs	r3, #3
 8007d96:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007d98:	e001      	b.n	8007d9e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	88db      	ldrh	r3, [r3, #6]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d110      	bne.n	8007dc8 <USBD_StdItfReq+0xc0>
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10d      	bne.n	8007dc8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fe23 	bl	80089f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007db2:	e009      	b.n	8007dc8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fd47 	bl	800884a <USBD_CtlError>
          break;
 8007dbc:	e004      	b.n	8007dc8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007dbe:	6839      	ldr	r1, [r7, #0]
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fd42 	bl	800884a <USBD_CtlError>
          break;
 8007dc6:	e000      	b.n	8007dca <USBD_StdItfReq+0xc2>
          break;
 8007dc8:	bf00      	nop
      }
      break;
 8007dca:	e004      	b.n	8007dd6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fd3b 	bl	800884a <USBD_CtlError>
      break;
 8007dd4:	bf00      	nop
  }

  return ret;
 8007dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	889b      	ldrh	r3, [r3, #4]
 8007df2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007dfc:	2b40      	cmp	r3, #64	@ 0x40
 8007dfe:	d007      	beq.n	8007e10 <USBD_StdEPReq+0x30>
 8007e00:	2b40      	cmp	r3, #64	@ 0x40
 8007e02:	f200 817f 	bhi.w	8008104 <USBD_StdEPReq+0x324>
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d02a      	beq.n	8007e60 <USBD_StdEPReq+0x80>
 8007e0a:	2b20      	cmp	r3, #32
 8007e0c:	f040 817a 	bne.w	8008104 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e10:	7bbb      	ldrb	r3, [r7, #14]
 8007e12:	4619      	mov	r1, r3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7ff febd 	bl	8007b94 <USBD_CoreFindEP>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e1e:	7b7b      	ldrb	r3, [r7, #13]
 8007e20:	2bff      	cmp	r3, #255	@ 0xff
 8007e22:	f000 8174 	beq.w	800810e <USBD_StdEPReq+0x32e>
 8007e26:	7b7b      	ldrb	r3, [r7, #13]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f040 8170 	bne.w	800810e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007e2e:	7b7a      	ldrb	r2, [r7, #13]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007e36:	7b7a      	ldrb	r2, [r7, #13]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	32ae      	adds	r2, #174	@ 0xae
 8007e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f000 8163 	beq.w	800810e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007e48:	7b7a      	ldrb	r2, [r7, #13]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	32ae      	adds	r2, #174	@ 0xae
 8007e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	4798      	blx	r3
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e5e:	e156      	b.n	800810e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	785b      	ldrb	r3, [r3, #1]
 8007e64:	2b03      	cmp	r3, #3
 8007e66:	d008      	beq.n	8007e7a <USBD_StdEPReq+0x9a>
 8007e68:	2b03      	cmp	r3, #3
 8007e6a:	f300 8145 	bgt.w	80080f8 <USBD_StdEPReq+0x318>
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f000 809b 	beq.w	8007faa <USBD_StdEPReq+0x1ca>
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d03c      	beq.n	8007ef2 <USBD_StdEPReq+0x112>
 8007e78:	e13e      	b.n	80080f8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d002      	beq.n	8007e8c <USBD_StdEPReq+0xac>
 8007e86:	2b03      	cmp	r3, #3
 8007e88:	d016      	beq.n	8007eb8 <USBD_StdEPReq+0xd8>
 8007e8a:	e02c      	b.n	8007ee6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e8c:	7bbb      	ldrb	r3, [r7, #14]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00d      	beq.n	8007eae <USBD_StdEPReq+0xce>
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	2b80      	cmp	r3, #128	@ 0x80
 8007e96:	d00a      	beq.n	8007eae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e98:	7bbb      	ldrb	r3, [r7, #14]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f001 fa23 	bl	80092e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ea2:	2180      	movs	r1, #128	@ 0x80
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f001 fa1f 	bl	80092e8 <USBD_LL_StallEP>
 8007eaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007eac:	e020      	b.n	8007ef0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fcca 	bl	800884a <USBD_CtlError>
              break;
 8007eb6:	e01b      	b.n	8007ef0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	885b      	ldrh	r3, [r3, #2]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10e      	bne.n	8007ede <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00b      	beq.n	8007ede <USBD_StdEPReq+0xfe>
 8007ec6:	7bbb      	ldrb	r3, [r7, #14]
 8007ec8:	2b80      	cmp	r3, #128	@ 0x80
 8007eca:	d008      	beq.n	8007ede <USBD_StdEPReq+0xfe>
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	88db      	ldrh	r3, [r3, #6]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d104      	bne.n	8007ede <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ed4:	7bbb      	ldrb	r3, [r7, #14]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f001 fa05 	bl	80092e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fd8a 	bl	80089f8 <USBD_CtlSendStatus>

              break;
 8007ee4:	e004      	b.n	8007ef0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fcae 	bl	800884a <USBD_CtlError>
              break;
 8007eee:	bf00      	nop
          }
          break;
 8007ef0:	e107      	b.n	8008102 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d002      	beq.n	8007f04 <USBD_StdEPReq+0x124>
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d016      	beq.n	8007f30 <USBD_StdEPReq+0x150>
 8007f02:	e04b      	b.n	8007f9c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00d      	beq.n	8007f26 <USBD_StdEPReq+0x146>
 8007f0a:	7bbb      	ldrb	r3, [r7, #14]
 8007f0c:	2b80      	cmp	r3, #128	@ 0x80
 8007f0e:	d00a      	beq.n	8007f26 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f10:	7bbb      	ldrb	r3, [r7, #14]
 8007f12:	4619      	mov	r1, r3
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f001 f9e7 	bl	80092e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f1a:	2180      	movs	r1, #128	@ 0x80
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f001 f9e3 	bl	80092e8 <USBD_LL_StallEP>
 8007f22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f24:	e040      	b.n	8007fa8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fc8e 	bl	800884a <USBD_CtlError>
              break;
 8007f2e:	e03b      	b.n	8007fa8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	885b      	ldrh	r3, [r3, #2]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d136      	bne.n	8007fa6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f38:	7bbb      	ldrb	r3, [r7, #14]
 8007f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d004      	beq.n	8007f4c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f42:	7bbb      	ldrb	r3, [r7, #14]
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f001 f9ed 	bl	8009326 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fd53 	bl	80089f8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f52:	7bbb      	ldrb	r3, [r7, #14]
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7ff fe1c 	bl	8007b94 <USBD_CoreFindEP>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f60:	7b7b      	ldrb	r3, [r7, #13]
 8007f62:	2bff      	cmp	r3, #255	@ 0xff
 8007f64:	d01f      	beq.n	8007fa6 <USBD_StdEPReq+0x1c6>
 8007f66:	7b7b      	ldrb	r3, [r7, #13]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d11c      	bne.n	8007fa6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007f6c:	7b7a      	ldrb	r2, [r7, #13]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007f74:	7b7a      	ldrb	r2, [r7, #13]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	32ae      	adds	r2, #174	@ 0xae
 8007f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d010      	beq.n	8007fa6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007f84:	7b7a      	ldrb	r2, [r7, #13]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	32ae      	adds	r2, #174	@ 0xae
 8007f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	4798      	blx	r3
 8007f96:	4603      	mov	r3, r0
 8007f98:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007f9a:	e004      	b.n	8007fa6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fc53 	bl	800884a <USBD_CtlError>
              break;
 8007fa4:	e000      	b.n	8007fa8 <USBD_StdEPReq+0x1c8>
              break;
 8007fa6:	bf00      	nop
          }
          break;
 8007fa8:	e0ab      	b.n	8008102 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d002      	beq.n	8007fbc <USBD_StdEPReq+0x1dc>
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	d032      	beq.n	8008020 <USBD_StdEPReq+0x240>
 8007fba:	e097      	b.n	80080ec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fbc:	7bbb      	ldrb	r3, [r7, #14]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d007      	beq.n	8007fd2 <USBD_StdEPReq+0x1f2>
 8007fc2:	7bbb      	ldrb	r3, [r7, #14]
 8007fc4:	2b80      	cmp	r3, #128	@ 0x80
 8007fc6:	d004      	beq.n	8007fd2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fc3d 	bl	800884a <USBD_CtlError>
                break;
 8007fd0:	e091      	b.n	80080f6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	da0b      	bge.n	8007ff2 <USBD_StdEPReq+0x212>
 8007fda:	7bbb      	ldrb	r3, [r7, #14]
 8007fdc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4413      	add	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	3310      	adds	r3, #16
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	4413      	add	r3, r2
 8007fee:	3304      	adds	r3, #4
 8007ff0:	e00b      	b.n	800800a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ff2:	7bbb      	ldrb	r3, [r7, #14]
 8007ff4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	4413      	add	r3, r2
 8008008:	3304      	adds	r3, #4
 800800a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	2200      	movs	r2, #0
 8008010:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	2202      	movs	r2, #2
 8008016:	4619      	mov	r1, r3
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fc93 	bl	8008944 <USBD_CtlSendData>
              break;
 800801e:	e06a      	b.n	80080f6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008024:	2b00      	cmp	r3, #0
 8008026:	da11      	bge.n	800804c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008028:	7bbb      	ldrb	r3, [r7, #14]
 800802a:	f003 020f 	and.w	r2, r3, #15
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	4613      	mov	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	440b      	add	r3, r1
 800803a:	3324      	adds	r3, #36	@ 0x24
 800803c:	881b      	ldrh	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d117      	bne.n	8008072 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fc00 	bl	800884a <USBD_CtlError>
                  break;
 800804a:	e054      	b.n	80080f6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800804c:	7bbb      	ldrb	r3, [r7, #14]
 800804e:	f003 020f 	and.w	r2, r3, #15
 8008052:	6879      	ldr	r1, [r7, #4]
 8008054:	4613      	mov	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4413      	add	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	440b      	add	r3, r1
 800805e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008062:	881b      	ldrh	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d104      	bne.n	8008072 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fbed 	bl	800884a <USBD_CtlError>
                  break;
 8008070:	e041      	b.n	80080f6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008072:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008076:	2b00      	cmp	r3, #0
 8008078:	da0b      	bge.n	8008092 <USBD_StdEPReq+0x2b2>
 800807a:	7bbb      	ldrb	r3, [r7, #14]
 800807c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008080:	4613      	mov	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	3310      	adds	r3, #16
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	4413      	add	r3, r2
 800808e:	3304      	adds	r3, #4
 8008090:	e00b      	b.n	80080aa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008092:	7bbb      	ldrb	r3, [r7, #14]
 8008094:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008098:	4613      	mov	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	4413      	add	r3, r2
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	4413      	add	r3, r2
 80080a8:	3304      	adds	r3, #4
 80080aa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d002      	beq.n	80080b8 <USBD_StdEPReq+0x2d8>
 80080b2:	7bbb      	ldrb	r3, [r7, #14]
 80080b4:	2b80      	cmp	r3, #128	@ 0x80
 80080b6:	d103      	bne.n	80080c0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2200      	movs	r2, #0
 80080bc:	601a      	str	r2, [r3, #0]
 80080be:	e00e      	b.n	80080de <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f001 f94d 	bl	8009364 <USBD_LL_IsStallEP>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d003      	beq.n	80080d8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2201      	movs	r2, #1
 80080d4:	601a      	str	r2, [r3, #0]
 80080d6:	e002      	b.n	80080de <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2200      	movs	r2, #0
 80080dc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	2202      	movs	r2, #2
 80080e2:	4619      	mov	r1, r3
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fc2d 	bl	8008944 <USBD_CtlSendData>
              break;
 80080ea:	e004      	b.n	80080f6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80080ec:	6839      	ldr	r1, [r7, #0]
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fbab 	bl	800884a <USBD_CtlError>
              break;
 80080f4:	bf00      	nop
          }
          break;
 80080f6:	e004      	b.n	8008102 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fba5 	bl	800884a <USBD_CtlError>
          break;
 8008100:	bf00      	nop
      }
      break;
 8008102:	e005      	b.n	8008110 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fb9f 	bl	800884a <USBD_CtlError>
      break;
 800810c:	e000      	b.n	8008110 <USBD_StdEPReq+0x330>
      break;
 800810e:	bf00      	nop
  }

  return ret;
 8008110:	7bfb      	ldrb	r3, [r7, #15]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
	...

0800811c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008126:	2300      	movs	r3, #0
 8008128:	817b      	strh	r3, [r7, #10]
  uint8_t *pbuf = NULL;
 800812a:	2300      	movs	r3, #0
 800812c:	617b      	str	r3, [r7, #20]
  uint8_t err = 0U;
 800812e:	2300      	movs	r3, #0
 8008130:	74fb      	strb	r3, [r7, #19]

  switch (req->wValue >> 8)
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	885b      	ldrh	r3, [r3, #2]
 8008136:	0a1b      	lsrs	r3, r3, #8
 8008138:	b29b      	uxth	r3, r3
 800813a:	3b01      	subs	r3, #1
 800813c:	2b0e      	cmp	r3, #14
 800813e:	f200 8179 	bhi.w	8008434 <USBD_GetDescriptor+0x318>
 8008142:	a201      	add	r2, pc, #4	@ (adr r2, 8008148 <USBD_GetDescriptor+0x2c>)
 8008144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008148:	080081b9 	.word	0x080081b9
 800814c:	080081d1 	.word	0x080081d1
 8008150:	08008211 	.word	0x08008211
 8008154:	08008435 	.word	0x08008435
 8008158:	08008435 	.word	0x08008435
 800815c:	080083d5 	.word	0x080083d5
 8008160:	08008401 	.word	0x08008401
 8008164:	08008435 	.word	0x08008435
 8008168:	08008435 	.word	0x08008435
 800816c:	08008435 	.word	0x08008435
 8008170:	08008435 	.word	0x08008435
 8008174:	08008435 	.word	0x08008435
 8008178:	08008435 	.word	0x08008435
 800817c:	08008435 	.word	0x08008435
 8008180:	08008185 	.word	0x08008185
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800818a:	69db      	ldr	r3, [r3, #28]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00b      	beq.n	80081a8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008196:	69db      	ldr	r3, [r3, #28]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	7c12      	ldrb	r2, [r2, #16]
 800819c:	f107 010a 	add.w	r1, r7, #10
 80081a0:	4610      	mov	r0, r2
 80081a2:	4798      	blx	r3
 80081a4:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081a6:	e14d      	b.n	8008444 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fb4d 	bl	800884a <USBD_CtlError>
        err++;
 80081b0:	7cfb      	ldrb	r3, [r7, #19]
 80081b2:	3301      	adds	r3, #1
 80081b4:	74fb      	strb	r3, [r7, #19]
      break;
 80081b6:	e145      	b.n	8008444 <USBD_GetDescriptor+0x328>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	7c12      	ldrb	r2, [r2, #16]
 80081c4:	f107 010a 	add.w	r1, r7, #10
 80081c8:	4610      	mov	r0, r2
 80081ca:	4798      	blx	r3
 80081cc:	6178      	str	r0, [r7, #20]
      break;
 80081ce:	e139      	b.n	8008444 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	7c1b      	ldrb	r3, [r3, #16]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10d      	bne.n	80081f4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e0:	f107 020a 	add.w	r2, r7, #10
 80081e4:	4610      	mov	r0, r2
 80081e6:	4798      	blx	r3
 80081e8:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	3301      	adds	r3, #1
 80081ee:	2202      	movs	r2, #2
 80081f0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80081f2:	e127      	b.n	8008444 <USBD_GetDescriptor+0x328>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fc:	f107 020a 	add.w	r2, r7, #10
 8008200:	4610      	mov	r0, r2
 8008202:	4798      	blx	r3
 8008204:	6178      	str	r0, [r7, #20]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	3301      	adds	r3, #1
 800820a:	2202      	movs	r2, #2
 800820c:	701a      	strb	r2, [r3, #0]
      break;
 800820e:	e119      	b.n	8008444 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	885b      	ldrh	r3, [r3, #2]
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b05      	cmp	r3, #5
 8008218:	f200 80ac 	bhi.w	8008374 <USBD_GetDescriptor+0x258>
 800821c:	a201      	add	r2, pc, #4	@ (adr r2, 8008224 <USBD_GetDescriptor+0x108>)
 800821e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008222:	bf00      	nop
 8008224:	0800823d 	.word	0x0800823d
 8008228:	08008271 	.word	0x08008271
 800822c:	080082a5 	.word	0x080082a5
 8008230:	080082d9 	.word	0x080082d9
 8008234:	0800830d 	.word	0x0800830d
 8008238:	08008341 	.word	0x08008341
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00b      	beq.n	8008260 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	7c12      	ldrb	r2, [r2, #16]
 8008254:	f107 010a 	add.w	r1, r7, #10
 8008258:	4610      	mov	r0, r2
 800825a:	4798      	blx	r3
 800825c:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800825e:	e0b8      	b.n	80083d2 <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 faf1 	bl	800884a <USBD_CtlError>
            err++;
 8008268:	7cfb      	ldrb	r3, [r7, #19]
 800826a:	3301      	adds	r3, #1
 800826c:	74fb      	strb	r3, [r7, #19]
          break;
 800826e:	e0b0      	b.n	80083d2 <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00b      	beq.n	8008294 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	7c12      	ldrb	r2, [r2, #16]
 8008288:	f107 010a 	add.w	r1, r7, #10
 800828c:	4610      	mov	r0, r2
 800828e:	4798      	blx	r3
 8008290:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008292:	e09e      	b.n	80083d2 <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 8008294:	6839      	ldr	r1, [r7, #0]
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fad7 	bl	800884a <USBD_CtlError>
            err++;
 800829c:	7cfb      	ldrb	r3, [r7, #19]
 800829e:	3301      	adds	r3, #1
 80082a0:	74fb      	strb	r3, [r7, #19]
          break;
 80082a2:	e096      	b.n	80083d2 <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00b      	beq.n	80082c8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	7c12      	ldrb	r2, [r2, #16]
 80082bc:	f107 010a 	add.w	r1, r7, #10
 80082c0:	4610      	mov	r0, r2
 80082c2:	4798      	blx	r3
 80082c4:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082c6:	e084      	b.n	80083d2 <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fabd 	bl	800884a <USBD_CtlError>
            err++;
 80082d0:	7cfb      	ldrb	r3, [r7, #19]
 80082d2:	3301      	adds	r3, #1
 80082d4:	74fb      	strb	r3, [r7, #19]
          break;
 80082d6:	e07c      	b.n	80083d2 <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00b      	beq.n	80082fc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	7c12      	ldrb	r2, [r2, #16]
 80082f0:	f107 010a 	add.w	r1, r7, #10
 80082f4:	4610      	mov	r0, r2
 80082f6:	4798      	blx	r3
 80082f8:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082fa:	e06a      	b.n	80083d2 <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 80082fc:	6839      	ldr	r1, [r7, #0]
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 faa3 	bl	800884a <USBD_CtlError>
            err++;
 8008304:	7cfb      	ldrb	r3, [r7, #19]
 8008306:	3301      	adds	r3, #1
 8008308:	74fb      	strb	r3, [r7, #19]
          break;
 800830a:	e062      	b.n	80083d2 <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00b      	beq.n	8008330 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	7c12      	ldrb	r2, [r2, #16]
 8008324:	f107 010a 	add.w	r1, r7, #10
 8008328:	4610      	mov	r0, r2
 800832a:	4798      	blx	r3
 800832c:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800832e:	e050      	b.n	80083d2 <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fa89 	bl	800884a <USBD_CtlError>
            err++;
 8008338:	7cfb      	ldrb	r3, [r7, #19]
 800833a:	3301      	adds	r3, #1
 800833c:	74fb      	strb	r3, [r7, #19]
          break;
 800833e:	e048      	b.n	80083d2 <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00b      	beq.n	8008364 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	7c12      	ldrb	r2, [r2, #16]
 8008358:	f107 010a 	add.w	r1, r7, #10
 800835c:	4610      	mov	r0, r2
 800835e:	4798      	blx	r3
 8008360:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008362:	e036      	b.n	80083d2 <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fa6f 	bl	800884a <USBD_CtlError>
            err++;
 800836c:	7cfb      	ldrb	r3, [r7, #19]
 800836e:	3301      	adds	r3, #1
 8008370:	74fb      	strb	r3, [r7, #19]
          break;
 8008372:	e02e      	b.n	80083d2 <USBD_GetDescriptor+0x2b6>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          pbuf = NULL;
 8008374:	2300      	movs	r3, #0
 8008376:	617b      	str	r3, [r7, #20]

          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 8008378:	2300      	movs	r3, #0
 800837a:	60fb      	str	r3, [r7, #12]
 800837c:	e020      	b.n	80083c0 <USBD_GetDescriptor+0x2a4>
          {
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	32ae      	adds	r2, #174	@ 0xae
 8008384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800838a:	2b00      	cmp	r3, #0
 800838c:	d015      	beq.n	80083ba <USBD_GetDescriptor+0x29e>
            {
              pdev->classId = idx;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	32ae      	adds	r2, #174	@ 0xae
 800839c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083a2:	683a      	ldr	r2, [r7, #0]
 80083a4:	8852      	ldrh	r2, [r2, #2]
 80083a6:	b2d1      	uxtb	r1, r2
 80083a8:	f107 020a 	add.w	r2, r7, #10
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	4798      	blx	r3
 80083b0:	6178      	str	r0, [r7, #20]

              if (pbuf == NULL) /* This means that no class recognized the string index */
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10a      	bne.n	80083ce <USBD_GetDescriptor+0x2b2>
              {
                continue;
 80083b8:	bf00      	nop
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	3301      	adds	r3, #1
 80083be:	60fb      	str	r3, [r7, #12]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d3d8      	bcc.n	800837e <USBD_GetDescriptor+0x262>

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80083cc:	e000      	b.n	80083d0 <USBD_GetDescriptor+0x2b4>
                break;
 80083ce:	bf00      	nop
          break;
 80083d0:	bf00      	nop
      }
      break;
 80083d2:	e037      	b.n	8008444 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	7c1b      	ldrb	r3, [r3, #16]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d109      	bne.n	80083f0 <USBD_GetDescriptor+0x2d4>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083e4:	f107 020a 	add.w	r2, r7, #10
 80083e8:	4610      	mov	r0, r2
 80083ea:	4798      	blx	r3
 80083ec:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083ee:	e029      	b.n	8008444 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fa29 	bl	800884a <USBD_CtlError>
        err++;
 80083f8:	7cfb      	ldrb	r3, [r7, #19]
 80083fa:	3301      	adds	r3, #1
 80083fc:	74fb      	strb	r3, [r7, #19]
      break;
 80083fe:	e021      	b.n	8008444 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	7c1b      	ldrb	r3, [r3, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d10d      	bne.n	8008424 <USBD_GetDescriptor+0x308>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800840e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008410:	f107 020a 	add.w	r2, r7, #10
 8008414:	4610      	mov	r0, r2
 8008416:	4798      	blx	r3
 8008418:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	3301      	adds	r3, #1
 800841e:	2207      	movs	r2, #7
 8008420:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008422:	e00f      	b.n	8008444 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 8008424:	6839      	ldr	r1, [r7, #0]
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fa0f 	bl	800884a <USBD_CtlError>
        err++;
 800842c:	7cfb      	ldrb	r3, [r7, #19]
 800842e:	3301      	adds	r3, #1
 8008430:	74fb      	strb	r3, [r7, #19]
      break;
 8008432:	e007      	b.n	8008444 <USBD_GetDescriptor+0x328>

    default:
      USBD_CtlError(pdev, req);
 8008434:	6839      	ldr	r1, [r7, #0]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fa07 	bl	800884a <USBD_CtlError>
      err++;
 800843c:	7cfb      	ldrb	r3, [r7, #19]
 800843e:	3301      	adds	r3, #1
 8008440:	74fb      	strb	r3, [r7, #19]
      break;
 8008442:	bf00      	nop
  }

  if (err != 0U)
 8008444:	7cfb      	ldrb	r3, [r7, #19]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d11e      	bne.n	8008488 <USBD_GetDescriptor+0x36c>
  {
    return;
  }

  if (req->wLength != 0U)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	88db      	ldrh	r3, [r3, #6]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d016      	beq.n	8008480 <USBD_GetDescriptor+0x364>
  {
    if (len != 0U)
 8008452:	897b      	ldrh	r3, [r7, #10]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00e      	beq.n	8008476 <USBD_GetDescriptor+0x35a>
    {
      len = MIN(len, req->wLength);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	88da      	ldrh	r2, [r3, #6]
 800845c:	897b      	ldrh	r3, [r7, #10]
 800845e:	4293      	cmp	r3, r2
 8008460:	bf28      	it	cs
 8008462:	4613      	movcs	r3, r2
 8008464:	b29b      	uxth	r3, r3
 8008466:	817b      	strh	r3, [r7, #10]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008468:	897b      	ldrh	r3, [r7, #10]
 800846a:	461a      	mov	r2, r3
 800846c:	6979      	ldr	r1, [r7, #20]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fa68 	bl	8008944 <USBD_CtlSendData>
 8008474:	e009      	b.n	800848a <USBD_GetDescriptor+0x36e>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f9e6 	bl	800884a <USBD_CtlError>
 800847e:	e004      	b.n	800848a <USBD_GetDescriptor+0x36e>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fab9 	bl	80089f8 <USBD_CtlSendStatus>
 8008486:	e000      	b.n	800848a <USBD_GetDescriptor+0x36e>
    return;
 8008488:	bf00      	nop
  }
}
 800848a:	3718      	adds	r7, #24
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	889b      	ldrh	r3, [r3, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d131      	bne.n	8008506 <USBD_SetAddress+0x76>
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	88db      	ldrh	r3, [r3, #6]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d12d      	bne.n	8008506 <USBD_SetAddress+0x76>
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	885b      	ldrh	r3, [r3, #2]
 80084ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80084b0:	d829      	bhi.n	8008506 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	885b      	ldrh	r3, [r3, #2]
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	2b03      	cmp	r3, #3
 80084c8:	d104      	bne.n	80084d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f9bc 	bl	800884a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084d2:	e01d      	b.n	8008510 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	7bfa      	ldrb	r2, [r7, #15]
 80084d8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 ff6b 	bl	80093bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fa86 	bl	80089f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d004      	beq.n	80084fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2202      	movs	r2, #2
 80084f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084fa:	e009      	b.n	8008510 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008504:	e004      	b.n	8008510 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f99e 	bl	800884a <USBD_CtlError>
  }
}
 800850e:	bf00      	nop
 8008510:	bf00      	nop
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	885b      	ldrh	r3, [r3, #2]
 800852a:	b2da      	uxtb	r2, r3
 800852c:	4b4e      	ldr	r3, [pc, #312]	@ (8008668 <USBD_SetConfig+0x150>)
 800852e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008530:	4b4d      	ldr	r3, [pc, #308]	@ (8008668 <USBD_SetConfig+0x150>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d905      	bls.n	8008544 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008538:	6839      	ldr	r1, [r7, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f985 	bl	800884a <USBD_CtlError>
    return USBD_FAIL;
 8008540:	2303      	movs	r3, #3
 8008542:	e08c      	b.n	800865e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b02      	cmp	r3, #2
 800854e:	d002      	beq.n	8008556 <USBD_SetConfig+0x3e>
 8008550:	2b03      	cmp	r3, #3
 8008552:	d029      	beq.n	80085a8 <USBD_SetConfig+0x90>
 8008554:	e075      	b.n	8008642 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008556:	4b44      	ldr	r3, [pc, #272]	@ (8008668 <USBD_SetConfig+0x150>)
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d020      	beq.n	80085a0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800855e:	4b42      	ldr	r3, [pc, #264]	@ (8008668 <USBD_SetConfig+0x150>)
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	461a      	mov	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008568:	4b3f      	ldr	r3, [pc, #252]	@ (8008668 <USBD_SetConfig+0x150>)
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7fe ffcb 	bl	800750a <USBD_SetClassConfig>
 8008574:	4603      	mov	r3, r0
 8008576:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008578:	7bfb      	ldrb	r3, [r7, #15]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d008      	beq.n	8008590 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800857e:	6839      	ldr	r1, [r7, #0]
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f962 	bl	800884a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2202      	movs	r2, #2
 800858a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800858e:	e065      	b.n	800865c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fa31 	bl	80089f8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2203      	movs	r2, #3
 800859a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800859e:	e05d      	b.n	800865c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fa29 	bl	80089f8 <USBD_CtlSendStatus>
      break;
 80085a6:	e059      	b.n	800865c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80085a8:	4b2f      	ldr	r3, [pc, #188]	@ (8008668 <USBD_SetConfig+0x150>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d112      	bne.n	80085d6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2202      	movs	r2, #2
 80085b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80085b8:	4b2b      	ldr	r3, [pc, #172]	@ (8008668 <USBD_SetConfig+0x150>)
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	461a      	mov	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085c2:	4b29      	ldr	r3, [pc, #164]	@ (8008668 <USBD_SetConfig+0x150>)
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	4619      	mov	r1, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f7fe ffba 	bl	8007542 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fa12 	bl	80089f8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085d4:	e042      	b.n	800865c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80085d6:	4b24      	ldr	r3, [pc, #144]	@ (8008668 <USBD_SetConfig+0x150>)
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	461a      	mov	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d02a      	beq.n	800863a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7fe ffa8 	bl	8007542 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80085f2:	4b1d      	ldr	r3, [pc, #116]	@ (8008668 <USBD_SetConfig+0x150>)
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	461a      	mov	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008668 <USBD_SetConfig+0x150>)
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7fe ff81 	bl	800750a <USBD_SetClassConfig>
 8008608:	4603      	mov	r3, r0
 800860a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00f      	beq.n	8008632 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008612:	6839      	ldr	r1, [r7, #0]
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 f918 	bl	800884a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	b2db      	uxtb	r3, r3
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7fe ff8d 	bl	8007542 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2202      	movs	r2, #2
 800862c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008630:	e014      	b.n	800865c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 f9e0 	bl	80089f8 <USBD_CtlSendStatus>
      break;
 8008638:	e010      	b.n	800865c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f9dc 	bl	80089f8 <USBD_CtlSendStatus>
      break;
 8008640:	e00c      	b.n	800865c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008642:	6839      	ldr	r1, [r7, #0]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f900 	bl	800884a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800864a:	4b07      	ldr	r3, [pc, #28]	@ (8008668 <USBD_SetConfig+0x150>)
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	4619      	mov	r1, r3
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f7fe ff76 	bl	8007542 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008656:	2303      	movs	r3, #3
 8008658:	73fb      	strb	r3, [r7, #15]
      break;
 800865a:	bf00      	nop
  }

  return ret;
 800865c:	7bfb      	ldrb	r3, [r7, #15]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	240002eb 	.word	0x240002eb

0800866c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	88db      	ldrh	r3, [r3, #6]
 800867a:	2b01      	cmp	r3, #1
 800867c:	d004      	beq.n	8008688 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f8e2 	bl	800884a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008686:	e023      	b.n	80086d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800868e:	b2db      	uxtb	r3, r3
 8008690:	2b02      	cmp	r3, #2
 8008692:	dc02      	bgt.n	800869a <USBD_GetConfig+0x2e>
 8008694:	2b00      	cmp	r3, #0
 8008696:	dc03      	bgt.n	80086a0 <USBD_GetConfig+0x34>
 8008698:	e015      	b.n	80086c6 <USBD_GetConfig+0x5a>
 800869a:	2b03      	cmp	r3, #3
 800869c:	d00b      	beq.n	80086b6 <USBD_GetConfig+0x4a>
 800869e:	e012      	b.n	80086c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	3308      	adds	r3, #8
 80086aa:	2201      	movs	r2, #1
 80086ac:	4619      	mov	r1, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f948 	bl	8008944 <USBD_CtlSendData>
        break;
 80086b4:	e00c      	b.n	80086d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	3304      	adds	r3, #4
 80086ba:	2201      	movs	r2, #1
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f940 	bl	8008944 <USBD_CtlSendData>
        break;
 80086c4:	e004      	b.n	80086d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f8be 	bl	800884a <USBD_CtlError>
        break;
 80086ce:	bf00      	nop
}
 80086d0:	bf00      	nop
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	3b01      	subs	r3, #1
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d81e      	bhi.n	800872e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	88db      	ldrh	r3, [r3, #6]
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d004      	beq.n	8008702 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f8a5 	bl	800884a <USBD_CtlError>
        break;
 8008700:	e01a      	b.n	8008738 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800870e:	2b00      	cmp	r3, #0
 8008710:	d005      	beq.n	800871e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	f043 0202 	orr.w	r2, r3, #2
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	330c      	adds	r3, #12
 8008722:	2202      	movs	r2, #2
 8008724:	4619      	mov	r1, r3
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f90c 	bl	8008944 <USBD_CtlSendData>
      break;
 800872c:	e004      	b.n	8008738 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f88a 	bl	800884a <USBD_CtlError>
      break;
 8008736:	bf00      	nop
  }
}
 8008738:	bf00      	nop
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	885b      	ldrh	r3, [r3, #2]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d107      	bne.n	8008762 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f94c 	bl	80089f8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008760:	e013      	b.n	800878a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	885b      	ldrh	r3, [r3, #2]
 8008766:	2b02      	cmp	r3, #2
 8008768:	d10b      	bne.n	8008782 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	889b      	ldrh	r3, [r3, #4]
 800876e:	0a1b      	lsrs	r3, r3, #8
 8008770:	b29b      	uxth	r3, r3
 8008772:	b2da      	uxtb	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f93c 	bl	80089f8 <USBD_CtlSendStatus>
}
 8008780:	e003      	b.n	800878a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f860 	bl	800884a <USBD_CtlError>
}
 800878a:	bf00      	nop
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b082      	sub	sp, #8
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	3b01      	subs	r3, #1
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d80b      	bhi.n	80087c2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	885b      	ldrh	r3, [r3, #2]
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d10c      	bne.n	80087cc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f91c 	bl	80089f8 <USBD_CtlSendStatus>
      }
      break;
 80087c0:	e004      	b.n	80087cc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 f840 	bl	800884a <USBD_CtlError>
      break;
 80087ca:	e000      	b.n	80087ce <USBD_ClrFeature+0x3c>
      break;
 80087cc:	bf00      	nop
  }
}
 80087ce:	bf00      	nop
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b084      	sub	sp, #16
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	781a      	ldrb	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	3301      	adds	r3, #1
 80087f0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	781a      	ldrb	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	3301      	adds	r3, #1
 80087fe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f7ff f9f0 	bl	8007be6 <SWAPBYTE>
 8008806:	4603      	mov	r3, r0
 8008808:	461a      	mov	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	3301      	adds	r3, #1
 8008812:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	3301      	adds	r3, #1
 8008818:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f7ff f9e3 	bl	8007be6 <SWAPBYTE>
 8008820:	4603      	mov	r3, r0
 8008822:	461a      	mov	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	3301      	adds	r3, #1
 800882c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3301      	adds	r3, #1
 8008832:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f7ff f9d6 	bl	8007be6 <SWAPBYTE>
 800883a:	4603      	mov	r3, r0
 800883c:	461a      	mov	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	80da      	strh	r2, [r3, #6]
}
 8008842:	bf00      	nop
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b082      	sub	sp, #8
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
 8008852:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008854:	2180      	movs	r1, #128	@ 0x80
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fd46 	bl	80092e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800885c:	2100      	movs	r1, #0
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fd42 	bl	80092e8 <USBD_LL_StallEP>
}
 8008864:	bf00      	nop
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b086      	sub	sp, #24
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008878:	2300      	movs	r3, #0
 800887a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d042      	beq.n	8008908 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008886:	6938      	ldr	r0, [r7, #16]
 8008888:	f000 f842 	bl	8008910 <USBD_GetLen>
 800888c:	4603      	mov	r3, r0
 800888e:	3301      	adds	r3, #1
 8008890:	005b      	lsls	r3, r3, #1
 8008892:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008896:	d808      	bhi.n	80088aa <USBD_GetString+0x3e>
 8008898:	6938      	ldr	r0, [r7, #16]
 800889a:	f000 f839 	bl	8008910 <USBD_GetLen>
 800889e:	4603      	mov	r3, r0
 80088a0:	3301      	adds	r3, #1
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	005b      	lsls	r3, r3, #1
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	e001      	b.n	80088ae <USBD_GetString+0x42>
 80088aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	4413      	add	r3, r2
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	7812      	ldrb	r2, [r2, #0]
 80088bc:	701a      	strb	r2, [r3, #0]
  idx++;
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	3301      	adds	r3, #1
 80088c2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80088c4:	7dfb      	ldrb	r3, [r7, #23]
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	4413      	add	r3, r2
 80088ca:	2203      	movs	r2, #3
 80088cc:	701a      	strb	r2, [r3, #0]
  idx++;
 80088ce:	7dfb      	ldrb	r3, [r7, #23]
 80088d0:	3301      	adds	r3, #1
 80088d2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80088d4:	e013      	b.n	80088fe <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	4413      	add	r3, r2
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	7812      	ldrb	r2, [r2, #0]
 80088e0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	3301      	adds	r3, #1
 80088e6:	613b      	str	r3, [r7, #16]
    idx++;
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
 80088ea:	3301      	adds	r3, #1
 80088ec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	4413      	add	r3, r2
 80088f4:	2200      	movs	r2, #0
 80088f6:	701a      	strb	r2, [r3, #0]
    idx++;
 80088f8:	7dfb      	ldrb	r3, [r7, #23]
 80088fa:	3301      	adds	r3, #1
 80088fc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1e7      	bne.n	80088d6 <USBD_GetString+0x6a>
 8008906:	e000      	b.n	800890a <USBD_GetString+0x9e>
    return;
 8008908:	bf00      	nop
  }
}
 800890a:	3718      	adds	r7, #24
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008918:	2300      	movs	r3, #0
 800891a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008920:	e005      	b.n	800892e <USBD_GetLen+0x1e>
  {
    len++;
 8008922:	7bfb      	ldrb	r3, [r7, #15]
 8008924:	3301      	adds	r3, #1
 8008926:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	3301      	adds	r3, #1
 800892c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1f5      	bne.n	8008922 <USBD_GetLen+0x12>
  }

  return len;
 8008936:	7bfb      	ldrb	r3, [r7, #15]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2202      	movs	r2, #2
 8008954:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	68ba      	ldr	r2, [r7, #8]
 8008968:	2100      	movs	r1, #0
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f000 fd45 	bl	80093fa <USBD_LL_Transmit>

  return USBD_OK;
 8008970:	2300      	movs	r3, #0
}
 8008972:	4618      	mov	r0, r3
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b084      	sub	sp, #16
 800897e:	af00      	add	r7, sp, #0
 8008980:	60f8      	str	r0, [r7, #12]
 8008982:	60b9      	str	r1, [r7, #8]
 8008984:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	2100      	movs	r1, #0
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f000 fd34 	bl	80093fa <USBD_LL_Transmit>

  return USBD_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2203      	movs	r2, #3
 80089ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	2100      	movs	r1, #0
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f000 fd38 	bl	800943c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b084      	sub	sp, #16
 80089da:	af00      	add	r7, sp, #0
 80089dc:	60f8      	str	r0, [r7, #12]
 80089de:	60b9      	str	r1, [r7, #8]
 80089e0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	2100      	movs	r1, #0
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f000 fd27 	bl	800943c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2204      	movs	r2, #4
 8008a04:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a08:	2300      	movs	r3, #0
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fcf3 	bl	80093fa <USBD_LL_Transmit>

  return USBD_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b082      	sub	sp, #8
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2205      	movs	r2, #5
 8008a2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a2e:	2300      	movs	r3, #0
 8008a30:	2200      	movs	r2, #0
 8008a32:	2100      	movs	r1, #0
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fd01 	bl	800943c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8008a48:	2201      	movs	r2, #1
 8008a4a:	4913      	ldr	r1, [pc, #76]	@ (8008a98 <MX_USB_DEVICE_Init+0x54>)
 8008a4c:	4813      	ldr	r0, [pc, #76]	@ (8008a9c <MX_USB_DEVICE_Init+0x58>)
 8008a4e:	f7fe fcc4 	bl	80073da <USBD_Init>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d001      	beq.n	8008a5c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a58:	f7f7 fe04 	bl	8000664 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_DFU) != USBD_OK)
 8008a5c:	4910      	ldr	r1, [pc, #64]	@ (8008aa0 <MX_USB_DEVICE_Init+0x5c>)
 8008a5e:	480f      	ldr	r0, [pc, #60]	@ (8008a9c <MX_USB_DEVICE_Init+0x58>)
 8008a60:	f7fe fceb 	bl	800743a <USBD_RegisterClass>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d001      	beq.n	8008a6e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a6a:	f7f7 fdfb 	bl	8000664 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceHS, &USBD_DFU_fops_HS) != USBD_OK)
 8008a6e:	490d      	ldr	r1, [pc, #52]	@ (8008aa4 <MX_USB_DEVICE_Init+0x60>)
 8008a70:	480a      	ldr	r0, [pc, #40]	@ (8008a9c <MX_USB_DEVICE_Init+0x58>)
 8008a72:	f7fd ffdf 	bl	8006a34 <USBD_DFU_RegisterMedia>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d001      	beq.n	8008a80 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008a7c:	f7f7 fdf2 	bl	8000664 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8008a80:	4806      	ldr	r0, [pc, #24]	@ (8008a9c <MX_USB_DEVICE_Init+0x58>)
 8008a82:	f7fe fd10 	bl	80074a6 <USBD_Start>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d001      	beq.n	8008a90 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008a8c:	f7f7 fdea 	bl	8000664 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8008a90:	f7f9 fef0 	bl	8002874 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a94:	bf00      	nop
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	24000140 	.word	0x24000140
 8008a9c:	240002ec 	.word	0x240002ec
 8008aa0:	24000010 	.word	0x24000010
 8008aa4:	24000194 	.word	0x24000194

08008aa8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	4603      	mov	r3, r0
 8008ab0:	6039      	str	r1, [r7, #0]
 8008ab2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	2212      	movs	r2, #18
 8008ab8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8008aba:	4b03      	ldr	r3, [pc, #12]	@ (8008ac8 <USBD_HS_DeviceDescriptor+0x20>)
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	24000160 	.word	0x24000160

08008acc <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	6039      	str	r1, [r7, #0]
 8008ad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	2204      	movs	r2, #4
 8008adc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ade:	4b03      	ldr	r3, [pc, #12]	@ (8008aec <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr
 8008aec:	24000174 	.word	0x24000174

08008af0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	4603      	mov	r3, r0
 8008af8:	6039      	str	r1, [r7, #0]
 8008afa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008afc:	79fb      	ldrb	r3, [r7, #7]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d105      	bne.n	8008b0e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	4907      	ldr	r1, [pc, #28]	@ (8008b24 <USBD_HS_ProductStrDescriptor+0x34>)
 8008b06:	4808      	ldr	r0, [pc, #32]	@ (8008b28 <USBD_HS_ProductStrDescriptor+0x38>)
 8008b08:	f7ff feb0 	bl	800886c <USBD_GetString>
 8008b0c:	e004      	b.n	8008b18 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	4904      	ldr	r1, [pc, #16]	@ (8008b24 <USBD_HS_ProductStrDescriptor+0x34>)
 8008b12:	4805      	ldr	r0, [pc, #20]	@ (8008b28 <USBD_HS_ProductStrDescriptor+0x38>)
 8008b14:	f7ff feaa 	bl	800886c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b18:	4b02      	ldr	r3, [pc, #8]	@ (8008b24 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	240005c8 	.word	0x240005c8
 8008b28:	08009578 	.word	0x08009578

08008b2c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	4603      	mov	r3, r0
 8008b34:	6039      	str	r1, [r7, #0]
 8008b36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b38:	683a      	ldr	r2, [r7, #0]
 8008b3a:	4904      	ldr	r1, [pc, #16]	@ (8008b4c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8008b3c:	4804      	ldr	r0, [pc, #16]	@ (8008b50 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8008b3e:	f7ff fe95 	bl	800886c <USBD_GetString>
  return USBD_StrDesc;
 8008b42:	4b02      	ldr	r3, [pc, #8]	@ (8008b4c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	240005c8 	.word	0x240005c8
 8008b50:	08009590 	.word	0x08009590

08008b54 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	6039      	str	r1, [r7, #0]
 8008b5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	221a      	movs	r2, #26
 8008b64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b66:	f000 f843 	bl	8008bf0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008b6a:	4b02      	ldr	r3, [pc, #8]	@ (8008b74 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3708      	adds	r7, #8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	24000178 	.word	0x24000178

08008b78 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	4603      	mov	r3, r0
 8008b80:	6039      	str	r1, [r7, #0]
 8008b82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b84:	79fb      	ldrb	r3, [r7, #7]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d105      	bne.n	8008b96 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8008b8a:	683a      	ldr	r2, [r7, #0]
 8008b8c:	4907      	ldr	r1, [pc, #28]	@ (8008bac <USBD_HS_ConfigStrDescriptor+0x34>)
 8008b8e:	4808      	ldr	r0, [pc, #32]	@ (8008bb0 <USBD_HS_ConfigStrDescriptor+0x38>)
 8008b90:	f7ff fe6c 	bl	800886c <USBD_GetString>
 8008b94:	e004      	b.n	8008ba0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8008b96:	683a      	ldr	r2, [r7, #0]
 8008b98:	4904      	ldr	r1, [pc, #16]	@ (8008bac <USBD_HS_ConfigStrDescriptor+0x34>)
 8008b9a:	4805      	ldr	r0, [pc, #20]	@ (8008bb0 <USBD_HS_ConfigStrDescriptor+0x38>)
 8008b9c:	f7ff fe66 	bl	800886c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ba0:	4b02      	ldr	r3, [pc, #8]	@ (8008bac <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	240005c8 	.word	0x240005c8
 8008bb0:	0800959c 	.word	0x0800959c

08008bb4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	4603      	mov	r3, r0
 8008bbc:	6039      	str	r1, [r7, #0]
 8008bbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bc0:	79fb      	ldrb	r3, [r7, #7]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d105      	bne.n	8008bd2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	4907      	ldr	r1, [pc, #28]	@ (8008be8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8008bca:	4808      	ldr	r0, [pc, #32]	@ (8008bec <USBD_HS_InterfaceStrDescriptor+0x38>)
 8008bcc:	f7ff fe4e 	bl	800886c <USBD_GetString>
 8008bd0:	e004      	b.n	8008bdc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	4904      	ldr	r1, [pc, #16]	@ (8008be8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8008bd6:	4805      	ldr	r0, [pc, #20]	@ (8008bec <USBD_HS_InterfaceStrDescriptor+0x38>)
 8008bd8:	f7ff fe48 	bl	800886c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bdc:	4b02      	ldr	r3, [pc, #8]	@ (8008be8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	240005c8 	.word	0x240005c8
 8008bec:	080095a8 	.word	0x080095a8

08008bf0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8008c34 <Get_SerialNum+0x44>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8008c38 <Get_SerialNum+0x48>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c02:	4b0e      	ldr	r3, [pc, #56]	@ (8008c3c <Get_SerialNum+0x4c>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d009      	beq.n	8008c2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c16:	2208      	movs	r2, #8
 8008c18:	4909      	ldr	r1, [pc, #36]	@ (8008c40 <Get_SerialNum+0x50>)
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f000 f814 	bl	8008c48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c20:	2204      	movs	r2, #4
 8008c22:	4908      	ldr	r1, [pc, #32]	@ (8008c44 <Get_SerialNum+0x54>)
 8008c24:	68b8      	ldr	r0, [r7, #8]
 8008c26:	f000 f80f 	bl	8008c48 <IntToUnicode>
  }
}
 8008c2a:	bf00      	nop
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	1ff1e800 	.word	0x1ff1e800
 8008c38:	1ff1e804 	.word	0x1ff1e804
 8008c3c:	1ff1e808 	.word	0x1ff1e808
 8008c40:	2400017a 	.word	0x2400017a
 8008c44:	2400018a 	.word	0x2400018a

08008c48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b087      	sub	sp, #28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	4613      	mov	r3, r2
 8008c54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c56:	2300      	movs	r3, #0
 8008c58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	75fb      	strb	r3, [r7, #23]
 8008c5e:	e027      	b.n	8008cb0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	0f1b      	lsrs	r3, r3, #28
 8008c64:	2b09      	cmp	r3, #9
 8008c66:	d80b      	bhi.n	8008c80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	0f1b      	lsrs	r3, r3, #28
 8008c6c:	b2da      	uxtb	r2, r3
 8008c6e:	7dfb      	ldrb	r3, [r7, #23]
 8008c70:	005b      	lsls	r3, r3, #1
 8008c72:	4619      	mov	r1, r3
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	440b      	add	r3, r1
 8008c78:	3230      	adds	r2, #48	@ 0x30
 8008c7a:	b2d2      	uxtb	r2, r2
 8008c7c:	701a      	strb	r2, [r3, #0]
 8008c7e:	e00a      	b.n	8008c96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	0f1b      	lsrs	r3, r3, #28
 8008c84:	b2da      	uxtb	r2, r3
 8008c86:	7dfb      	ldrb	r3, [r7, #23]
 8008c88:	005b      	lsls	r3, r3, #1
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	440b      	add	r3, r1
 8008c90:	3237      	adds	r2, #55	@ 0x37
 8008c92:	b2d2      	uxtb	r2, r2
 8008c94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	011b      	lsls	r3, r3, #4
 8008c9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c9c:	7dfb      	ldrb	r3, [r7, #23]
 8008c9e:	005b      	lsls	r3, r3, #1
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008caa:	7dfb      	ldrb	r3, [r7, #23]
 8008cac:	3301      	adds	r3, #1
 8008cae:	75fb      	strb	r3, [r7, #23]
 8008cb0:	7dfa      	ldrb	r2, [r7, #23]
 8008cb2:	79fb      	ldrb	r3, [r7, #7]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d3d3      	bcc.n	8008c60 <IntToUnicode+0x18>
  }
}
 8008cb8:	bf00      	nop
 8008cba:	bf00      	nop
 8008cbc:	371c      	adds	r7, #28
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <MEM_If_Init_HS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_HS(void)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
	HAL_FLASH_Unlock();
 8008cca:	f7f7 fffd 	bl	8000cc8 <HAL_FLASH_Unlock>
	return (USBD_OK);
 8008cce:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <MEM_If_DeInit_HS>:
/**
  * @brief  De-Initializes Memory.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_DeInit_HS(void)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 7 */
	HAL_FLASH_Lock();
 8008cd8:	f7f8 f818 	bl	8000d0c <HAL_FLASH_Lock>
	return (USBD_OK);
 8008cdc:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <MEM_If_Erase_HS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_HS(uint32_t Add)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b08a      	sub	sp, #40	@ 0x28
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 8 */

	FLASH_EraseInitTypeDef erase;
	uint32_t error = 0;
 8008cea:	2300      	movs	r3, #0
 8008cec:	60fb      	str	r3, [r7, #12]
	erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	613b      	str	r3, [r7, #16]
	erase.Sector = convertAddressToSector(Add);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f8b9 	bl	8008e6a <convertAddressToSector>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	61bb      	str	r3, [r7, #24]

	if(255 == erase.Sector){//If sector is out of boundary
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	2bff      	cmp	r3, #255	@ 0xff
 8008d00:	d101      	bne.n	8008d06 <MEM_If_Erase_HS+0x24>
		return (USBD_FAIL);
 8008d02:	2303      	movs	r3, #3
 8008d04:	e01b      	b.n	8008d3e <MEM_If_Erase_HS+0x5c>
	}
	erase.Banks = FLASH_BANK_1;
 8008d06:	2301      	movs	r3, #1
 8008d08:	617b      	str	r3, [r7, #20]
	erase.NbSectors = 1;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	61fb      	str	r3, [r7, #28]
	erase.VoltageRange = FLASH_VOLTAGE_RANGE_4;
 8008d0e:	2330      	movs	r3, #48	@ 0x30
 8008d10:	623b      	str	r3, [r7, #32]

	HAL_StatusTypeDef status = HAL_FLASHEx_Erase(&erase, &error);
 8008d12:	f107 020c 	add.w	r2, r7, #12
 8008d16:	f107 0310 	add.w	r3, r7, #16
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7f8 f863 	bl	8000de8 <HAL_FLASHEx_Erase>
 8008d22:	4603      	mov	r3, r0
 8008d24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if(HAL_OK != status || 0xFFFFFFFF != error){
 8008d28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d103      	bne.n	8008d38 <MEM_If_Erase_HS+0x56>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d36:	d001      	beq.n	8008d3c <MEM_If_Erase_HS+0x5a>
		return (USBD_BUSY);
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e000      	b.n	8008d3e <MEM_If_Erase_HS+0x5c>
	}
	return (USBD_OK);
 8008d3c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3728      	adds	r7, #40	@ 0x28
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <MEM_If_Write_HS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_HS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b088      	sub	sp, #32
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	60f8      	str	r0, [r7, #12]
 8008d4e:	60b9      	str	r1, [r7, #8]
 8008d50:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 9 */
	HAL_StatusTypeDef status;
	uint32_t dest_addr = (uint32_t)dest;
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	617b      	str	r3, [r7, #20]

	//flash-word row is 256bit(32 * 8 bit) in STM32H723
	for(uint32_t i=0; i<Len; i+=32)
 8008d56:	2300      	movs	r3, #0
 8008d58:	61fb      	str	r3, [r7, #28]
 8008d5a:	e02d      	b.n	8008db8 <MEM_If_Write_HS+0x72>
	{
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, dest_addr+i , (uint32_t)(&src[i]) );
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	18d1      	adds	r1, r2, r3
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	4413      	add	r3, r2
 8008d68:	461a      	mov	r2, r3
 8008d6a:	2001      	movs	r0, #1
 8008d6c:	f7f7 ff3c 	bl	8000be8 <HAL_FLASH_Program>
 8008d70:	4603      	mov	r3, r0
 8008d72:	74fb      	strb	r3, [r7, #19]

		if(HAL_OK == status){
 8008d74:	7cfb      	ldrb	r3, [r7, #19]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d119      	bne.n	8008dae <MEM_If_Write_HS+0x68>
			for(uint32_t idx_check=0; idx_check<8; idx_check++){//check 32bit * 8time
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	61bb      	str	r3, [r7, #24]
 8008d7e:	e012      	b.n	8008da6 <MEM_If_Write_HS+0x60>
				if( *(uint32_t *)(src+i+idx_check) != *(uint32_t *)(dest_addr+i+idx_check) ){
 8008d80:	69fa      	ldr	r2, [r7, #28]
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	4413      	add	r3, r2
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	4413      	add	r3, r2
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	6979      	ldr	r1, [r7, #20]
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	4419      	add	r1, r3
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	440b      	add	r3, r1
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d001      	beq.n	8008da0 <MEM_If_Write_HS+0x5a>
					return USBD_EMEM;
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	e010      	b.n	8008dc2 <MEM_If_Write_HS+0x7c>
			for(uint32_t idx_check=0; idx_check<8; idx_check++){//check 32bit * 8time
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	3301      	adds	r3, #1
 8008da4:	61bb      	str	r3, [r7, #24]
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	2b07      	cmp	r3, #7
 8008daa:	d9e9      	bls.n	8008d80 <MEM_If_Write_HS+0x3a>
 8008dac:	e001      	b.n	8008db2 <MEM_If_Write_HS+0x6c>
				}
			}

		}else{
			return USBD_BUSY;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e007      	b.n	8008dc2 <MEM_If_Write_HS+0x7c>
	for(uint32_t i=0; i<Len; i+=32)
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	3320      	adds	r3, #32
 8008db6:	61fb      	str	r3, [r7, #28]
 8008db8:	69fa      	ldr	r2, [r7, #28]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d3cd      	bcc.n	8008d5c <MEM_If_Write_HS+0x16>
		}
	}
	return (USBD_OK);
 8008dc0:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3720      	adds	r7, #32
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <MEM_If_Read_HS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_HS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b087      	sub	sp, #28
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	60f8      	str	r0, [r7, #12]
 8008dd2:	60b9      	str	r1, [r7, #8]
 8008dd4:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 10 */
	uint8_t *src_ptr = src;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	617b      	str	r3, [r7, #20]
	for(uint32_t i=0; i<Len; i++)
 8008dda:	2300      	movs	r3, #0
 8008ddc:	613b      	str	r3, [r7, #16]
 8008dde:	e00b      	b.n	8008df8 <MEM_If_Read_HS+0x2e>
	{
		dest[i] = *src_ptr;
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	4413      	add	r3, r2
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	7812      	ldrb	r2, [r2, #0]
 8008dea:	701a      	strb	r2, [r3, #0]
		src_ptr++;
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	3301      	adds	r3, #1
 8008df0:	617b      	str	r3, [r7, #20]
	for(uint32_t i=0; i<Len; i++)
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	3301      	adds	r3, #1
 8008df6:	613b      	str	r3, [r7, #16]
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d3ef      	bcc.n	8008de0 <MEM_If_Read_HS+0x16>
	}

	return (uint8_t *)(dest);
 8008e00:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE END 10 */
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	371c      	adds	r7, #28
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <MEM_If_GetStatus_HS>:
  * @param  Cmd: Number of data to be read (in bytes).
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval 0 if operation is successful
  */
uint16_t MEM_If_GetStatus_HS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b085      	sub	sp, #20
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	60f8      	str	r0, [r7, #12]
 8008e16:	460b      	mov	r3, r1
 8008e18:	607a      	str	r2, [r7, #4]
 8008e1a:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 11 */
	switch(Cmd)
 8008e1c:	7afb      	ldrb	r3, [r7, #11]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00e      	beq.n	8008e40 <MEM_If_GetStatus_HS+0x32>
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d119      	bne.n	8008e5a <MEM_If_GetStatus_HS+0x4c>
	{
	case DFU_MEDIA_PROGRAM:
		buffer[1] = (uint8_t)FLASH_PROGRAM_TIME;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	2232      	movs	r2, #50	@ 0x32
 8008e2c:	701a      	strb	r2, [r3, #0]
		buffer[2] = (uint8_t)(FLASH_PROGRAM_TIME << 8);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	3302      	adds	r3, #2
 8008e32:	2200      	movs	r2, #0
 8008e34:	701a      	strb	r2, [r3, #0]
		buffer[3] = 0;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	3303      	adds	r3, #3
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	701a      	strb	r2, [r3, #0]
		break;
 8008e3e:	e00d      	b.n	8008e5c <MEM_If_GetStatus_HS+0x4e>

	case DFU_MEDIA_ERASE:
		buffer[1] = (uint8_t)FLASH_ERASE_TIME;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	3301      	adds	r3, #1
 8008e44:	22e8      	movs	r2, #232	@ 0xe8
 8008e46:	701a      	strb	r2, [r3, #0]
		buffer[2] = (uint8_t)(FLASH_ERASE_TIME << 8);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	3302      	adds	r3, #2
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	701a      	strb	r2, [r3, #0]
		buffer[3] = 0;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	3303      	adds	r3, #3
 8008e54:	2200      	movs	r2, #0
 8008e56:	701a      	strb	r2, [r3, #0]
		break;
 8008e58:	e000      	b.n	8008e5c <MEM_If_GetStatus_HS+0x4e>

	default:
		break;
 8008e5a:	bf00      	nop
	}
	return  (USBD_OK);
 8008e5c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3714      	adds	r7, #20
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <convertAddressToSector>:
/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
#define ADDR_SECTOR_START (0x08000000)
#define ADDR_SECTOR_SIZE  (0x00020000)
#define ADDR_SECTOR_END (0x080FFFFF)
uint8_t convertAddressToSector(uint32_t addr)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b085      	sub	sp, #20
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
	uint8_t ret;

	if((addr > ADDR_SECTOR_END) || (addr < ADDR_SECTOR_START)){
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8008e78:	d203      	bcs.n	8008e82 <convertAddressToSector+0x18>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e80:	d201      	bcs.n	8008e86 <convertAddressToSector+0x1c>
		return 0xFF;//error magic number
 8008e82:	23ff      	movs	r3, #255	@ 0xff
 8008e84:	e005      	b.n	8008e92 <convertAddressToSector+0x28>
	}

	ret = (addr - ADDR_SECTOR_START) / ADDR_SECTOR_SIZE;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8008e8c:	0c5b      	lsrs	r3, r3, #17
 8008e8e:	73fb      	strb	r3, [r7, #15]

	return ret;
 8008e90:	7bfb      	ldrb	r3, [r7, #15]

}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3714      	adds	r7, #20
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
	...

08008ea0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b0b8      	sub	sp, #224	@ 0xe0
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ea8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8008eac:	2200      	movs	r2, #0
 8008eae:	601a      	str	r2, [r3, #0]
 8008eb0:	605a      	str	r2, [r3, #4]
 8008eb2:	609a      	str	r2, [r3, #8]
 8008eb4:	60da      	str	r2, [r3, #12]
 8008eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008eb8:	f107 0310 	add.w	r3, r7, #16
 8008ebc:	22b8      	movs	r2, #184	@ 0xb8
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f000 fb21 	bl	8009508 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a34      	ldr	r2, [pc, #208]	@ (8008f9c <HAL_PCD_MspInit+0xfc>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d161      	bne.n	8008f94 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008ed0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8008ed4:	f04f 0300 	mov.w	r3, #0
 8008ed8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008edc:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8008ee0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008ee4:	f107 0310 	add.w	r3, r7, #16
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7fa fc0d 	bl	8003708 <HAL_RCCEx_PeriphCLKConfig>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8008ef4:	f7f7 fbb6 	bl	8000664 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8008ef8:	f7f9 fcbc 	bl	8002874 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008efc:	4b28      	ldr	r3, [pc, #160]	@ (8008fa0 <HAL_PCD_MspInit+0x100>)
 8008efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f02:	4a27      	ldr	r2, [pc, #156]	@ (8008fa0 <HAL_PCD_MspInit+0x100>)
 8008f04:	f043 0301 	orr.w	r3, r3, #1
 8008f08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008f0c:	4b24      	ldr	r3, [pc, #144]	@ (8008fa0 <HAL_PCD_MspInit+0x100>)
 8008f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	60fb      	str	r3, [r7, #12]
 8008f18:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA10     ------> USB_OTG_HS_ID
    */
    GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8008f1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f22:	2300      	movs	r3, #0
 8008f24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008f2e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8008f32:	4619      	mov	r1, r3
 8008f34:	481b      	ldr	r0, [pc, #108]	@ (8008fa4 <HAL_PCD_MspInit+0x104>)
 8008f36:	f7f8 f82b 	bl	8000f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8008f3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f3e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f42:	2302      	movs	r3, #2
 8008f44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8008f54:	230a      	movs	r3, #10
 8008f56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8008f5a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8008f5e:	4619      	mov	r1, r3
 8008f60:	4810      	ldr	r0, [pc, #64]	@ (8008fa4 <HAL_PCD_MspInit+0x104>)
 8008f62:	f7f8 f815 	bl	8000f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8008f66:	4b0e      	ldr	r3, [pc, #56]	@ (8008fa0 <HAL_PCD_MspInit+0x100>)
 8008f68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008f6c:	4a0c      	ldr	r2, [pc, #48]	@ (8008fa0 <HAL_PCD_MspInit+0x100>)
 8008f6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008f72:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008f76:	4b0a      	ldr	r3, [pc, #40]	@ (8008fa0 <HAL_PCD_MspInit+0x100>)
 8008f78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f80:	60bb      	str	r3, [r7, #8]
 8008f82:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8008f84:	2200      	movs	r2, #0
 8008f86:	2100      	movs	r1, #0
 8008f88:	204d      	movs	r0, #77	@ 0x4d
 8008f8a:	f7f7 fdf8 	bl	8000b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8008f8e:	204d      	movs	r0, #77	@ 0x4d
 8008f90:	f7f7 fe0f 	bl	8000bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8008f94:	bf00      	nop
 8008f96:	37e0      	adds	r7, #224	@ 0xe0
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	40040000 	.word	0x40040000
 8008fa0:	58024400 	.word	0x58024400
 8008fa4:	58020000 	.word	0x58020000

08008fa8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	f7fe fad9 	bl	8007576 <USBD_LL_SetupStage>
}
 8008fc4:	bf00      	nop
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008fde:	78fa      	ldrb	r2, [r7, #3]
 8008fe0:	6879      	ldr	r1, [r7, #4]
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	00db      	lsls	r3, r3, #3
 8008fe6:	4413      	add	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	440b      	add	r3, r1
 8008fec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	78fb      	ldrb	r3, [r7, #3]
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	f7fe fb13 	bl	8007620 <USBD_LL_DataOutStage>
}
 8008ffa:	bf00      	nop
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b082      	sub	sp, #8
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	460b      	mov	r3, r1
 800900c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009014:	78fa      	ldrb	r2, [r7, #3]
 8009016:	6879      	ldr	r1, [r7, #4]
 8009018:	4613      	mov	r3, r2
 800901a:	00db      	lsls	r3, r3, #3
 800901c:	4413      	add	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	440b      	add	r3, r1
 8009022:	3320      	adds	r3, #32
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	78fb      	ldrb	r3, [r7, #3]
 8009028:	4619      	mov	r1, r3
 800902a:	f7fe fbac 	bl	8007786 <USBD_LL_DataInStage>
}
 800902e:	bf00      	nop
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b082      	sub	sp, #8
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009044:	4618      	mov	r0, r3
 8009046:	f7fe fce6 	bl	8007a16 <USBD_LL_SOF>
}
 800904a:	bf00      	nop
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b084      	sub	sp, #16
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800905a:	2301      	movs	r3, #1
 800905c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	79db      	ldrb	r3, [r3, #7]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d102      	bne.n	800906c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009066:	2300      	movs	r3, #0
 8009068:	73fb      	strb	r3, [r7, #15]
 800906a:	e008      	b.n	800907e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	79db      	ldrb	r3, [r3, #7]
 8009070:	2b02      	cmp	r3, #2
 8009072:	d102      	bne.n	800907a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009074:	2301      	movs	r3, #1
 8009076:	73fb      	strb	r3, [r7, #15]
 8009078:	e001      	b.n	800907e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800907a:	f7f7 faf3 	bl	8000664 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009084:	7bfa      	ldrb	r2, [r7, #15]
 8009086:	4611      	mov	r1, r2
 8009088:	4618      	mov	r0, r3
 800908a:	f7fe fc80 	bl	800798e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe fc28 	bl	80078ea <USBD_LL_Reset>
}
 800909a:	bf00      	nop
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
	...

080090a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fe fc7b 	bl	80079ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	6812      	ldr	r2, [r2, #0]
 80090c6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80090ca:	f043 0301 	orr.w	r3, r3, #1
 80090ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	7adb      	ldrb	r3, [r3, #11]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d005      	beq.n	80090e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090d8:	4b04      	ldr	r3, [pc, #16]	@ (80090ec <HAL_PCD_SuspendCallback+0x48>)
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	4a03      	ldr	r2, [pc, #12]	@ (80090ec <HAL_PCD_SuspendCallback+0x48>)
 80090de:	f043 0306 	orr.w	r3, r3, #6
 80090e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090e4:	bf00      	nop
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	e000ed00 	.word	0xe000ed00

080090f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe fc71 	bl	80079e6 <USBD_LL_Resume>
}
 8009104:	bf00      	nop
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	460b      	mov	r3, r1
 8009116:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800911e:	78fa      	ldrb	r2, [r7, #3]
 8009120:	4611      	mov	r1, r2
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe fcc9 	bl	8007aba <USBD_LL_IsoOUTIncomplete>
}
 8009128:	bf00      	nop
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	460b      	mov	r3, r1
 800913a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009142:	78fa      	ldrb	r2, [r7, #3]
 8009144:	4611      	mov	r1, r2
 8009146:	4618      	mov	r0, r3
 8009148:	f7fe fc85 	bl	8007a56 <USBD_LL_IsoINIncomplete>
}
 800914c:	bf00      	nop
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009162:	4618      	mov	r0, r3
 8009164:	f7fe fcdb 	bl	8007b1e <USBD_LL_DevConnected>
}
 8009168:	bf00      	nop
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800917e:	4618      	mov	r0, r3
 8009180:	f7fe fcd8 	bl	8007b34 <USBD_LL_DevDisconnected>
}
 8009184:	bf00      	nop
 8009186:	3708      	adds	r7, #8
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d140      	bne.n	800921e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800919c:	4a22      	ldr	r2, [pc, #136]	@ (8009228 <USBD_LL_Init+0x9c>)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a20      	ldr	r2, [pc, #128]	@ (8009228 <USBD_LL_Init+0x9c>)
 80091a8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80091ac:	4b1e      	ldr	r3, [pc, #120]	@ (8009228 <USBD_LL_Init+0x9c>)
 80091ae:	4a1f      	ldr	r2, [pc, #124]	@ (800922c <USBD_LL_Init+0xa0>)
 80091b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80091b2:	4b1d      	ldr	r3, [pc, #116]	@ (8009228 <USBD_LL_Init+0x9c>)
 80091b4:	2209      	movs	r2, #9
 80091b6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80091b8:	4b1b      	ldr	r3, [pc, #108]	@ (8009228 <USBD_LL_Init+0x9c>)
 80091ba:	2202      	movs	r2, #2
 80091bc:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80091be:	4b1a      	ldr	r3, [pc, #104]	@ (8009228 <USBD_LL_Init+0x9c>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80091c4:	4b18      	ldr	r3, [pc, #96]	@ (8009228 <USBD_LL_Init+0x9c>)
 80091c6:	2202      	movs	r2, #2
 80091c8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80091ca:	4b17      	ldr	r3, [pc, #92]	@ (8009228 <USBD_LL_Init+0x9c>)
 80091cc:	2200      	movs	r2, #0
 80091ce:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80091d0:	4b15      	ldr	r3, [pc, #84]	@ (8009228 <USBD_LL_Init+0x9c>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80091d6:	4b14      	ldr	r3, [pc, #80]	@ (8009228 <USBD_LL_Init+0x9c>)
 80091d8:	2200      	movs	r2, #0
 80091da:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 80091dc:	4b12      	ldr	r3, [pc, #72]	@ (8009228 <USBD_LL_Init+0x9c>)
 80091de:	2201      	movs	r2, #1
 80091e0:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80091e2:	4b11      	ldr	r3, [pc, #68]	@ (8009228 <USBD_LL_Init+0x9c>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80091e8:	4b0f      	ldr	r3, [pc, #60]	@ (8009228 <USBD_LL_Init+0x9c>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80091ee:	480e      	ldr	r0, [pc, #56]	@ (8009228 <USBD_LL_Init+0x9c>)
 80091f0:	f7f8 f88f 	bl	8001312 <HAL_PCD_Init>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80091fa:	f7f7 fa33 	bl	8000664 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80091fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009202:	4809      	ldr	r0, [pc, #36]	@ (8009228 <USBD_LL_Init+0x9c>)
 8009204:	f7f9 fabb 	bl	800277e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8009208:	2280      	movs	r2, #128	@ 0x80
 800920a:	2100      	movs	r1, #0
 800920c:	4806      	ldr	r0, [pc, #24]	@ (8009228 <USBD_LL_Init+0x9c>)
 800920e:	f7f9 fa6f 	bl	80026f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8009212:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8009216:	2101      	movs	r1, #1
 8009218:	4803      	ldr	r0, [pc, #12]	@ (8009228 <USBD_LL_Init+0x9c>)
 800921a:	f7f9 fa69 	bl	80026f0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	240007c8 	.word	0x240007c8
 800922c:	40040000 	.word	0x40040000

08009230 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800923c:	2300      	movs	r3, #0
 800923e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009246:	4618      	mov	r0, r3
 8009248:	f7f8 f96f 	bl	800152a <HAL_PCD_Start>
 800924c:	4603      	mov	r3, r0
 800924e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	4618      	mov	r0, r3
 8009254:	f000 f92c 	bl	80094b0 <USBD_Get_USB_Status>
 8009258:	4603      	mov	r3, r0
 800925a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800925c:	7bbb      	ldrb	r3, [r7, #14]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b084      	sub	sp, #16
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800927c:	4618      	mov	r0, r3
 800927e:	f7f8 f989 	bl	8001594 <HAL_PCD_Stop>
 8009282:	4603      	mov	r3, r0
 8009284:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009286:	7bfb      	ldrb	r3, [r7, #15]
 8009288:	4618      	mov	r0, r3
 800928a:	f000 f911 	bl	80094b0 <USBD_Get_USB_Status>
 800928e:	4603      	mov	r3, r0
 8009290:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009292:	7bbb      	ldrb	r3, [r7, #14]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	4608      	mov	r0, r1
 80092a6:	4611      	mov	r1, r2
 80092a8:	461a      	mov	r2, r3
 80092aa:	4603      	mov	r3, r0
 80092ac:	70fb      	strb	r3, [r7, #3]
 80092ae:	460b      	mov	r3, r1
 80092b0:	70bb      	strb	r3, [r7, #2]
 80092b2:	4613      	mov	r3, r2
 80092b4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092b6:	2300      	movs	r3, #0
 80092b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80092c4:	78bb      	ldrb	r3, [r7, #2]
 80092c6:	883a      	ldrh	r2, [r7, #0]
 80092c8:	78f9      	ldrb	r1, [r7, #3]
 80092ca:	f7f8 fe90 	bl	8001fee <HAL_PCD_EP_Open>
 80092ce:	4603      	mov	r3, r0
 80092d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092d2:	7bfb      	ldrb	r3, [r7, #15]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f000 f8eb 	bl	80094b0 <USBD_Get_USB_Status>
 80092da:	4603      	mov	r3, r0
 80092dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092de:	7bbb      	ldrb	r3, [r7, #14]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	460b      	mov	r3, r1
 80092f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092f8:	2300      	movs	r3, #0
 80092fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009302:	78fa      	ldrb	r2, [r7, #3]
 8009304:	4611      	mov	r1, r2
 8009306:	4618      	mov	r0, r3
 8009308:	f7f8 ff4e 	bl	80021a8 <HAL_PCD_EP_SetStall>
 800930c:	4603      	mov	r3, r0
 800930e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009310:	7bfb      	ldrb	r3, [r7, #15]
 8009312:	4618      	mov	r0, r3
 8009314:	f000 f8cc 	bl	80094b0 <USBD_Get_USB_Status>
 8009318:	4603      	mov	r3, r0
 800931a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800931c:	7bbb      	ldrb	r3, [r7, #14]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b084      	sub	sp, #16
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
 800932e:	460b      	mov	r3, r1
 8009330:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009332:	2300      	movs	r3, #0
 8009334:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009336:	2300      	movs	r3, #0
 8009338:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009340:	78fa      	ldrb	r2, [r7, #3]
 8009342:	4611      	mov	r1, r2
 8009344:	4618      	mov	r0, r3
 8009346:	f7f8 ff92 	bl	800226e <HAL_PCD_EP_ClrStall>
 800934a:	4603      	mov	r3, r0
 800934c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800934e:	7bfb      	ldrb	r3, [r7, #15]
 8009350:	4618      	mov	r0, r3
 8009352:	f000 f8ad 	bl	80094b0 <USBD_Get_USB_Status>
 8009356:	4603      	mov	r3, r0
 8009358:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800935a:	7bbb      	ldrb	r3, [r7, #14]
}
 800935c:	4618      	mov	r0, r3
 800935e:	3710      	adds	r7, #16
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	460b      	mov	r3, r1
 800936e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009376:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800937c:	2b00      	cmp	r3, #0
 800937e:	da0b      	bge.n	8009398 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009380:	78fb      	ldrb	r3, [r7, #3]
 8009382:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009386:	68f9      	ldr	r1, [r7, #12]
 8009388:	4613      	mov	r3, r2
 800938a:	00db      	lsls	r3, r3, #3
 800938c:	4413      	add	r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	440b      	add	r3, r1
 8009392:	3316      	adds	r3, #22
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	e00b      	b.n	80093b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009398:	78fb      	ldrb	r3, [r7, #3]
 800939a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800939e:	68f9      	ldr	r1, [r7, #12]
 80093a0:	4613      	mov	r3, r2
 80093a2:	00db      	lsls	r3, r3, #3
 80093a4:	4413      	add	r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	440b      	add	r3, r1
 80093aa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80093ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3714      	adds	r7, #20
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	460b      	mov	r3, r1
 80093c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093cc:	2300      	movs	r3, #0
 80093ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80093d6:	78fa      	ldrb	r2, [r7, #3]
 80093d8:	4611      	mov	r1, r2
 80093da:	4618      	mov	r0, r3
 80093dc:	f7f8 fde3 	bl	8001fa6 <HAL_PCD_SetAddress>
 80093e0:	4603      	mov	r3, r0
 80093e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093e4:	7bfb      	ldrb	r3, [r7, #15]
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 f862 	bl	80094b0 <USBD_Get_USB_Status>
 80093ec:	4603      	mov	r3, r0
 80093ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b086      	sub	sp, #24
 80093fe:	af00      	add	r7, sp, #0
 8009400:	60f8      	str	r0, [r7, #12]
 8009402:	607a      	str	r2, [r7, #4]
 8009404:	603b      	str	r3, [r7, #0]
 8009406:	460b      	mov	r3, r1
 8009408:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800940a:	2300      	movs	r3, #0
 800940c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800940e:	2300      	movs	r3, #0
 8009410:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009418:	7af9      	ldrb	r1, [r7, #11]
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	f7f8 fe89 	bl	8002134 <HAL_PCD_EP_Transmit>
 8009422:	4603      	mov	r3, r0
 8009424:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009426:	7dfb      	ldrb	r3, [r7, #23]
 8009428:	4618      	mov	r0, r3
 800942a:	f000 f841 	bl	80094b0 <USBD_Get_USB_Status>
 800942e:	4603      	mov	r3, r0
 8009430:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009432:	7dbb      	ldrb	r3, [r7, #22]
}
 8009434:	4618      	mov	r0, r3
 8009436:	3718      	adds	r7, #24
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b086      	sub	sp, #24
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	607a      	str	r2, [r7, #4]
 8009446:	603b      	str	r3, [r7, #0]
 8009448:	460b      	mov	r3, r1
 800944a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800944c:	2300      	movs	r3, #0
 800944e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009450:	2300      	movs	r3, #0
 8009452:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800945a:	7af9      	ldrb	r1, [r7, #11]
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	f7f8 fe2d 	bl	80020be <HAL_PCD_EP_Receive>
 8009464:	4603      	mov	r3, r0
 8009466:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009468:	7dfb      	ldrb	r3, [r7, #23]
 800946a:	4618      	mov	r0, r3
 800946c:	f000 f820 	bl	80094b0 <USBD_Get_USB_Status>
 8009470:	4603      	mov	r3, r0
 8009472:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009474:	7dbb      	ldrb	r3, [r7, #22]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3718      	adds	r7, #24
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
	...

08009480 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009488:	4b03      	ldr	r3, [pc, #12]	@ (8009498 <USBD_static_malloc+0x18>)
}
 800948a:	4618      	mov	r0, r3
 800948c:	370c      	adds	r7, #12
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	24000cac 	.word	0x24000cac

0800949c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80094a4:	bf00      	nop
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	4603      	mov	r3, r0
 80094b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094be:	79fb      	ldrb	r3, [r7, #7]
 80094c0:	2b03      	cmp	r3, #3
 80094c2:	d817      	bhi.n	80094f4 <USBD_Get_USB_Status+0x44>
 80094c4:	a201      	add	r2, pc, #4	@ (adr r2, 80094cc <USBD_Get_USB_Status+0x1c>)
 80094c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ca:	bf00      	nop
 80094cc:	080094dd 	.word	0x080094dd
 80094d0:	080094e3 	.word	0x080094e3
 80094d4:	080094e9 	.word	0x080094e9
 80094d8:	080094ef 	.word	0x080094ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80094dc:	2300      	movs	r3, #0
 80094de:	73fb      	strb	r3, [r7, #15]
    break;
 80094e0:	e00b      	b.n	80094fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094e2:	2303      	movs	r3, #3
 80094e4:	73fb      	strb	r3, [r7, #15]
    break;
 80094e6:	e008      	b.n	80094fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094e8:	2301      	movs	r3, #1
 80094ea:	73fb      	strb	r3, [r7, #15]
    break;
 80094ec:	e005      	b.n	80094fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094ee:	2303      	movs	r3, #3
 80094f0:	73fb      	strb	r3, [r7, #15]
    break;
 80094f2:	e002      	b.n	80094fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094f4:	2303      	movs	r3, #3
 80094f6:	73fb      	strb	r3, [r7, #15]
    break;
 80094f8:	bf00      	nop
  }
  return usb_status;
 80094fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3714      	adds	r7, #20
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <memset>:
 8009508:	4402      	add	r2, r0
 800950a:	4603      	mov	r3, r0
 800950c:	4293      	cmp	r3, r2
 800950e:	d100      	bne.n	8009512 <memset+0xa>
 8009510:	4770      	bx	lr
 8009512:	f803 1b01 	strb.w	r1, [r3], #1
 8009516:	e7f9      	b.n	800950c <memset+0x4>

08009518 <__libc_init_array>:
 8009518:	b570      	push	{r4, r5, r6, lr}
 800951a:	4d0d      	ldr	r5, [pc, #52]	@ (8009550 <__libc_init_array+0x38>)
 800951c:	4c0d      	ldr	r4, [pc, #52]	@ (8009554 <__libc_init_array+0x3c>)
 800951e:	1b64      	subs	r4, r4, r5
 8009520:	10a4      	asrs	r4, r4, #2
 8009522:	2600      	movs	r6, #0
 8009524:	42a6      	cmp	r6, r4
 8009526:	d109      	bne.n	800953c <__libc_init_array+0x24>
 8009528:	4d0b      	ldr	r5, [pc, #44]	@ (8009558 <__libc_init_array+0x40>)
 800952a:	4c0c      	ldr	r4, [pc, #48]	@ (800955c <__libc_init_array+0x44>)
 800952c:	f000 f818 	bl	8009560 <_init>
 8009530:	1b64      	subs	r4, r4, r5
 8009532:	10a4      	asrs	r4, r4, #2
 8009534:	2600      	movs	r6, #0
 8009536:	42a6      	cmp	r6, r4
 8009538:	d105      	bne.n	8009546 <__libc_init_array+0x2e>
 800953a:	bd70      	pop	{r4, r5, r6, pc}
 800953c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009540:	4798      	blx	r3
 8009542:	3601      	adds	r6, #1
 8009544:	e7ee      	b.n	8009524 <__libc_init_array+0xc>
 8009546:	f855 3b04 	ldr.w	r3, [r5], #4
 800954a:	4798      	blx	r3
 800954c:	3601      	adds	r6, #1
 800954e:	e7f2      	b.n	8009536 <__libc_init_array+0x1e>
 8009550:	08009634 	.word	0x08009634
 8009554:	08009634 	.word	0x08009634
 8009558:	08009634 	.word	0x08009634
 800955c:	08009638 	.word	0x08009638

08009560 <_init>:
 8009560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009562:	bf00      	nop
 8009564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009566:	bc08      	pop	{r3}
 8009568:	469e      	mov	lr, r3
 800956a:	4770      	bx	lr

0800956c <_fini>:
 800956c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956e:	bf00      	nop
 8009570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009572:	bc08      	pop	{r3}
 8009574:	469e      	mov	lr, r3
 8009576:	4770      	bx	lr

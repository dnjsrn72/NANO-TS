
NANO_TS_DFU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081ac  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800826c  0800826c  0000926c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008378  08008378  0000a1a8  2**0
                  CONTENTS
  4 .ARM          00000000  08008378  08008378  0000a1a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008378  08008378  0000a1a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008378  08008378  00009378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800837c  0800837c  0000937c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001a8  20000000  08008380  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001900  200001a8  08008528  0000a1a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001aa8  08008528  0000aaa8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a1a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c07d  00000000  00000000  0000a1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dde  00000000  00000000  0001624d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  00019030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000084b  00000000  00000000  00019b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000125ce  00000000  00000000  0001a3c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001047e  00000000  00000000  0002c991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061581  00000000  00000000  0003ce0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009e390  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025a4  00000000  00000000  0009e3d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000a0978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001a8 	.word	0x200001a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008254 	.word	0x08008254

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ac 	.word	0x200001ac
 8000104:	08008254 	.word	0x08008254

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f93a 	bl	800049c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f80e 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f86c 	bl	8000308 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000230:	f007 fa88 	bl	8007744 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000234:	2380      	movs	r3, #128	@ 0x80
 8000236:	0219      	lsls	r1, r3, #8
 8000238:	2390      	movs	r3, #144	@ 0x90
 800023a:	05db      	lsls	r3, r3, #23
 800023c:	2200      	movs	r2, #0
 800023e:	0018      	movs	r0, r3
 8000240:	f000 fe04 	bl	8000e4c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000244:	46c0      	nop			@ (mov r8, r8)
 8000246:	e7fd      	b.n	8000244 <main+0x24>

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b590      	push	{r4, r7, lr}
 800024a:	b097      	sub	sp, #92	@ 0x5c
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	2428      	movs	r4, #40	@ 0x28
 8000250:	193b      	adds	r3, r7, r4
 8000252:	0018      	movs	r0, r3
 8000254:	2330      	movs	r3, #48	@ 0x30
 8000256:	001a      	movs	r2, r3
 8000258:	2100      	movs	r1, #0
 800025a:	f007 ffcf 	bl	80081fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025e:	2318      	movs	r3, #24
 8000260:	18fb      	adds	r3, r7, r3
 8000262:	0018      	movs	r0, r3
 8000264:	2310      	movs	r3, #16
 8000266:	001a      	movs	r2, r3
 8000268:	2100      	movs	r1, #0
 800026a:	f007 ffc7 	bl	80081fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	0018      	movs	r0, r3
 8000272:	2314      	movs	r3, #20
 8000274:	001a      	movs	r2, r3
 8000276:	2100      	movs	r1, #0
 8000278:	f007 ffc0 	bl	80081fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800027c:	0021      	movs	r1, r4
 800027e:	187b      	adds	r3, r7, r1
 8000280:	2201      	movs	r2, #1
 8000282:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000284:	187b      	adds	r3, r7, r1
 8000286:	2201      	movs	r2, #1
 8000288:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028a:	187b      	adds	r3, r7, r1
 800028c:	2202      	movs	r2, #2
 800028e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000290:	187b      	adds	r3, r7, r1
 8000292:	2280      	movs	r2, #128	@ 0x80
 8000294:	0252      	lsls	r2, r2, #9
 8000296:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2280      	movs	r2, #128	@ 0x80
 800029c:	0352      	lsls	r2, r2, #13
 800029e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	2200      	movs	r2, #0
 80002a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	0018      	movs	r0, r3
 80002aa:	f002 fbe9 	bl	8002a80 <HAL_RCC_OscConfig>
 80002ae:	1e03      	subs	r3, r0, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002b2:	f000 f873 	bl	800039c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b6:	2118      	movs	r1, #24
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2207      	movs	r2, #7
 80002bc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2202      	movs	r2, #2
 80002c2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2200      	movs	r2, #0
 80002ce:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2101      	movs	r1, #1
 80002d4:	0018      	movs	r0, r3
 80002d6:	f002 fef1 	bl	80030bc <HAL_RCC_ClockConfig>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002de:	f000 f85d 	bl	800039c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2280      	movs	r2, #128	@ 0x80
 80002e6:	0292      	lsls	r2, r2, #10
 80002e8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2280      	movs	r2, #128	@ 0x80
 80002ee:	611a      	str	r2, [r3, #16]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	0018      	movs	r0, r3
 80002f4:	f003 f808 	bl	8003308 <HAL_RCCEx_PeriphCLKConfig>
 80002f8:	1e03      	subs	r3, r0, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80002fc:	f000 f84e 	bl	800039c <Error_Handler>
  }
}
 8000300:	46c0      	nop			@ (mov r8, r8)
 8000302:	46bd      	mov	sp, r7
 8000304:	b017      	add	sp, #92	@ 0x5c
 8000306:	bd90      	pop	{r4, r7, pc}

08000308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000308:	b590      	push	{r4, r7, lr}
 800030a:	b089      	sub	sp, #36	@ 0x24
 800030c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030e:	240c      	movs	r4, #12
 8000310:	193b      	adds	r3, r7, r4
 8000312:	0018      	movs	r0, r3
 8000314:	2314      	movs	r3, #20
 8000316:	001a      	movs	r2, r3
 8000318:	2100      	movs	r1, #0
 800031a:	f007 ff6f 	bl	80081fc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800031e:	4b1e      	ldr	r3, [pc, #120]	@ (8000398 <MX_GPIO_Init+0x90>)
 8000320:	695a      	ldr	r2, [r3, #20]
 8000322:	4b1d      	ldr	r3, [pc, #116]	@ (8000398 <MX_GPIO_Init+0x90>)
 8000324:	2180      	movs	r1, #128	@ 0x80
 8000326:	03c9      	lsls	r1, r1, #15
 8000328:	430a      	orrs	r2, r1
 800032a:	615a      	str	r2, [r3, #20]
 800032c:	4b1a      	ldr	r3, [pc, #104]	@ (8000398 <MX_GPIO_Init+0x90>)
 800032e:	695a      	ldr	r2, [r3, #20]
 8000330:	2380      	movs	r3, #128	@ 0x80
 8000332:	03db      	lsls	r3, r3, #15
 8000334:	4013      	ands	r3, r2
 8000336:	60bb      	str	r3, [r7, #8]
 8000338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033a:	4b17      	ldr	r3, [pc, #92]	@ (8000398 <MX_GPIO_Init+0x90>)
 800033c:	695a      	ldr	r2, [r3, #20]
 800033e:	4b16      	ldr	r3, [pc, #88]	@ (8000398 <MX_GPIO_Init+0x90>)
 8000340:	2180      	movs	r1, #128	@ 0x80
 8000342:	0289      	lsls	r1, r1, #10
 8000344:	430a      	orrs	r2, r1
 8000346:	615a      	str	r2, [r3, #20]
 8000348:	4b13      	ldr	r3, [pc, #76]	@ (8000398 <MX_GPIO_Init+0x90>)
 800034a:	695a      	ldr	r2, [r3, #20]
 800034c:	2380      	movs	r3, #128	@ 0x80
 800034e:	029b      	lsls	r3, r3, #10
 8000350:	4013      	ands	r3, r2
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000356:	2380      	movs	r3, #128	@ 0x80
 8000358:	0219      	lsls	r1, r3, #8
 800035a:	2390      	movs	r3, #144	@ 0x90
 800035c:	05db      	lsls	r3, r3, #23
 800035e:	2200      	movs	r2, #0
 8000360:	0018      	movs	r0, r3
 8000362:	f000 fd73 	bl	8000e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000366:	193b      	adds	r3, r7, r4
 8000368:	2280      	movs	r2, #128	@ 0x80
 800036a:	0212      	lsls	r2, r2, #8
 800036c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800036e:	193b      	adds	r3, r7, r4
 8000370:	2201      	movs	r2, #1
 8000372:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	193b      	adds	r3, r7, r4
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037a:	193b      	adds	r3, r7, r4
 800037c:	2200      	movs	r2, #0
 800037e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000380:	193a      	adds	r2, r7, r4
 8000382:	2390      	movs	r3, #144	@ 0x90
 8000384:	05db      	lsls	r3, r3, #23
 8000386:	0011      	movs	r1, r2
 8000388:	0018      	movs	r0, r3
 800038a:	f000 fbef 	bl	8000b6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800038e:	46c0      	nop			@ (mov r8, r8)
 8000390:	46bd      	mov	sp, r7
 8000392:	b009      	add	sp, #36	@ 0x24
 8000394:	bd90      	pop	{r4, r7, pc}
 8000396:	46c0      	nop			@ (mov r8, r8)
 8000398:	40021000 	.word	0x40021000

0800039c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a0:	b672      	cpsid	i
}
 80003a2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a4:	46c0      	nop			@ (mov r8, r8)
 80003a6:	e7fd      	b.n	80003a4 <Error_Handler+0x8>

080003a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ae:	4b0f      	ldr	r3, [pc, #60]	@ (80003ec <HAL_MspInit+0x44>)
 80003b0:	699a      	ldr	r2, [r3, #24]
 80003b2:	4b0e      	ldr	r3, [pc, #56]	@ (80003ec <HAL_MspInit+0x44>)
 80003b4:	2101      	movs	r1, #1
 80003b6:	430a      	orrs	r2, r1
 80003b8:	619a      	str	r2, [r3, #24]
 80003ba:	4b0c      	ldr	r3, [pc, #48]	@ (80003ec <HAL_MspInit+0x44>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	2201      	movs	r2, #1
 80003c0:	4013      	ands	r3, r2
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c6:	4b09      	ldr	r3, [pc, #36]	@ (80003ec <HAL_MspInit+0x44>)
 80003c8:	69da      	ldr	r2, [r3, #28]
 80003ca:	4b08      	ldr	r3, [pc, #32]	@ (80003ec <HAL_MspInit+0x44>)
 80003cc:	2180      	movs	r1, #128	@ 0x80
 80003ce:	0549      	lsls	r1, r1, #21
 80003d0:	430a      	orrs	r2, r1
 80003d2:	61da      	str	r2, [r3, #28]
 80003d4:	4b05      	ldr	r3, [pc, #20]	@ (80003ec <HAL_MspInit+0x44>)
 80003d6:	69da      	ldr	r2, [r3, #28]
 80003d8:	2380      	movs	r3, #128	@ 0x80
 80003da:	055b      	lsls	r3, r3, #21
 80003dc:	4013      	ands	r3, r2
 80003de:	603b      	str	r3, [r7, #0]
 80003e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e2:	46c0      	nop			@ (mov r8, r8)
 80003e4:	46bd      	mov	sp, r7
 80003e6:	b002      	add	sp, #8
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	46c0      	nop			@ (mov r8, r8)
 80003ec:	40021000 	.word	0x40021000

080003f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003f4:	46c0      	nop			@ (mov r8, r8)
 80003f6:	e7fd      	b.n	80003f4 <NMI_Handler+0x4>

080003f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003fc:	46c0      	nop			@ (mov r8, r8)
 80003fe:	e7fd      	b.n	80003fc <HardFault_Handler+0x4>

08000400 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000404:	46c0      	nop			@ (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800040e:	46c0      	nop			@ (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000418:	f000 f888 	bl	800052c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800041c:	46c0      	nop			@ (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000428:	4b03      	ldr	r3, [pc, #12]	@ (8000438 <USB_IRQHandler+0x14>)
 800042a:	0018      	movs	r0, r3
 800042c:	f000 fe6a 	bl	8001104 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000430:	46c0      	nop			@ (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	200007ac 	.word	0x200007ac

0800043c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000440:	46c0      	nop			@ (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
	...

08000448 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000448:	480d      	ldr	r0, [pc, #52]	@ (8000480 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800044a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800044c:	f7ff fff6 	bl	800043c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000450:	480c      	ldr	r0, [pc, #48]	@ (8000484 <LoopForever+0x6>)
  ldr r1, =_edata
 8000452:	490d      	ldr	r1, [pc, #52]	@ (8000488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000454:	4a0d      	ldr	r2, [pc, #52]	@ (800048c <LoopForever+0xe>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000458:	e002      	b.n	8000460 <LoopCopyDataInit>

0800045a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800045c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045e:	3304      	adds	r3, #4

08000460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000464:	d3f9      	bcc.n	800045a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000466:	4a0a      	ldr	r2, [pc, #40]	@ (8000490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000468:	4c0a      	ldr	r4, [pc, #40]	@ (8000494 <LoopForever+0x16>)
  movs r3, #0
 800046a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800046c:	e001      	b.n	8000472 <LoopFillZerobss>

0800046e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000470:	3204      	adds	r2, #4

08000472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000474:	d3fb      	bcc.n	800046e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000476:	f007 fec9 	bl	800820c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047a:	f7ff fed1 	bl	8000220 <main>

0800047e <LoopForever>:

LoopForever:
    b LoopForever
 800047e:	e7fe      	b.n	800047e <LoopForever>
  ldr   r0, =_estack
 8000480:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000488:	200001a8 	.word	0x200001a8
  ldr r2, =_sidata
 800048c:	08008380 	.word	0x08008380
  ldr r2, =_sbss
 8000490:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8000494:	20001aa8 	.word	0x20001aa8

08000498 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000498:	e7fe      	b.n	8000498 <ADC1_IRQHandler>
	...

0800049c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004a0:	4b07      	ldr	r3, [pc, #28]	@ (80004c0 <HAL_Init+0x24>)
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	4b06      	ldr	r3, [pc, #24]	@ (80004c0 <HAL_Init+0x24>)
 80004a6:	2110      	movs	r1, #16
 80004a8:	430a      	orrs	r2, r1
 80004aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80004ac:	2003      	movs	r0, #3
 80004ae:	f000 f809 	bl	80004c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004b2:	f7ff ff79 	bl	80003a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004b6:	2300      	movs	r3, #0
}
 80004b8:	0018      	movs	r0, r3
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	40022000 	.word	0x40022000

080004c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004cc:	4b14      	ldr	r3, [pc, #80]	@ (8000520 <HAL_InitTick+0x5c>)
 80004ce:	681c      	ldr	r4, [r3, #0]
 80004d0:	4b14      	ldr	r3, [pc, #80]	@ (8000524 <HAL_InitTick+0x60>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	0019      	movs	r1, r3
 80004d6:	23fa      	movs	r3, #250	@ 0xfa
 80004d8:	0098      	lsls	r0, r3, #2
 80004da:	f7ff fe15 	bl	8000108 <__udivsi3>
 80004de:	0003      	movs	r3, r0
 80004e0:	0019      	movs	r1, r3
 80004e2:	0020      	movs	r0, r4
 80004e4:	f7ff fe10 	bl	8000108 <__udivsi3>
 80004e8:	0003      	movs	r3, r0
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 f92f 	bl	800074e <HAL_SYSTICK_Config>
 80004f0:	1e03      	subs	r3, r0, #0
 80004f2:	d001      	beq.n	80004f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80004f4:	2301      	movs	r3, #1
 80004f6:	e00f      	b.n	8000518 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	d80b      	bhi.n	8000516 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fe:	6879      	ldr	r1, [r7, #4]
 8000500:	2301      	movs	r3, #1
 8000502:	425b      	negs	r3, r3
 8000504:	2200      	movs	r2, #0
 8000506:	0018      	movs	r0, r3
 8000508:	f000 f8fc 	bl	8000704 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800050c:	4b06      	ldr	r3, [pc, #24]	@ (8000528 <HAL_InitTick+0x64>)
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000512:	2300      	movs	r3, #0
 8000514:	e000      	b.n	8000518 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000516:	2301      	movs	r3, #1
}
 8000518:	0018      	movs	r0, r3
 800051a:	46bd      	mov	sp, r7
 800051c:	b003      	add	sp, #12
 800051e:	bd90      	pop	{r4, r7, pc}
 8000520:	20000000 	.word	0x20000000
 8000524:	20000008 	.word	0x20000008
 8000528:	20000004 	.word	0x20000004

0800052c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000530:	4b05      	ldr	r3, [pc, #20]	@ (8000548 <HAL_IncTick+0x1c>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	001a      	movs	r2, r3
 8000536:	4b05      	ldr	r3, [pc, #20]	@ (800054c <HAL_IncTick+0x20>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	18d2      	adds	r2, r2, r3
 800053c:	4b03      	ldr	r3, [pc, #12]	@ (800054c <HAL_IncTick+0x20>)
 800053e:	601a      	str	r2, [r3, #0]
}
 8000540:	46c0      	nop			@ (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	46c0      	nop			@ (mov r8, r8)
 8000548:	20000008 	.word	0x20000008
 800054c:	200001c4 	.word	0x200001c4

08000550 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  return uwTick;
 8000554:	4b02      	ldr	r3, [pc, #8]	@ (8000560 <HAL_GetTick+0x10>)
 8000556:	681b      	ldr	r3, [r3, #0]
}
 8000558:	0018      	movs	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			@ (mov r8, r8)
 8000560:	200001c4 	.word	0x200001c4

08000564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff fff0 	bl	8000550 <HAL_GetTick>
 8000570:	0003      	movs	r3, r0
 8000572:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	3301      	adds	r3, #1
 800057c:	d005      	beq.n	800058a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	4b0a      	ldr	r3, [pc, #40]	@ (80005a8 <HAL_Delay+0x44>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	001a      	movs	r2, r3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	189b      	adds	r3, r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800058a:	46c0      	nop			@ (mov r8, r8)
 800058c:	f7ff ffe0 	bl	8000550 <HAL_GetTick>
 8000590:	0002      	movs	r2, r0
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	429a      	cmp	r2, r3
 800059a:	d8f7      	bhi.n	800058c <HAL_Delay+0x28>
  {
  }
}
 800059c:	46c0      	nop			@ (mov r8, r8)
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b004      	add	sp, #16
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	20000008 	.word	0x20000008

080005ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	0002      	movs	r2, r0
 80005b4:	1dfb      	adds	r3, r7, #7
 80005b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	1dfb      	adds	r3, r7, #7
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80005be:	d809      	bhi.n	80005d4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c0:	1dfb      	adds	r3, r7, #7
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	001a      	movs	r2, r3
 80005c6:	231f      	movs	r3, #31
 80005c8:	401a      	ands	r2, r3
 80005ca:	4b04      	ldr	r3, [pc, #16]	@ (80005dc <__NVIC_EnableIRQ+0x30>)
 80005cc:	2101      	movs	r1, #1
 80005ce:	4091      	lsls	r1, r2
 80005d0:	000a      	movs	r2, r1
 80005d2:	601a      	str	r2, [r3, #0]
  }
}
 80005d4:	46c0      	nop			@ (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b002      	add	sp, #8
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	e000e100 	.word	0xe000e100

080005e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	0002      	movs	r2, r0
 80005e8:	6039      	str	r1, [r7, #0]
 80005ea:	1dfb      	adds	r3, r7, #7
 80005ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80005ee:	1dfb      	adds	r3, r7, #7
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80005f4:	d828      	bhi.n	8000648 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005f6:	4a2f      	ldr	r2, [pc, #188]	@ (80006b4 <__NVIC_SetPriority+0xd4>)
 80005f8:	1dfb      	adds	r3, r7, #7
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	b25b      	sxtb	r3, r3
 80005fe:	089b      	lsrs	r3, r3, #2
 8000600:	33c0      	adds	r3, #192	@ 0xc0
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	589b      	ldr	r3, [r3, r2]
 8000606:	1dfa      	adds	r2, r7, #7
 8000608:	7812      	ldrb	r2, [r2, #0]
 800060a:	0011      	movs	r1, r2
 800060c:	2203      	movs	r2, #3
 800060e:	400a      	ands	r2, r1
 8000610:	00d2      	lsls	r2, r2, #3
 8000612:	21ff      	movs	r1, #255	@ 0xff
 8000614:	4091      	lsls	r1, r2
 8000616:	000a      	movs	r2, r1
 8000618:	43d2      	mvns	r2, r2
 800061a:	401a      	ands	r2, r3
 800061c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	019b      	lsls	r3, r3, #6
 8000622:	22ff      	movs	r2, #255	@ 0xff
 8000624:	401a      	ands	r2, r3
 8000626:	1dfb      	adds	r3, r7, #7
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	0018      	movs	r0, r3
 800062c:	2303      	movs	r3, #3
 800062e:	4003      	ands	r3, r0
 8000630:	00db      	lsls	r3, r3, #3
 8000632:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000634:	481f      	ldr	r0, [pc, #124]	@ (80006b4 <__NVIC_SetPriority+0xd4>)
 8000636:	1dfb      	adds	r3, r7, #7
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b25b      	sxtb	r3, r3
 800063c:	089b      	lsrs	r3, r3, #2
 800063e:	430a      	orrs	r2, r1
 8000640:	33c0      	adds	r3, #192	@ 0xc0
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000646:	e031      	b.n	80006ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000648:	4a1b      	ldr	r2, [pc, #108]	@ (80006b8 <__NVIC_SetPriority+0xd8>)
 800064a:	1dfb      	adds	r3, r7, #7
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	0019      	movs	r1, r3
 8000650:	230f      	movs	r3, #15
 8000652:	400b      	ands	r3, r1
 8000654:	3b08      	subs	r3, #8
 8000656:	089b      	lsrs	r3, r3, #2
 8000658:	3306      	adds	r3, #6
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	18d3      	adds	r3, r2, r3
 800065e:	3304      	adds	r3, #4
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	1dfa      	adds	r2, r7, #7
 8000664:	7812      	ldrb	r2, [r2, #0]
 8000666:	0011      	movs	r1, r2
 8000668:	2203      	movs	r2, #3
 800066a:	400a      	ands	r2, r1
 800066c:	00d2      	lsls	r2, r2, #3
 800066e:	21ff      	movs	r1, #255	@ 0xff
 8000670:	4091      	lsls	r1, r2
 8000672:	000a      	movs	r2, r1
 8000674:	43d2      	mvns	r2, r2
 8000676:	401a      	ands	r2, r3
 8000678:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	019b      	lsls	r3, r3, #6
 800067e:	22ff      	movs	r2, #255	@ 0xff
 8000680:	401a      	ands	r2, r3
 8000682:	1dfb      	adds	r3, r7, #7
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	0018      	movs	r0, r3
 8000688:	2303      	movs	r3, #3
 800068a:	4003      	ands	r3, r0
 800068c:	00db      	lsls	r3, r3, #3
 800068e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000690:	4809      	ldr	r0, [pc, #36]	@ (80006b8 <__NVIC_SetPriority+0xd8>)
 8000692:	1dfb      	adds	r3, r7, #7
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	001c      	movs	r4, r3
 8000698:	230f      	movs	r3, #15
 800069a:	4023      	ands	r3, r4
 800069c:	3b08      	subs	r3, #8
 800069e:	089b      	lsrs	r3, r3, #2
 80006a0:	430a      	orrs	r2, r1
 80006a2:	3306      	adds	r3, #6
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	18c3      	adds	r3, r0, r3
 80006a8:	3304      	adds	r3, #4
 80006aa:	601a      	str	r2, [r3, #0]
}
 80006ac:	46c0      	nop			@ (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b003      	add	sp, #12
 80006b2:	bd90      	pop	{r4, r7, pc}
 80006b4:	e000e100 	.word	0xe000e100
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	1e5a      	subs	r2, r3, #1
 80006c8:	2380      	movs	r3, #128	@ 0x80
 80006ca:	045b      	lsls	r3, r3, #17
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d301      	bcc.n	80006d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006d0:	2301      	movs	r3, #1
 80006d2:	e010      	b.n	80006f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <SysTick_Config+0x44>)
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	3a01      	subs	r2, #1
 80006da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006dc:	2301      	movs	r3, #1
 80006de:	425b      	negs	r3, r3
 80006e0:	2103      	movs	r1, #3
 80006e2:	0018      	movs	r0, r3
 80006e4:	f7ff ff7c 	bl	80005e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e8:	4b05      	ldr	r3, [pc, #20]	@ (8000700 <SysTick_Config+0x44>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ee:	4b04      	ldr	r3, [pc, #16]	@ (8000700 <SysTick_Config+0x44>)
 80006f0:	2207      	movs	r2, #7
 80006f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	0018      	movs	r0, r3
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b002      	add	sp, #8
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			@ (mov r8, r8)
 8000700:	e000e010 	.word	0xe000e010

08000704 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	60b9      	str	r1, [r7, #8]
 800070c:	607a      	str	r2, [r7, #4]
 800070e:	210f      	movs	r1, #15
 8000710:	187b      	adds	r3, r7, r1
 8000712:	1c02      	adds	r2, r0, #0
 8000714:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000716:	68ba      	ldr	r2, [r7, #8]
 8000718:	187b      	adds	r3, r7, r1
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b25b      	sxtb	r3, r3
 800071e:	0011      	movs	r1, r2
 8000720:	0018      	movs	r0, r3
 8000722:	f7ff ff5d 	bl	80005e0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000726:	46c0      	nop			@ (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b004      	add	sp, #16
 800072c:	bd80      	pop	{r7, pc}

0800072e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	0002      	movs	r2, r0
 8000736:	1dfb      	adds	r3, r7, #7
 8000738:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800073a:	1dfb      	adds	r3, r7, #7
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b25b      	sxtb	r3, r3
 8000740:	0018      	movs	r0, r3
 8000742:	f7ff ff33 	bl	80005ac <__NVIC_EnableIRQ>
}
 8000746:	46c0      	nop			@ (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b002      	add	sp, #8
 800074c:	bd80      	pop	{r7, pc}

0800074e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	0018      	movs	r0, r3
 800075a:	f7ff ffaf 	bl	80006bc <SysTick_Config>
 800075e:	0003      	movs	r3, r0
}
 8000760:	0018      	movs	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	b002      	add	sp, #8
 8000766:	bd80      	pop	{r7, pc}

08000768 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800076a:	b087      	sub	sp, #28
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	603a      	str	r2, [r7, #0]
 8000774:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000776:	2317      	movs	r3, #23
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 800077e:	2316      	movs	r3, #22
 8000780:	18fb      	adds	r3, r7, r3
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8000786:	2315      	movs	r3, #21
 8000788:	18fb      	adds	r3, r7, r3
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800078e:	4b3e      	ldr	r3, [pc, #248]	@ (8000888 <HAL_FLASH_Program+0x120>)
 8000790:	7e1b      	ldrb	r3, [r3, #24]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d101      	bne.n	800079a <HAL_FLASH_Program+0x32>
 8000796:	2302      	movs	r3, #2
 8000798:	e072      	b.n	8000880 <HAL_FLASH_Program+0x118>
 800079a:	4b3b      	ldr	r3, [pc, #236]	@ (8000888 <HAL_FLASH_Program+0x120>)
 800079c:	2201      	movs	r2, #1
 800079e:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80007a0:	2317      	movs	r3, #23
 80007a2:	18fe      	adds	r6, r7, r3
 80007a4:	4b39      	ldr	r3, [pc, #228]	@ (800088c <HAL_FLASH_Program+0x124>)
 80007a6:	0018      	movs	r0, r3
 80007a8:	f000 f8c4 	bl	8000934 <FLASH_WaitForLastOperation>
 80007ac:	0003      	movs	r3, r0
 80007ae:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 80007b0:	2317      	movs	r3, #23
 80007b2:	18fb      	adds	r3, r7, r3
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d15c      	bne.n	8000874 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d104      	bne.n	80007ca <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80007c0:	2315      	movs	r3, #21
 80007c2:	18fb      	adds	r3, r7, r3
 80007c4:	2201      	movs	r2, #1
 80007c6:	701a      	strb	r2, [r3, #0]
 80007c8:	e00b      	b.n	80007e2 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d104      	bne.n	80007da <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80007d0:	2315      	movs	r3, #21
 80007d2:	18fb      	adds	r3, r7, r3
 80007d4:	2202      	movs	r2, #2
 80007d6:	701a      	strb	r2, [r3, #0]
 80007d8:	e003      	b.n	80007e2 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80007da:	2315      	movs	r3, #21
 80007dc:	18fb      	adds	r3, r7, r3
 80007de:	2204      	movs	r2, #4
 80007e0:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 80007e2:	2316      	movs	r3, #22
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
 80007ea:	e039      	b.n	8000860 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80007ec:	2116      	movs	r1, #22
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	005a      	lsls	r2, r3, #1
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	18d0      	adds	r0, r2, r3
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	011b      	lsls	r3, r3, #4
 80007fe:	001a      	movs	r2, r3
 8000800:	3a20      	subs	r2, #32
 8000802:	2a00      	cmp	r2, #0
 8000804:	db03      	blt.n	800080e <HAL_FLASH_Program+0xa6>
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	40d1      	lsrs	r1, r2
 800080a:	000c      	movs	r4, r1
 800080c:	e008      	b.n	8000820 <HAL_FLASH_Program+0xb8>
 800080e:	2220      	movs	r2, #32
 8000810:	1ad2      	subs	r2, r2, r3
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	4091      	lsls	r1, r2
 8000816:	000a      	movs	r2, r1
 8000818:	6839      	ldr	r1, [r7, #0]
 800081a:	40d9      	lsrs	r1, r3
 800081c:	000c      	movs	r4, r1
 800081e:	4314      	orrs	r4, r2
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	40da      	lsrs	r2, r3
 8000824:	0015      	movs	r5, r2
 8000826:	b2a3      	uxth	r3, r4
 8000828:	0019      	movs	r1, r3
 800082a:	f000 f867 	bl	80008fc <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800082e:	2317      	movs	r3, #23
 8000830:	18fe      	adds	r6, r7, r3
 8000832:	4b16      	ldr	r3, [pc, #88]	@ (800088c <HAL_FLASH_Program+0x124>)
 8000834:	0018      	movs	r0, r3
 8000836:	f000 f87d 	bl	8000934 <FLASH_WaitForLastOperation>
 800083a:	0003      	movs	r3, r0
 800083c:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800083e:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <HAL_FLASH_Program+0x128>)
 8000840:	691a      	ldr	r2, [r3, #16]
 8000842:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <HAL_FLASH_Program+0x128>)
 8000844:	2101      	movs	r1, #1
 8000846:	438a      	bics	r2, r1
 8000848:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 800084a:	2317      	movs	r3, #23
 800084c:	18fb      	adds	r3, r7, r3
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d10e      	bne.n	8000872 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8000854:	2116      	movs	r1, #22
 8000856:	187b      	adds	r3, r7, r1
 8000858:	781a      	ldrb	r2, [r3, #0]
 800085a:	187b      	adds	r3, r7, r1
 800085c:	3201      	adds	r2, #1
 800085e:	701a      	strb	r2, [r3, #0]
 8000860:	2316      	movs	r3, #22
 8000862:	18fa      	adds	r2, r7, r3
 8000864:	2315      	movs	r3, #21
 8000866:	18fb      	adds	r3, r7, r3
 8000868:	7812      	ldrb	r2, [r2, #0]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	429a      	cmp	r2, r3
 800086e:	d3bd      	bcc.n	80007ec <HAL_FLASH_Program+0x84>
 8000870:	e000      	b.n	8000874 <HAL_FLASH_Program+0x10c>
      {
        break;
 8000872:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000874:	4b04      	ldr	r3, [pc, #16]	@ (8000888 <HAL_FLASH_Program+0x120>)
 8000876:	2200      	movs	r2, #0
 8000878:	761a      	strb	r2, [r3, #24]

  return status;
 800087a:	2317      	movs	r3, #23
 800087c:	18fb      	adds	r3, r7, r3
 800087e:	781b      	ldrb	r3, [r3, #0]
}
 8000880:	0018      	movs	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	b007      	add	sp, #28
 8000886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000888:	200001c8 	.word	0x200001c8
 800088c:	0000c350 	.word	0x0000c350
 8000890:	40022000 	.word	0x40022000

08000894 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80008a0:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <HAL_FLASH_Unlock+0x40>)
 80008a2:	691b      	ldr	r3, [r3, #16]
 80008a4:	2280      	movs	r2, #128	@ 0x80
 80008a6:	4013      	ands	r3, r2
 80008a8:	d00d      	beq.n	80008c6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80008aa:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <HAL_FLASH_Unlock+0x40>)
 80008ac:	4a0a      	ldr	r2, [pc, #40]	@ (80008d8 <HAL_FLASH_Unlock+0x44>)
 80008ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80008b0:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <HAL_FLASH_Unlock+0x40>)
 80008b2:	4a0a      	ldr	r2, [pc, #40]	@ (80008dc <HAL_FLASH_Unlock+0x48>)
 80008b4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80008b6:	4b07      	ldr	r3, [pc, #28]	@ (80008d4 <HAL_FLASH_Unlock+0x40>)
 80008b8:	691b      	ldr	r3, [r3, #16]
 80008ba:	2280      	movs	r2, #128	@ 0x80
 80008bc:	4013      	ands	r3, r2
 80008be:	d002      	beq.n	80008c6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80008c0:	1dfb      	adds	r3, r7, #7
 80008c2:	2201      	movs	r2, #1
 80008c4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	781b      	ldrb	r3, [r3, #0]
}
 80008ca:	0018      	movs	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b002      	add	sp, #8
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	40022000 	.word	0x40022000
 80008d8:	45670123 	.word	0x45670123
 80008dc:	cdef89ab 	.word	0xcdef89ab

080008e0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80008e4:	4b04      	ldr	r3, [pc, #16]	@ (80008f8 <HAL_FLASH_Lock+0x18>)
 80008e6:	691a      	ldr	r2, [r3, #16]
 80008e8:	4b03      	ldr	r3, [pc, #12]	@ (80008f8 <HAL_FLASH_Lock+0x18>)
 80008ea:	2180      	movs	r1, #128	@ 0x80
 80008ec:	430a      	orrs	r2, r1
 80008ee:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	0018      	movs	r0, r3
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40022000 	.word	0x40022000

080008fc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	000a      	movs	r2, r1
 8000906:	1cbb      	adds	r3, r7, #2
 8000908:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800090a:	4b08      	ldr	r3, [pc, #32]	@ (800092c <FLASH_Program_HalfWord+0x30>)
 800090c:	2200      	movs	r2, #0
 800090e:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000910:	4b07      	ldr	r3, [pc, #28]	@ (8000930 <FLASH_Program_HalfWord+0x34>)
 8000912:	691a      	ldr	r2, [r3, #16]
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <FLASH_Program_HalfWord+0x34>)
 8000916:	2101      	movs	r1, #1
 8000918:	430a      	orrs	r2, r1
 800091a:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	1cba      	adds	r2, r7, #2
 8000920:	8812      	ldrh	r2, [r2, #0]
 8000922:	801a      	strh	r2, [r3, #0]
}
 8000924:	46c0      	nop			@ (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b002      	add	sp, #8
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200001c8 	.word	0x200001c8
 8000930:	40022000 	.word	0x40022000

08000934 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800093c:	f7ff fe08 	bl	8000550 <HAL_GetTick>
 8000940:	0003      	movs	r3, r0
 8000942:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000944:	e00f      	b.n	8000966 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3301      	adds	r3, #1
 800094a:	d00c      	beq.n	8000966 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d007      	beq.n	8000962 <FLASH_WaitForLastOperation+0x2e>
 8000952:	f7ff fdfd 	bl	8000550 <HAL_GetTick>
 8000956:	0002      	movs	r2, r0
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	429a      	cmp	r2, r3
 8000960:	d201      	bcs.n	8000966 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000962:	2303      	movs	r3, #3
 8000964:	e01f      	b.n	80009a6 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000966:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <FLASH_WaitForLastOperation+0x7c>)
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	2201      	movs	r2, #1
 800096c:	4013      	ands	r3, r2
 800096e:	2b01      	cmp	r3, #1
 8000970:	d0e9      	beq.n	8000946 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000972:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <FLASH_WaitForLastOperation+0x7c>)
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	2220      	movs	r2, #32
 8000978:	4013      	ands	r3, r2
 800097a:	2b20      	cmp	r3, #32
 800097c:	d102      	bne.n	8000984 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800097e:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <FLASH_WaitForLastOperation+0x7c>)
 8000980:	2220      	movs	r2, #32
 8000982:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000984:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <FLASH_WaitForLastOperation+0x7c>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	2210      	movs	r2, #16
 800098a:	4013      	ands	r3, r2
 800098c:	2b10      	cmp	r3, #16
 800098e:	d005      	beq.n	800099c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000990:	4b07      	ldr	r3, [pc, #28]	@ (80009b0 <FLASH_WaitForLastOperation+0x7c>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	2204      	movs	r2, #4
 8000996:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000998:	2b04      	cmp	r3, #4
 800099a:	d103      	bne.n	80009a4 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800099c:	f000 f80a 	bl	80009b4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80009a0:	2301      	movs	r3, #1
 80009a2:	e000      	b.n	80009a6 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	0018      	movs	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b004      	add	sp, #16
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	40022000 	.word	0x40022000

080009b4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80009be:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <FLASH_SetErrorCode+0x58>)
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	2210      	movs	r2, #16
 80009c4:	4013      	ands	r3, r2
 80009c6:	2b10      	cmp	r3, #16
 80009c8:	d109      	bne.n	80009de <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <FLASH_SetErrorCode+0x5c>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	2202      	movs	r2, #2
 80009d0:	431a      	orrs	r2, r3
 80009d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <FLASH_SetErrorCode+0x5c>)
 80009d4:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2210      	movs	r2, #16
 80009da:	4313      	orrs	r3, r2
 80009dc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <FLASH_SetErrorCode+0x58>)
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	2204      	movs	r2, #4
 80009e4:	4013      	ands	r3, r2
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	d109      	bne.n	80009fe <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <FLASH_SetErrorCode+0x5c>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	2201      	movs	r2, #1
 80009f0:	431a      	orrs	r2, r3
 80009f2:	4b07      	ldr	r3, [pc, #28]	@ (8000a10 <FLASH_SetErrorCode+0x5c>)
 80009f4:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2204      	movs	r2, #4
 80009fa:	4313      	orrs	r3, r2
 80009fc:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80009fe:	4b03      	ldr	r3, [pc, #12]	@ (8000a0c <FLASH_SetErrorCode+0x58>)
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	60da      	str	r2, [r3, #12]
}  
 8000a04:	46c0      	nop			@ (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b002      	add	sp, #8
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40022000 	.word	0x40022000
 8000a10:	200001c8 	.word	0x200001c8

08000a14 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000a14:	b5b0      	push	{r4, r5, r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000a1e:	230f      	movs	r3, #15
 8000a20:	18fb      	adds	r3, r7, r3
 8000a22:	2201      	movs	r2, #1
 8000a24:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000a2a:	4b32      	ldr	r3, [pc, #200]	@ (8000af4 <HAL_FLASHEx_Erase+0xe0>)
 8000a2c:	7e1b      	ldrb	r3, [r3, #24]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d101      	bne.n	8000a36 <HAL_FLASHEx_Erase+0x22>
 8000a32:	2302      	movs	r3, #2
 8000a34:	e05a      	b.n	8000aec <HAL_FLASHEx_Erase+0xd8>
 8000a36:	4b2f      	ldr	r3, [pc, #188]	@ (8000af4 <HAL_FLASHEx_Erase+0xe0>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d116      	bne.n	8000a72 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000a44:	4b2c      	ldr	r3, [pc, #176]	@ (8000af8 <HAL_FLASHEx_Erase+0xe4>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f7ff ff74 	bl	8000934 <FLASH_WaitForLastOperation>
 8000a4c:	1e03      	subs	r3, r0, #0
 8000a4e:	d147      	bne.n	8000ae0 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8000a50:	f000 f856 	bl	8000b00 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000a54:	230f      	movs	r3, #15
 8000a56:	18fc      	adds	r4, r7, r3
 8000a58:	4b27      	ldr	r3, [pc, #156]	@ (8000af8 <HAL_FLASHEx_Erase+0xe4>)
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f7ff ff6a 	bl	8000934 <FLASH_WaitForLastOperation>
 8000a60:	0003      	movs	r3, r0
 8000a62:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000a64:	4b25      	ldr	r3, [pc, #148]	@ (8000afc <HAL_FLASHEx_Erase+0xe8>)
 8000a66:	691a      	ldr	r2, [r3, #16]
 8000a68:	4b24      	ldr	r3, [pc, #144]	@ (8000afc <HAL_FLASHEx_Erase+0xe8>)
 8000a6a:	2104      	movs	r1, #4
 8000a6c:	438a      	bics	r2, r1
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	e036      	b.n	8000ae0 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000a72:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <HAL_FLASHEx_Erase+0xe4>)
 8000a74:	0018      	movs	r0, r3
 8000a76:	f7ff ff5d 	bl	8000934 <FLASH_WaitForLastOperation>
 8000a7a:	1e03      	subs	r3, r0, #0
 8000a7c:	d130      	bne.n	8000ae0 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	2201      	movs	r2, #1
 8000a82:	4252      	negs	r2, r2
 8000a84:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	e01f      	b.n	8000ace <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 f84d 	bl	8000b30 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000a96:	250f      	movs	r5, #15
 8000a98:	197c      	adds	r4, r7, r5
 8000a9a:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <HAL_FLASHEx_Erase+0xe4>)
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f7ff ff49 	bl	8000934 <FLASH_WaitForLastOperation>
 8000aa2:	0003      	movs	r3, r0
 8000aa4:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <HAL_FLASHEx_Erase+0xe8>)
 8000aa8:	691a      	ldr	r2, [r3, #16]
 8000aaa:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <HAL_FLASHEx_Erase+0xe8>)
 8000aac:	2102      	movs	r1, #2
 8000aae:	438a      	bics	r2, r1
 8000ab0:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8000ab2:	197b      	adds	r3, r7, r5
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	68ba      	ldr	r2, [r7, #8]
 8000abe:	601a      	str	r2, [r3, #0]
            break;
 8000ac0:	e00e      	b.n	8000ae0 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	2280      	movs	r2, #128	@ 0x80
 8000ac6:	0112      	lsls	r2, r2, #4
 8000ac8:	4694      	mov	ip, r2
 8000aca:	4463      	add	r3, ip
 8000acc:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	02da      	lsls	r2, r3, #11
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	18d3      	adds	r3, r2, r3
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d3d6      	bcc.n	8000a8e <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000ae0:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <HAL_FLASHEx_Erase+0xe0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	761a      	strb	r2, [r3, #24]

  return status;
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	781b      	ldrb	r3, [r3, #0]
}
 8000aec:	0018      	movs	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b004      	add	sp, #16
 8000af2:	bdb0      	pop	{r4, r5, r7, pc}
 8000af4:	200001c8 	.word	0x200001c8
 8000af8:	0000c350 	.word	0x0000c350
 8000afc:	40022000 	.word	0x40022000

08000b00 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b04:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <FLASH_MassErase+0x28>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000b0a:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <FLASH_MassErase+0x2c>)
 8000b0c:	691a      	ldr	r2, [r3, #16]
 8000b0e:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <FLASH_MassErase+0x2c>)
 8000b10:	2104      	movs	r1, #4
 8000b12:	430a      	orrs	r2, r1
 8000b14:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000b16:	4b05      	ldr	r3, [pc, #20]	@ (8000b2c <FLASH_MassErase+0x2c>)
 8000b18:	691a      	ldr	r2, [r3, #16]
 8000b1a:	4b04      	ldr	r3, [pc, #16]	@ (8000b2c <FLASH_MassErase+0x2c>)
 8000b1c:	2140      	movs	r1, #64	@ 0x40
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	611a      	str	r2, [r3, #16]
}
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200001c8 	.word	0x200001c8
 8000b2c:	40022000 	.word	0x40022000

08000b30 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b38:	4b0a      	ldr	r3, [pc, #40]	@ (8000b64 <FLASH_PageErase+0x34>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b68 <FLASH_PageErase+0x38>)
 8000b40:	691a      	ldr	r2, [r3, #16]
 8000b42:	4b09      	ldr	r3, [pc, #36]	@ (8000b68 <FLASH_PageErase+0x38>)
 8000b44:	2102      	movs	r1, #2
 8000b46:	430a      	orrs	r2, r1
 8000b48:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000b4a:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <FLASH_PageErase+0x38>)
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000b50:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <FLASH_PageErase+0x38>)
 8000b52:	691a      	ldr	r2, [r3, #16]
 8000b54:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <FLASH_PageErase+0x38>)
 8000b56:	2140      	movs	r1, #64	@ 0x40
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	611a      	str	r2, [r3, #16]
}
 8000b5c:	46c0      	nop			@ (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b002      	add	sp, #8
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	200001c8 	.word	0x200001c8
 8000b68:	40022000 	.word	0x40022000

08000b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7a:	e14f      	b.n	8000e1c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2101      	movs	r1, #1
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	4091      	lsls	r1, r2
 8000b86:	000a      	movs	r2, r1
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d100      	bne.n	8000b94 <HAL_GPIO_Init+0x28>
 8000b92:	e140      	b.n	8000e16 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2203      	movs	r2, #3
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d005      	beq.n	8000bac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d130      	bne.n	8000c0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	409a      	lsls	r2, r3
 8000bba:	0013      	movs	r3, r2
 8000bbc:	43da      	mvns	r2, r3
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	68da      	ldr	r2, [r3, #12]
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	409a      	lsls	r2, r3
 8000bce:	0013      	movs	r3, r2
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000be2:	2201      	movs	r2, #1
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	409a      	lsls	r2, r3
 8000be8:	0013      	movs	r3, r2
 8000bea:	43da      	mvns	r2, r3
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	091b      	lsrs	r3, r3, #4
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	409a      	lsls	r2, r3
 8000c00:	0013      	movs	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2203      	movs	r2, #3
 8000c14:	4013      	ands	r3, r2
 8000c16:	2b03      	cmp	r3, #3
 8000c18:	d017      	beq.n	8000c4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	2203      	movs	r2, #3
 8000c26:	409a      	lsls	r2, r3
 8000c28:	0013      	movs	r3, r2
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	409a      	lsls	r2, r3
 8000c3c:	0013      	movs	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2203      	movs	r2, #3
 8000c50:	4013      	ands	r3, r2
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d123      	bne.n	8000c9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	08da      	lsrs	r2, r3, #3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	3208      	adds	r2, #8
 8000c5e:	0092      	lsls	r2, r2, #2
 8000c60:	58d3      	ldr	r3, [r2, r3]
 8000c62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	2207      	movs	r2, #7
 8000c68:	4013      	ands	r3, r2
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	220f      	movs	r2, #15
 8000c6e:	409a      	lsls	r2, r3
 8000c70:	0013      	movs	r3, r2
 8000c72:	43da      	mvns	r2, r3
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	4013      	ands	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	691a      	ldr	r2, [r3, #16]
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	2107      	movs	r1, #7
 8000c82:	400b      	ands	r3, r1
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	409a      	lsls	r2, r3
 8000c88:	0013      	movs	r3, r2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	08da      	lsrs	r2, r3, #3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3208      	adds	r2, #8
 8000c98:	0092      	lsls	r2, r2, #2
 8000c9a:	6939      	ldr	r1, [r7, #16]
 8000c9c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2203      	movs	r2, #3
 8000caa:	409a      	lsls	r2, r3
 8000cac:	0013      	movs	r3, r2
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2203      	movs	r2, #3
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	409a      	lsls	r2, r3
 8000cc4:	0013      	movs	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	23c0      	movs	r3, #192	@ 0xc0
 8000cd8:	029b      	lsls	r3, r3, #10
 8000cda:	4013      	ands	r3, r2
 8000cdc:	d100      	bne.n	8000ce0 <HAL_GPIO_Init+0x174>
 8000cde:	e09a      	b.n	8000e16 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce0:	4b54      	ldr	r3, [pc, #336]	@ (8000e34 <HAL_GPIO_Init+0x2c8>)
 8000ce2:	699a      	ldr	r2, [r3, #24]
 8000ce4:	4b53      	ldr	r3, [pc, #332]	@ (8000e34 <HAL_GPIO_Init+0x2c8>)
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	619a      	str	r2, [r3, #24]
 8000cec:	4b51      	ldr	r3, [pc, #324]	@ (8000e34 <HAL_GPIO_Init+0x2c8>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cf8:	4a4f      	ldr	r2, [pc, #316]	@ (8000e38 <HAL_GPIO_Init+0x2cc>)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	089b      	lsrs	r3, r3, #2
 8000cfe:	3302      	adds	r3, #2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	589b      	ldr	r3, [r3, r2]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	2203      	movs	r2, #3
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	220f      	movs	r2, #15
 8000d10:	409a      	lsls	r2, r3
 8000d12:	0013      	movs	r3, r2
 8000d14:	43da      	mvns	r2, r3
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	2390      	movs	r3, #144	@ 0x90
 8000d20:	05db      	lsls	r3, r3, #23
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d013      	beq.n	8000d4e <HAL_GPIO_Init+0x1e2>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a44      	ldr	r2, [pc, #272]	@ (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d00d      	beq.n	8000d4a <HAL_GPIO_Init+0x1de>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a43      	ldr	r2, [pc, #268]	@ (8000e40 <HAL_GPIO_Init+0x2d4>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d007      	beq.n	8000d46 <HAL_GPIO_Init+0x1da>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a42      	ldr	r2, [pc, #264]	@ (8000e44 <HAL_GPIO_Init+0x2d8>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d101      	bne.n	8000d42 <HAL_GPIO_Init+0x1d6>
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e006      	b.n	8000d50 <HAL_GPIO_Init+0x1e4>
 8000d42:	2305      	movs	r3, #5
 8000d44:	e004      	b.n	8000d50 <HAL_GPIO_Init+0x1e4>
 8000d46:	2302      	movs	r3, #2
 8000d48:	e002      	b.n	8000d50 <HAL_GPIO_Init+0x1e4>
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e000      	b.n	8000d50 <HAL_GPIO_Init+0x1e4>
 8000d4e:	2300      	movs	r3, #0
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	2103      	movs	r1, #3
 8000d54:	400a      	ands	r2, r1
 8000d56:	0092      	lsls	r2, r2, #2
 8000d58:	4093      	lsls	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d60:	4935      	ldr	r1, [pc, #212]	@ (8000e38 <HAL_GPIO_Init+0x2cc>)
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	089b      	lsrs	r3, r3, #2
 8000d66:	3302      	adds	r3, #2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d6e:	4b36      	ldr	r3, [pc, #216]	@ (8000e48 <HAL_GPIO_Init+0x2dc>)
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	43da      	mvns	r2, r3
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	2380      	movs	r3, #128	@ 0x80
 8000d84:	035b      	lsls	r3, r3, #13
 8000d86:	4013      	ands	r3, r2
 8000d88:	d003      	beq.n	8000d92 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d92:	4b2d      	ldr	r3, [pc, #180]	@ (8000e48 <HAL_GPIO_Init+0x2dc>)
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d98:	4b2b      	ldr	r3, [pc, #172]	@ (8000e48 <HAL_GPIO_Init+0x2dc>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	43da      	mvns	r2, r3
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	2380      	movs	r3, #128	@ 0x80
 8000dae:	039b      	lsls	r3, r3, #14
 8000db0:	4013      	ands	r3, r2
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dbc:	4b22      	ldr	r3, [pc, #136]	@ (8000e48 <HAL_GPIO_Init+0x2dc>)
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000dc2:	4b21      	ldr	r3, [pc, #132]	@ (8000e48 <HAL_GPIO_Init+0x2dc>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	2380      	movs	r3, #128	@ 0x80
 8000dd8:	029b      	lsls	r3, r3, #10
 8000dda:	4013      	ands	r3, r2
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000de6:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <HAL_GPIO_Init+0x2dc>)
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000dec:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <HAL_GPIO_Init+0x2dc>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	43da      	mvns	r2, r3
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685a      	ldr	r2, [r3, #4]
 8000e00:	2380      	movs	r3, #128	@ 0x80
 8000e02:	025b      	lsls	r3, r3, #9
 8000e04:	4013      	ands	r3, r2
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e10:	4b0d      	ldr	r3, [pc, #52]	@ (8000e48 <HAL_GPIO_Init+0x2dc>)
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	40da      	lsrs	r2, r3
 8000e24:	1e13      	subs	r3, r2, #0
 8000e26:	d000      	beq.n	8000e2a <HAL_GPIO_Init+0x2be>
 8000e28:	e6a8      	b.n	8000b7c <HAL_GPIO_Init+0x10>
  } 
}
 8000e2a:	46c0      	nop			@ (mov r8, r8)
 8000e2c:	46c0      	nop			@ (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b006      	add	sp, #24
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40010000 	.word	0x40010000
 8000e3c:	48000400 	.word	0x48000400
 8000e40:	48000800 	.word	0x48000800
 8000e44:	48000c00 	.word	0x48000c00
 8000e48:	40010400 	.word	0x40010400

08000e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	0008      	movs	r0, r1
 8000e56:	0011      	movs	r1, r2
 8000e58:	1cbb      	adds	r3, r7, #2
 8000e5a:	1c02      	adds	r2, r0, #0
 8000e5c:	801a      	strh	r2, [r3, #0]
 8000e5e:	1c7b      	adds	r3, r7, #1
 8000e60:	1c0a      	adds	r2, r1, #0
 8000e62:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e64:	1c7b      	adds	r3, r7, #1
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d004      	beq.n	8000e76 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e6c:	1cbb      	adds	r3, r7, #2
 8000e6e:	881a      	ldrh	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e74:	e003      	b.n	8000e7e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e76:	1cbb      	adds	r3, r7, #2
 8000e78:	881a      	ldrh	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e7e:	46c0      	nop			@ (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b002      	add	sp, #8
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d101      	bne.n	8000e9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e0e4      	b.n	8001064 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a73      	ldr	r2, [pc, #460]	@ (800106c <HAL_PCD_Init+0x1e4>)
 8000e9e:	5c9b      	ldrb	r3, [r3, r2]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d108      	bne.n	8000eb8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	23a4      	movs	r3, #164	@ 0xa4
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	2100      	movs	r1, #0
 8000eae:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f006 fe80 	bl	8007bb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a6c      	ldr	r2, [pc, #432]	@ (800106c <HAL_PCD_Init+0x1e4>)
 8000ebc:	2103      	movs	r1, #3
 8000ebe:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f002 fb13 	bl	80034f0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eca:	230f      	movs	r3, #15
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
 8000ed2:	e047      	b.n	8000f64 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ed4:	200f      	movs	r0, #15
 8000ed6:	183b      	adds	r3, r7, r0
 8000ed8:	781a      	ldrb	r2, [r3, #0]
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	0013      	movs	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	189b      	adds	r3, r3, r2
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	18cb      	adds	r3, r1, r3
 8000ee6:	3311      	adds	r3, #17
 8000ee8:	2201      	movs	r2, #1
 8000eea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000eec:	183b      	adds	r3, r7, r0
 8000eee:	781a      	ldrb	r2, [r3, #0]
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	0013      	movs	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	189b      	adds	r3, r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	18cb      	adds	r3, r1, r3
 8000efc:	3310      	adds	r3, #16
 8000efe:	183a      	adds	r2, r7, r0
 8000f00:	7812      	ldrb	r2, [r2, #0]
 8000f02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f04:	183b      	adds	r3, r7, r0
 8000f06:	781a      	ldrb	r2, [r3, #0]
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	0013      	movs	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	189b      	adds	r3, r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	18cb      	adds	r3, r1, r3
 8000f14:	3313      	adds	r3, #19
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f1a:	183b      	adds	r3, r7, r0
 8000f1c:	781a      	ldrb	r2, [r3, #0]
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	0013      	movs	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	189b      	adds	r3, r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	18cb      	adds	r3, r1, r3
 8000f2a:	3320      	adds	r3, #32
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f30:	183b      	adds	r3, r7, r0
 8000f32:	781a      	ldrb	r2, [r3, #0]
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	0013      	movs	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	189b      	adds	r3, r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	18cb      	adds	r3, r1, r3
 8000f40:	3324      	adds	r3, #36	@ 0x24
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f46:	183b      	adds	r3, r7, r0
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	1c5a      	adds	r2, r3, #1
 8000f4e:	0013      	movs	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	189b      	adds	r3, r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	2200      	movs	r2, #0
 8000f58:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f5a:	183b      	adds	r3, r7, r0
 8000f5c:	781a      	ldrb	r2, [r3, #0]
 8000f5e:	183b      	adds	r3, r7, r0
 8000f60:	3201      	adds	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	791b      	ldrb	r3, [r3, #4]
 8000f68:	210f      	movs	r1, #15
 8000f6a:	187a      	adds	r2, r7, r1
 8000f6c:	7812      	ldrb	r2, [r2, #0]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d3b0      	bcc.n	8000ed4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
 8000f78:	e056      	b.n	8001028 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f7a:	240f      	movs	r4, #15
 8000f7c:	193b      	adds	r3, r7, r4
 8000f7e:	781a      	ldrb	r2, [r3, #0]
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	2352      	movs	r3, #82	@ 0x52
 8000f84:	33ff      	adds	r3, #255	@ 0xff
 8000f86:	0019      	movs	r1, r3
 8000f88:	0013      	movs	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	189b      	adds	r3, r3, r2
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	18c3      	adds	r3, r0, r3
 8000f92:	185b      	adds	r3, r3, r1
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f98:	193b      	adds	r3, r7, r4
 8000f9a:	781a      	ldrb	r2, [r3, #0]
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	23a8      	movs	r3, #168	@ 0xa8
 8000fa0:	0059      	lsls	r1, r3, #1
 8000fa2:	0013      	movs	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	189b      	adds	r3, r3, r2
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	18c3      	adds	r3, r0, r3
 8000fac:	185b      	adds	r3, r3, r1
 8000fae:	193a      	adds	r2, r7, r4
 8000fb0:	7812      	ldrb	r2, [r2, #0]
 8000fb2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fb4:	193b      	adds	r3, r7, r4
 8000fb6:	781a      	ldrb	r2, [r3, #0]
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	2354      	movs	r3, #84	@ 0x54
 8000fbc:	33ff      	adds	r3, #255	@ 0xff
 8000fbe:	0019      	movs	r1, r3
 8000fc0:	0013      	movs	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	189b      	adds	r3, r3, r2
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	18c3      	adds	r3, r0, r3
 8000fca:	185b      	adds	r3, r3, r1
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fd0:	193b      	adds	r3, r7, r4
 8000fd2:	781a      	ldrb	r2, [r3, #0]
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	23b0      	movs	r3, #176	@ 0xb0
 8000fd8:	0059      	lsls	r1, r3, #1
 8000fda:	0013      	movs	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	189b      	adds	r3, r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	18c3      	adds	r3, r0, r3
 8000fe4:	185b      	adds	r3, r3, r1
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fea:	193b      	adds	r3, r7, r4
 8000fec:	781a      	ldrb	r2, [r3, #0]
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	23b2      	movs	r3, #178	@ 0xb2
 8000ff2:	0059      	lsls	r1, r3, #1
 8000ff4:	0013      	movs	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	189b      	adds	r3, r3, r2
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	18c3      	adds	r3, r0, r3
 8000ffe:	185b      	adds	r3, r3, r1
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001004:	193b      	adds	r3, r7, r4
 8001006:	781a      	ldrb	r2, [r3, #0]
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	23b4      	movs	r3, #180	@ 0xb4
 800100c:	0059      	lsls	r1, r3, #1
 800100e:	0013      	movs	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	189b      	adds	r3, r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	18c3      	adds	r3, r0, r3
 8001018:	185b      	adds	r3, r3, r1
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800101e:	193b      	adds	r3, r7, r4
 8001020:	781a      	ldrb	r2, [r3, #0]
 8001022:	193b      	adds	r3, r7, r4
 8001024:	3201      	adds	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	791b      	ldrb	r3, [r3, #4]
 800102c:	220f      	movs	r2, #15
 800102e:	18ba      	adds	r2, r7, r2
 8001030:	7812      	ldrb	r2, [r2, #0]
 8001032:	429a      	cmp	r2, r3
 8001034:	d3a1      	bcc.n	8000f7a <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6818      	ldr	r0, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6859      	ldr	r1, [r3, #4]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	f002 fa70 	bl	8003524 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a07      	ldr	r2, [pc, #28]	@ (800106c <HAL_PCD_Init+0x1e4>)
 800104e:	2101      	movs	r1, #1
 8001050:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	7a9b      	ldrb	r3, [r3, #10]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d103      	bne.n	8001062 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	0018      	movs	r0, r3
 800105e:	f001 fcd9 	bl	8002a14 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001062:	2300      	movs	r3, #0
}
 8001064:	0018      	movs	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	b005      	add	sp, #20
 800106a:	bd90      	pop	{r4, r7, pc}
 800106c:	00000291 	.word	0x00000291

08001070 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	23a4      	movs	r3, #164	@ 0xa4
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	5cd3      	ldrb	r3, [r2, r3]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d101      	bne.n	8001088 <HAL_PCD_Start+0x18>
 8001084:	2302      	movs	r3, #2
 8001086:	e014      	b.n	80010b2 <HAL_PCD_Start+0x42>
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	23a4      	movs	r3, #164	@ 0xa4
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	2101      	movs	r1, #1
 8001090:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	0018      	movs	r0, r3
 8001098:	f002 fa14 	bl	80034c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	0018      	movs	r0, r3
 80010a2:	f004 f849 	bl	8005138 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	23a4      	movs	r3, #164	@ 0xa4
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	2100      	movs	r1, #0
 80010ae:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	0018      	movs	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b002      	add	sp, #8
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	23a4      	movs	r3, #164	@ 0xa4
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	5cd3      	ldrb	r3, [r2, r3]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d101      	bne.n	80010d2 <HAL_PCD_Stop+0x18>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e014      	b.n	80010fc <HAL_PCD_Stop+0x42>
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	23a4      	movs	r3, #164	@ 0xa4
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	2101      	movs	r1, #1
 80010da:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_DISABLE(hpcd);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	0018      	movs	r0, r3
 80010e2:	f002 fa05 	bl	80034f0 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	0018      	movs	r0, r3
 80010ec:	f004 f83a 	bl	8005164 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	23a4      	movs	r3, #164	@ 0xa4
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	2100      	movs	r1, #0
 80010f8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	0018      	movs	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	b002      	add	sp, #8
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	0018      	movs	r0, r3
 8001112:	f004 f83a 	bl	800518a <USB_ReadInterrupts>
 8001116:	0003      	movs	r3, r0
 8001118:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	2380      	movs	r3, #128	@ 0x80
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	4013      	ands	r3, r2
 8001122:	d004      	beq.n	800112e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	0018      	movs	r0, r3
 8001128:	f000 faf6 	bl	8001718 <PCD_EP_ISR_Handler>

    return;
 800112c:	e11d      	b.n	800136a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	2380      	movs	r3, #128	@ 0x80
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	4013      	ands	r3, r2
 8001136:	d015      	beq.n	8001164 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2244      	movs	r2, #68	@ 0x44
 800113e:	5a9b      	ldrh	r3, [r3, r2]
 8001140:	b29a      	uxth	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	498a      	ldr	r1, [pc, #552]	@ (8001370 <HAL_PCD_IRQHandler+0x26c>)
 8001148:	400a      	ands	r2, r1
 800114a:	b291      	uxth	r1, r2
 800114c:	2244      	movs	r2, #68	@ 0x44
 800114e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	0018      	movs	r0, r3
 8001154:	f006 fdbb 	bl	8007cce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2100      	movs	r1, #0
 800115c:	0018      	movs	r0, r3
 800115e:	f000 f915 	bl	800138c <HAL_PCD_SetAddress>

    return;
 8001162:	e102      	b.n	800136a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	2380      	movs	r3, #128	@ 0x80
 8001168:	01db      	lsls	r3, r3, #7
 800116a:	4013      	ands	r3, r2
 800116c:	d00c      	beq.n	8001188 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2244      	movs	r2, #68	@ 0x44
 8001174:	5a9b      	ldrh	r3, [r3, r2]
 8001176:	b29a      	uxth	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	497d      	ldr	r1, [pc, #500]	@ (8001374 <HAL_PCD_IRQHandler+0x270>)
 800117e:	400a      	ands	r2, r1
 8001180:	b291      	uxth	r1, r2
 8001182:	2244      	movs	r2, #68	@ 0x44
 8001184:	5299      	strh	r1, [r3, r2]

    return;
 8001186:	e0f0      	b.n	800136a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	2380      	movs	r3, #128	@ 0x80
 800118c:	019b      	lsls	r3, r3, #6
 800118e:	4013      	ands	r3, r2
 8001190:	d00c      	beq.n	80011ac <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2244      	movs	r2, #68	@ 0x44
 8001198:	5a9b      	ldrh	r3, [r3, r2]
 800119a:	b29a      	uxth	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4975      	ldr	r1, [pc, #468]	@ (8001378 <HAL_PCD_IRQHandler+0x274>)
 80011a2:	400a      	ands	r2, r1
 80011a4:	b291      	uxth	r1, r2
 80011a6:	2244      	movs	r2, #68	@ 0x44
 80011a8:	5299      	strh	r1, [r3, r2]

    return;
 80011aa:	e0de      	b.n	800136a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80011ac:	68fa      	ldr	r2, [r7, #12]
 80011ae:	2380      	movs	r3, #128	@ 0x80
 80011b0:	015b      	lsls	r3, r3, #5
 80011b2:	4013      	ands	r3, r2
 80011b4:	d038      	beq.n	8001228 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2240      	movs	r2, #64	@ 0x40
 80011bc:	5a9b      	ldrh	r3, [r3, r2]
 80011be:	b29a      	uxth	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2104      	movs	r1, #4
 80011c6:	438a      	bics	r2, r1
 80011c8:	b291      	uxth	r1, r2
 80011ca:	2240      	movs	r2, #64	@ 0x40
 80011cc:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2240      	movs	r2, #64	@ 0x40
 80011d4:	5a9b      	ldrh	r3, [r3, r2]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2108      	movs	r1, #8
 80011de:	438a      	bics	r2, r1
 80011e0:	b291      	uxth	r1, r2
 80011e2:	2240      	movs	r2, #64	@ 0x40
 80011e4:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	23b2      	movs	r3, #178	@ 0xb2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	5cd3      	ldrb	r3, [r2, r3]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d109      	bne.n	8001206 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	23b2      	movs	r3, #178	@ 0xb2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	2100      	movs	r1, #0
 80011fa:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2100      	movs	r1, #0
 8001200:	0018      	movs	r0, r3
 8001202:	f001 fc31 	bl	8002a68 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	0018      	movs	r0, r3
 800120a:	f006 fda1 	bl	8007d50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2244      	movs	r2, #68	@ 0x44
 8001214:	5a9b      	ldrh	r3, [r3, r2]
 8001216:	b29a      	uxth	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4957      	ldr	r1, [pc, #348]	@ (800137c <HAL_PCD_IRQHandler+0x278>)
 800121e:	400a      	ands	r2, r1
 8001220:	b291      	uxth	r1, r2
 8001222:	2244      	movs	r2, #68	@ 0x44
 8001224:	5299      	strh	r1, [r3, r2]

    return;
 8001226:	e0a0      	b.n	800136a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	2380      	movs	r3, #128	@ 0x80
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	4013      	ands	r3, r2
 8001230:	d028      	beq.n	8001284 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2240      	movs	r2, #64	@ 0x40
 8001238:	5a9b      	ldrh	r3, [r3, r2]
 800123a:	b29a      	uxth	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2108      	movs	r1, #8
 8001242:	430a      	orrs	r2, r1
 8001244:	b291      	uxth	r1, r2
 8001246:	2240      	movs	r2, #64	@ 0x40
 8001248:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2244      	movs	r2, #68	@ 0x44
 8001250:	5a9b      	ldrh	r3, [r3, r2]
 8001252:	b29a      	uxth	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4949      	ldr	r1, [pc, #292]	@ (8001380 <HAL_PCD_IRQHandler+0x27c>)
 800125a:	400a      	ands	r2, r1
 800125c:	b291      	uxth	r1, r2
 800125e:	2244      	movs	r2, #68	@ 0x44
 8001260:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2240      	movs	r2, #64	@ 0x40
 8001268:	5a9b      	ldrh	r3, [r3, r2]
 800126a:	b29a      	uxth	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2104      	movs	r1, #4
 8001272:	430a      	orrs	r2, r1
 8001274:	b291      	uxth	r1, r2
 8001276:	2240      	movs	r2, #64	@ 0x40
 8001278:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	0018      	movs	r0, r3
 800127e:	f006 fd4b 	bl	8007d18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001282:	e072      	b.n	800136a <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2280      	movs	r2, #128	@ 0x80
 8001288:	4013      	ands	r3, r2
 800128a:	d046      	beq.n	800131a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2244      	movs	r2, #68	@ 0x44
 8001292:	5a9b      	ldrh	r3, [r3, r2]
 8001294:	b29a      	uxth	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2180      	movs	r1, #128	@ 0x80
 800129c:	438a      	bics	r2, r1
 800129e:	b291      	uxth	r1, r2
 80012a0:	2244      	movs	r2, #68	@ 0x44
 80012a2:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	23b2      	movs	r3, #178	@ 0xb2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	5cd3      	ldrb	r3, [r2, r3]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d12f      	bne.n	8001310 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2240      	movs	r2, #64	@ 0x40
 80012b6:	5a9b      	ldrh	r3, [r3, r2]
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2104      	movs	r1, #4
 80012c0:	430a      	orrs	r2, r1
 80012c2:	b291      	uxth	r1, r2
 80012c4:	2240      	movs	r2, #64	@ 0x40
 80012c6:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2240      	movs	r2, #64	@ 0x40
 80012ce:	5a9b      	ldrh	r3, [r3, r2]
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2108      	movs	r1, #8
 80012d8:	430a      	orrs	r2, r1
 80012da:	b291      	uxth	r1, r2
 80012dc:	2240      	movs	r2, #64	@ 0x40
 80012de:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	23b2      	movs	r3, #178	@ 0xb2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	2101      	movs	r1, #1
 80012e8:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2254      	movs	r2, #84	@ 0x54
 80012f0:	5a9b      	ldrh	r3, [r3, r2]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	223c      	movs	r2, #60	@ 0x3c
 80012f8:	4013      	ands	r3, r2
 80012fa:	0019      	movs	r1, r3
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	23b3      	movs	r3, #179	@ 0xb3
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2101      	movs	r1, #1
 8001308:	0018      	movs	r0, r3
 800130a:	f001 fbad 	bl	8002a68 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800130e:	e02c      	b.n	800136a <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	0018      	movs	r0, r3
 8001314:	f006 fd00 	bl	8007d18 <HAL_PCD_SuspendCallback>
    return;
 8001318:	e027      	b.n	800136a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	2380      	movs	r3, #128	@ 0x80
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4013      	ands	r3, r2
 8001322:	d010      	beq.n	8001346 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2244      	movs	r2, #68	@ 0x44
 800132a:	5a9b      	ldrh	r3, [r3, r2]
 800132c:	b29a      	uxth	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4914      	ldr	r1, [pc, #80]	@ (8001384 <HAL_PCD_IRQHandler+0x280>)
 8001334:	400a      	ands	r2, r1
 8001336:	b291      	uxth	r1, r2
 8001338:	2244      	movs	r2, #68	@ 0x44
 800133a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	0018      	movs	r0, r3
 8001340:	f006 fcb6 	bl	8007cb0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001344:	e011      	b.n	800136a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	2380      	movs	r3, #128	@ 0x80
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	4013      	ands	r3, r2
 800134e:	d00c      	beq.n	800136a <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2244      	movs	r2, #68	@ 0x44
 8001356:	5a9b      	ldrh	r3, [r3, r2]
 8001358:	b29a      	uxth	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	490a      	ldr	r1, [pc, #40]	@ (8001388 <HAL_PCD_IRQHandler+0x284>)
 8001360:	400a      	ands	r2, r1
 8001362:	b291      	uxth	r1, r2
 8001364:	2244      	movs	r2, #68	@ 0x44
 8001366:	5299      	strh	r1, [r3, r2]

    return;
 8001368:	46c0      	nop			@ (mov r8, r8)
  }
}
 800136a:	46bd      	mov	sp, r7
 800136c:	b004      	add	sp, #16
 800136e:	bd80      	pop	{r7, pc}
 8001370:	fffffbff 	.word	0xfffffbff
 8001374:	ffffbfff 	.word	0xffffbfff
 8001378:	ffffdfff 	.word	0xffffdfff
 800137c:	ffffefff 	.word	0xffffefff
 8001380:	fffff7ff 	.word	0xfffff7ff
 8001384:	fffffdff 	.word	0xfffffdff
 8001388:	fffffeff 	.word	0xfffffeff

0800138c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	000a      	movs	r2, r1
 8001396:	1cfb      	adds	r3, r7, #3
 8001398:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	23a4      	movs	r3, #164	@ 0xa4
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	5cd3      	ldrb	r3, [r2, r3]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d101      	bne.n	80013aa <HAL_PCD_SetAddress+0x1e>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e016      	b.n	80013d8 <HAL_PCD_SetAddress+0x4c>
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	23a4      	movs	r3, #164	@ 0xa4
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	2101      	movs	r1, #1
 80013b2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	1cfa      	adds	r2, r7, #3
 80013b8:	7812      	ldrb	r2, [r2, #0]
 80013ba:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	1cfb      	adds	r3, r7, #3
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	0019      	movs	r1, r3
 80013c6:	0010      	movs	r0, r2
 80013c8:	f003 fea2 	bl	8005110 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	23a4      	movs	r3, #164	@ 0xa4
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	2100      	movs	r1, #0
 80013d4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	0018      	movs	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	b002      	add	sp, #8
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	000c      	movs	r4, r1
 80013ea:	0010      	movs	r0, r2
 80013ec:	0019      	movs	r1, r3
 80013ee:	1cfb      	adds	r3, r7, #3
 80013f0:	1c22      	adds	r2, r4, #0
 80013f2:	701a      	strb	r2, [r3, #0]
 80013f4:	003b      	movs	r3, r7
 80013f6:	1c02      	adds	r2, r0, #0
 80013f8:	801a      	strh	r2, [r3, #0]
 80013fa:	1cbb      	adds	r3, r7, #2
 80013fc:	1c0a      	adds	r2, r1, #0
 80013fe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001400:	230b      	movs	r3, #11
 8001402:	18fb      	adds	r3, r7, r3
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001408:	1cfb      	adds	r3, r7, #3
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b25b      	sxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	da0f      	bge.n	8001432 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001412:	1cfb      	adds	r3, r7, #3
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2207      	movs	r2, #7
 8001418:	401a      	ands	r2, r3
 800141a:	0013      	movs	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	189b      	adds	r3, r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	3310      	adds	r3, #16
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	18d3      	adds	r3, r2, r3
 8001428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2201      	movs	r2, #1
 800142e:	705a      	strb	r2, [r3, #1]
 8001430:	e00f      	b.n	8001452 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001432:	1cfb      	adds	r3, r7, #3
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2207      	movs	r2, #7
 8001438:	401a      	ands	r2, r3
 800143a:	0013      	movs	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	189b      	adds	r3, r3, r2
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	3351      	adds	r3, #81	@ 0x51
 8001444:	33ff      	adds	r3, #255	@ 0xff
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	18d3      	adds	r3, r2, r3
 800144a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2200      	movs	r2, #0
 8001450:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001452:	1cfb      	adds	r3, r7, #3
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2207      	movs	r2, #7
 8001458:	4013      	ands	r3, r2
 800145a:	b2da      	uxtb	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001460:	003b      	movs	r3, r7
 8001462:	881a      	ldrh	r2, [r3, #0]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	1cba      	adds	r2, r7, #2
 800146c:	7812      	ldrb	r2, [r2, #0]
 800146e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001470:	1cbb      	adds	r3, r7, #2
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d102      	bne.n	800147e <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	23a4      	movs	r3, #164	@ 0xa4
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	5cd3      	ldrb	r3, [r2, r3]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d101      	bne.n	800148e <HAL_PCD_EP_Open+0xae>
 800148a:	2302      	movs	r3, #2
 800148c:	e013      	b.n	80014b6 <HAL_PCD_EP_Open+0xd6>
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	23a4      	movs	r3, #164	@ 0xa4
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	2101      	movs	r1, #1
 8001496:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	0011      	movs	r1, r2
 80014a0:	0018      	movs	r0, r3
 80014a2:	f002 f85b 	bl	800355c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	23a4      	movs	r3, #164	@ 0xa4
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	2100      	movs	r1, #0
 80014ae:	54d1      	strb	r1, [r2, r3]

  return ret;
 80014b0:	230b      	movs	r3, #11
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	781b      	ldrb	r3, [r3, #0]
}
 80014b6:	0018      	movs	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b005      	add	sp, #20
 80014bc:	bd90      	pop	{r4, r7, pc}

080014be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60f8      	str	r0, [r7, #12]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	200b      	movs	r0, #11
 80014cc:	183b      	adds	r3, r7, r0
 80014ce:	1c0a      	adds	r2, r1, #0
 80014d0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014d2:	0001      	movs	r1, r0
 80014d4:	187b      	adds	r3, r7, r1
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2207      	movs	r2, #7
 80014da:	401a      	ands	r2, r3
 80014dc:	0013      	movs	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	189b      	adds	r3, r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	3351      	adds	r3, #81	@ 0x51
 80014e6:	33ff      	adds	r3, #255	@ 0xff
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	18d3      	adds	r3, r2, r3
 80014ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	2200      	movs	r2, #0
 80014fe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	2200      	movs	r2, #0
 8001504:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001506:	187b      	adds	r3, r7, r1
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2207      	movs	r2, #7
 800150c:	4013      	ands	r3, r2
 800150e:	b2da      	uxtb	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	0011      	movs	r1, r2
 800151c:	0018      	movs	r0, r3
 800151e:	f002 fbc5 	bl	8003cac <USB_EPStartXfer>

  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	0018      	movs	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	b006      	add	sp, #24
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	200b      	movs	r0, #11
 800153a:	183b      	adds	r3, r7, r0
 800153c:	1c0a      	adds	r2, r1, #0
 800153e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001540:	183b      	adds	r3, r7, r0
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2207      	movs	r2, #7
 8001546:	401a      	ands	r2, r3
 8001548:	0013      	movs	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	189b      	adds	r3, r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	3310      	adds	r3, #16
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	18d3      	adds	r3, r2, r3
 8001556:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	2224      	movs	r2, #36	@ 0x24
 8001568:	2101      	movs	r1, #1
 800156a:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	2200      	movs	r2, #0
 8001576:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	2201      	movs	r2, #1
 800157c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800157e:	183b      	adds	r3, r7, r0
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2207      	movs	r2, #7
 8001584:	4013      	ands	r3, r2
 8001586:	b2da      	uxtb	r2, r3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	0011      	movs	r1, r2
 8001594:	0018      	movs	r0, r3
 8001596:	f002 fb89 	bl	8003cac <USB_EPStartXfer>

  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	0018      	movs	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	b006      	add	sp, #24
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	000a      	movs	r2, r1
 80015ae:	1cfb      	adds	r3, r7, #3
 80015b0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80015b2:	1cfb      	adds	r3, r7, #3
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2207      	movs	r2, #7
 80015b8:	4013      	ands	r3, r2
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	7912      	ldrb	r2, [r2, #4]
 80015be:	4293      	cmp	r3, r2
 80015c0:	d901      	bls.n	80015c6 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e046      	b.n	8001654 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015c6:	1cfb      	adds	r3, r7, #3
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b25b      	sxtb	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	da0f      	bge.n	80015f0 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015d0:	1cfb      	adds	r3, r7, #3
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2207      	movs	r2, #7
 80015d6:	401a      	ands	r2, r3
 80015d8:	0013      	movs	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	189b      	adds	r3, r3, r2
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	3310      	adds	r3, #16
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	18d3      	adds	r3, r2, r3
 80015e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2201      	movs	r2, #1
 80015ec:	705a      	strb	r2, [r3, #1]
 80015ee:	e00d      	b.n	800160c <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80015f0:	1cfb      	adds	r3, r7, #3
 80015f2:	781a      	ldrb	r2, [r3, #0]
 80015f4:	0013      	movs	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	189b      	adds	r3, r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	3351      	adds	r3, #81	@ 0x51
 80015fe:	33ff      	adds	r3, #255	@ 0xff
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	18d3      	adds	r3, r2, r3
 8001604:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2201      	movs	r2, #1
 8001610:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001612:	1cfb      	adds	r3, r7, #3
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2207      	movs	r2, #7
 8001618:	4013      	ands	r3, r2
 800161a:	b2da      	uxtb	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	23a4      	movs	r3, #164	@ 0xa4
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	5cd3      	ldrb	r3, [r2, r3]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_PCD_EP_SetStall+0x8c>
 800162c:	2302      	movs	r3, #2
 800162e:	e011      	b.n	8001654 <HAL_PCD_EP_SetStall+0xb0>
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	23a4      	movs	r3, #164	@ 0xa4
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	2101      	movs	r1, #1
 8001638:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	0011      	movs	r1, r2
 8001642:	0018      	movs	r0, r3
 8001644:	f003 fc62 	bl	8004f0c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	23a4      	movs	r3, #164	@ 0xa4
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	2100      	movs	r1, #0
 8001650:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	0018      	movs	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	b004      	add	sp, #16
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	000a      	movs	r2, r1
 8001666:	1cfb      	adds	r3, r7, #3
 8001668:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800166a:	1cfb      	adds	r3, r7, #3
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	220f      	movs	r2, #15
 8001670:	4013      	ands	r3, r2
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	7912      	ldrb	r2, [r2, #4]
 8001676:	4293      	cmp	r3, r2
 8001678:	d901      	bls.n	800167e <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e048      	b.n	8001710 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800167e:	1cfb      	adds	r3, r7, #3
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	b25b      	sxtb	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	da0f      	bge.n	80016a8 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001688:	1cfb      	adds	r3, r7, #3
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2207      	movs	r2, #7
 800168e:	401a      	ands	r2, r3
 8001690:	0013      	movs	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	189b      	adds	r3, r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	3310      	adds	r3, #16
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	18d3      	adds	r3, r2, r3
 800169e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2201      	movs	r2, #1
 80016a4:	705a      	strb	r2, [r3, #1]
 80016a6:	e00f      	b.n	80016c8 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016a8:	1cfb      	adds	r3, r7, #3
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2207      	movs	r2, #7
 80016ae:	401a      	ands	r2, r3
 80016b0:	0013      	movs	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	189b      	adds	r3, r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	3351      	adds	r3, #81	@ 0x51
 80016ba:	33ff      	adds	r3, #255	@ 0xff
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	18d3      	adds	r3, r2, r3
 80016c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2200      	movs	r2, #0
 80016cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016ce:	1cfb      	adds	r3, r7, #3
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2207      	movs	r2, #7
 80016d4:	4013      	ands	r3, r2
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	23a4      	movs	r3, #164	@ 0xa4
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	5cd3      	ldrb	r3, [r2, r3]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_PCD_EP_ClrStall+0x90>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e011      	b.n	8001710 <HAL_PCD_EP_ClrStall+0xb4>
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	23a4      	movs	r3, #164	@ 0xa4
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	2101      	movs	r1, #1
 80016f4:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	0011      	movs	r1, r2
 80016fe:	0018      	movs	r0, r3
 8001700:	f003 fc54 	bl	8004fac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	23a4      	movs	r3, #164	@ 0xa4
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	2100      	movs	r1, #0
 800170c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	0018      	movs	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	b004      	add	sp, #16
 8001716:	bd80      	pop	{r7, pc}

08001718 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001718:	b5b0      	push	{r4, r5, r7, lr}
 800171a:	b096      	sub	sp, #88	@ 0x58
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001720:	f000 fbea 	bl	8001ef8 <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	2048      	movs	r0, #72	@ 0x48
 800172a:	183b      	adds	r3, r7, r0
 800172c:	2144      	movs	r1, #68	@ 0x44
 800172e:	5a52      	ldrh	r2, [r2, r1]
 8001730:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001732:	183b      	adds	r3, r7, r0
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	244f      	movs	r4, #79	@ 0x4f
 800173a:	193b      	adds	r3, r7, r4
 800173c:	210f      	movs	r1, #15
 800173e:	400a      	ands	r2, r1
 8001740:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8001742:	193b      	adds	r3, r7, r4
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d000      	beq.n	800174c <PCD_EP_ISR_Handler+0x34>
 800174a:	e18d      	b.n	8001a68 <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800174c:	183b      	adds	r3, r7, r0
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	2210      	movs	r2, #16
 8001752:	4013      	ands	r3, r2
 8001754:	d152      	bne.n	80017fc <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	b29a      	uxth	r2, r3
 800175e:	200e      	movs	r0, #14
 8001760:	183b      	adds	r3, r7, r0
 8001762:	49ba      	ldr	r1, [pc, #744]	@ (8001a4c <PCD_EP_ISR_Handler+0x334>)
 8001764:	400a      	ands	r2, r1
 8001766:	801a      	strh	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	183a      	adds	r2, r7, r0
 800176e:	8812      	ldrh	r2, [r2, #0]
 8001770:	49b7      	ldr	r1, [pc, #732]	@ (8001a50 <PCD_EP_ISR_Handler+0x338>)
 8001772:	430a      	orrs	r2, r1
 8001774:	b292      	uxth	r2, r2
 8001776:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3310      	adds	r3, #16
 800177c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2250      	movs	r2, #80	@ 0x50
 8001784:	5a9b      	ldrh	r3, [r3, r2]
 8001786:	b29b      	uxth	r3, r3
 8001788:	001a      	movs	r2, r3
 800178a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	18d2      	adds	r2, r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	18d3      	adds	r3, r2, r3
 8001798:	4aae      	ldr	r2, [pc, #696]	@ (8001a54 <PCD_EP_ISR_Handler+0x33c>)
 800179a:	4694      	mov	ip, r2
 800179c:	4463      	add	r3, ip
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	059b      	lsls	r3, r3, #22
 80017a2:	0d9a      	lsrs	r2, r3, #22
 80017a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80017a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017aa:	695a      	ldr	r2, [r3, #20]
 80017ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017ae:	69db      	ldr	r3, [r3, #28]
 80017b0:	18d2      	adds	r2, r2, r3
 80017b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017b4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2100      	movs	r1, #0
 80017ba:	0018      	movs	r0, r3
 80017bc:	f006 fa5a 	bl	8007c74 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7b1b      	ldrb	r3, [r3, #12]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <PCD_EP_ISR_Handler+0xb6>
 80017ca:	f000 fb95 	bl	8001ef8 <PCD_EP_ISR_Handler+0x7e0>
 80017ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <PCD_EP_ISR_Handler+0xc2>
 80017d6:	f000 fb8f 	bl	8001ef8 <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	7b1b      	ldrb	r3, [r3, #12]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2280      	movs	r2, #128	@ 0x80
 80017e2:	4252      	negs	r2, r2
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	0011      	movs	r1, r2
 80017ee:	224c      	movs	r2, #76	@ 0x4c
 80017f0:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	731a      	strb	r2, [r3, #12]
 80017f8:	f000 fb7e 	bl	8001ef8 <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3351      	adds	r3, #81	@ 0x51
 8001800:	33ff      	adds	r3, #255	@ 0xff
 8001802:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	214c      	movs	r1, #76	@ 0x4c
 800180a:	187b      	adds	r3, r7, r1
 800180c:	8812      	ldrh	r2, [r2, #0]
 800180e:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001810:	187b      	adds	r3, r7, r1
 8001812:	881a      	ldrh	r2, [r3, #0]
 8001814:	2380      	movs	r3, #128	@ 0x80
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	4013      	ands	r3, r2
 800181a:	d037      	beq.n	800188c <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2250      	movs	r2, #80	@ 0x50
 8001822:	5a9b      	ldrh	r3, [r3, r2]
 8001824:	b29b      	uxth	r3, r3
 8001826:	001a      	movs	r2, r3
 8001828:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	18d2      	adds	r2, r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	18d3      	adds	r3, r2, r3
 8001836:	4a88      	ldr	r2, [pc, #544]	@ (8001a58 <PCD_EP_ISR_Handler+0x340>)
 8001838:	4694      	mov	ip, r2
 800183a:	4463      	add	r3, ip
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	059b      	lsls	r3, r3, #22
 8001840:	0d9a      	lsrs	r2, r3, #22
 8001842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001844:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	22a6      	movs	r2, #166	@ 0xa6
 800184e:	0092      	lsls	r2, r2, #2
 8001850:	1899      	adds	r1, r3, r2
 8001852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001854:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001858:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800185a:	b29b      	uxth	r3, r3
 800185c:	f003 fcec 	bl	8005238 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	b29a      	uxth	r2, r3
 8001868:	2010      	movs	r0, #16
 800186a:	183b      	adds	r3, r7, r0
 800186c:	497b      	ldr	r1, [pc, #492]	@ (8001a5c <PCD_EP_ISR_Handler+0x344>)
 800186e:	400a      	ands	r2, r1
 8001870:	801a      	strh	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	183a      	adds	r2, r7, r0
 8001878:	8812      	ldrh	r2, [r2, #0]
 800187a:	2180      	movs	r1, #128	@ 0x80
 800187c:	430a      	orrs	r2, r1
 800187e:	b292      	uxth	r2, r2
 8001880:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	0018      	movs	r0, r3
 8001886:	f006 f9bf 	bl	8007c08 <HAL_PCD_SetupStageCallback>
 800188a:	e335      	b.n	8001ef8 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800188c:	234c      	movs	r3, #76	@ 0x4c
 800188e:	18fb      	adds	r3, r7, r3
 8001890:	2200      	movs	r2, #0
 8001892:	5e9b      	ldrsh	r3, [r3, r2]
 8001894:	2b00      	cmp	r3, #0
 8001896:	db00      	blt.n	800189a <PCD_EP_ISR_Handler+0x182>
 8001898:	e32e      	b.n	8001ef8 <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	201e      	movs	r0, #30
 80018a4:	183b      	adds	r3, r7, r0
 80018a6:	496d      	ldr	r1, [pc, #436]	@ (8001a5c <PCD_EP_ISR_Handler+0x344>)
 80018a8:	400a      	ands	r2, r1
 80018aa:	801a      	strh	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	183a      	adds	r2, r7, r0
 80018b2:	8812      	ldrh	r2, [r2, #0]
 80018b4:	2180      	movs	r1, #128	@ 0x80
 80018b6:	430a      	orrs	r2, r1
 80018b8:	b292      	uxth	r2, r2
 80018ba:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2250      	movs	r2, #80	@ 0x50
 80018c2:	5a9b      	ldrh	r3, [r3, r2]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	001a      	movs	r2, r3
 80018c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	18d2      	adds	r2, r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	18d3      	adds	r3, r2, r3
 80018d6:	4a60      	ldr	r2, [pc, #384]	@ (8001a58 <PCD_EP_ISR_Handler+0x340>)
 80018d8:	4694      	mov	ip, r2
 80018da:	4463      	add	r3, ip
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	059b      	lsls	r3, r3, #22
 80018e0:	0d9a      	lsrs	r2, r3, #22
 80018e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80018e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d01a      	beq.n	8001924 <PCD_EP_ISR_Handler+0x20c>
 80018ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d016      	beq.n	8001924 <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018fc:	6959      	ldr	r1, [r3, #20]
 80018fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001900:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001904:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001906:	b29b      	uxth	r3, r3
 8001908:	f003 fc96 	bl	8005238 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800190c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	18d2      	adds	r2, r2, r3
 8001916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001918:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2100      	movs	r1, #0
 800191e:	0018      	movs	r0, r3
 8001920:	f006 f987 	bl	8007c32 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	214c      	movs	r1, #76	@ 0x4c
 800192a:	187b      	adds	r3, r7, r1
 800192c:	8812      	ldrh	r2, [r2, #0]
 800192e:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001930:	187b      	adds	r3, r7, r1
 8001932:	881a      	ldrh	r2, [r3, #0]
 8001934:	2380      	movs	r3, #128	@ 0x80
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	4013      	ands	r3, r2
 800193a:	d000      	beq.n	800193e <PCD_EP_ISR_Handler+0x226>
 800193c:	e2dc      	b.n	8001ef8 <PCD_EP_ISR_Handler+0x7e0>
 800193e:	187b      	adds	r3, r7, r1
 8001940:	881a      	ldrh	r2, [r3, #0]
 8001942:	23c0      	movs	r3, #192	@ 0xc0
 8001944:	019b      	lsls	r3, r3, #6
 8001946:	401a      	ands	r2, r3
 8001948:	23c0      	movs	r3, #192	@ 0xc0
 800194a:	019b      	lsls	r3, r3, #6
 800194c:	429a      	cmp	r2, r3
 800194e:	d100      	bne.n	8001952 <PCD_EP_ISR_Handler+0x23a>
 8001950:	e2d2      	b.n	8001ef8 <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	61bb      	str	r3, [r7, #24]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2250      	movs	r2, #80	@ 0x50
 800195e:	5a9b      	ldrh	r3, [r3, r2]
 8001960:	b29b      	uxth	r3, r3
 8001962:	001a      	movs	r2, r3
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	189b      	adds	r3, r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	4a3a      	ldr	r2, [pc, #232]	@ (8001a58 <PCD_EP_ISR_Handler+0x340>)
 800196e:	4694      	mov	ip, r2
 8001970:	4463      	add	r3, ip
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	b29b      	uxth	r3, r3
 800197a:	059b      	lsls	r3, r3, #22
 800197c:	0d9b      	lsrs	r3, r3, #22
 800197e:	b29a      	uxth	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	801a      	strh	r2, [r3, #0]
 8001984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d108      	bne.n	800199e <PCD_EP_ISR_Handler+0x286>
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	b29b      	uxth	r3, r3
 8001992:	4a2f      	ldr	r2, [pc, #188]	@ (8001a50 <PCD_EP_ISR_Handler+0x338>)
 8001994:	4313      	orrs	r3, r2
 8001996:	b29a      	uxth	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	801a      	strh	r2, [r3, #0]
 800199c:	e035      	b.n	8001a0a <PCD_EP_ISR_Handler+0x2f2>
 800199e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80019a4:	d817      	bhi.n	80019d6 <PCD_EP_ISR_Handler+0x2be>
 80019a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	085b      	lsrs	r3, r3, #1
 80019ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80019ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	2201      	movs	r2, #1
 80019b4:	4013      	ands	r3, r2
 80019b6:	d002      	beq.n	80019be <PCD_EP_ISR_Handler+0x2a6>
 80019b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019ba:	3301      	adds	r3, #1
 80019bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	029b      	lsls	r3, r3, #10
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	4313      	orrs	r3, r2
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	801a      	strh	r2, [r3, #0]
 80019d4:	e019      	b.n	8001a0a <PCD_EP_ISR_Handler+0x2f2>
 80019d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80019de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	221f      	movs	r2, #31
 80019e4:	4013      	ands	r3, r2
 80019e6:	d102      	bne.n	80019ee <PCD_EP_ISR_Handler+0x2d6>
 80019e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019ea:	3b01      	subs	r3, #1
 80019ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	029b      	lsls	r3, r3, #10
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	4313      	orrs	r3, r2
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	4a13      	ldr	r2, [pc, #76]	@ (8001a50 <PCD_EP_ISR_Handler+0x338>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	2012      	movs	r0, #18
 8001a14:	183b      	adds	r3, r7, r0
 8001a16:	4912      	ldr	r1, [pc, #72]	@ (8001a60 <PCD_EP_ISR_Handler+0x348>)
 8001a18:	400a      	ands	r2, r1
 8001a1a:	801a      	strh	r2, [r3, #0]
 8001a1c:	183b      	adds	r3, r7, r0
 8001a1e:	183a      	adds	r2, r7, r0
 8001a20:	8812      	ldrh	r2, [r2, #0]
 8001a22:	2180      	movs	r1, #128	@ 0x80
 8001a24:	0149      	lsls	r1, r1, #5
 8001a26:	404a      	eors	r2, r1
 8001a28:	801a      	strh	r2, [r3, #0]
 8001a2a:	183b      	adds	r3, r7, r0
 8001a2c:	183a      	adds	r2, r7, r0
 8001a2e:	8812      	ldrh	r2, [r2, #0]
 8001a30:	2180      	movs	r1, #128	@ 0x80
 8001a32:	0189      	lsls	r1, r1, #6
 8001a34:	404a      	eors	r2, r1
 8001a36:	801a      	strh	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	183a      	adds	r2, r7, r0
 8001a3e:	8812      	ldrh	r2, [r2, #0]
 8001a40:	4908      	ldr	r1, [pc, #32]	@ (8001a64 <PCD_EP_ISR_Handler+0x34c>)
 8001a42:	430a      	orrs	r2, r1
 8001a44:	b292      	uxth	r2, r2
 8001a46:	801a      	strh	r2, [r3, #0]
 8001a48:	e256      	b.n	8001ef8 <PCD_EP_ISR_Handler+0x7e0>
 8001a4a:	46c0      	nop			@ (mov r8, r8)
 8001a4c:	ffff8f0f 	.word	0xffff8f0f
 8001a50:	ffff8000 	.word	0xffff8000
 8001a54:	00000402 	.word	0x00000402
 8001a58:	00000406 	.word	0x00000406
 8001a5c:	00000f8f 	.word	0x00000f8f
 8001a60:	ffffbf8f 	.word	0xffffbf8f
 8001a64:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	001a      	movs	r2, r3
 8001a6e:	204f      	movs	r0, #79	@ 0x4f
 8001a70:	183b      	adds	r3, r7, r0
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	18d2      	adds	r2, r2, r3
 8001a78:	214c      	movs	r1, #76	@ 0x4c
 8001a7a:	187b      	adds	r3, r7, r1
 8001a7c:	8812      	ldrh	r2, [r2, #0]
 8001a7e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a80:	187b      	adds	r3, r7, r1
 8001a82:	2200      	movs	r2, #0
 8001a84:	5e9b      	ldrsh	r3, [r3, r2]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	db00      	blt.n	8001a8c <PCD_EP_ISR_Handler+0x374>
 8001a8a:	e0fa      	b.n	8001c82 <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	001a      	movs	r2, r3
 8001a92:	183b      	adds	r3, r7, r0
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	18d3      	adds	r3, r2, r3
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	244a      	movs	r4, #74	@ 0x4a
 8001aa0:	193b      	adds	r3, r7, r4
 8001aa2:	49d1      	ldr	r1, [pc, #836]	@ (8001de8 <PCD_EP_ISR_Handler+0x6d0>)
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	801a      	strh	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	001a      	movs	r2, r3
 8001aae:	183b      	adds	r3, r7, r0
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	18d3      	adds	r3, r2, r3
 8001ab6:	193a      	adds	r2, r7, r4
 8001ab8:	8812      	ldrh	r2, [r2, #0]
 8001aba:	2180      	movs	r1, #128	@ 0x80
 8001abc:	430a      	orrs	r2, r1
 8001abe:	b292      	uxth	r2, r2
 8001ac0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ac2:	183b      	adds	r3, r7, r0
 8001ac4:	781a      	ldrb	r2, [r3, #0]
 8001ac6:	0013      	movs	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	189b      	adds	r3, r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	3351      	adds	r3, #81	@ 0x51
 8001ad0:	33ff      	adds	r3, #255	@ 0xff
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	18d3      	adds	r3, r2, r3
 8001ad6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ada:	7b1b      	ldrb	r3, [r3, #12]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d125      	bne.n	8001b2c <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2250      	movs	r2, #80	@ 0x50
 8001ae6:	5a9b      	ldrh	r3, [r3, r2]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	001a      	movs	r2, r3
 8001aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	18d2      	adds	r2, r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	18d3      	adds	r3, r2, r3
 8001afa:	4abc      	ldr	r2, [pc, #752]	@ (8001dec <PCD_EP_ISR_Handler+0x6d4>)
 8001afc:	4694      	mov	ip, r2
 8001afe:	4463      	add	r3, ip
 8001b00:	881a      	ldrh	r2, [r3, #0]
 8001b02:	2450      	movs	r4, #80	@ 0x50
 8001b04:	193b      	adds	r3, r7, r4
 8001b06:	0592      	lsls	r2, r2, #22
 8001b08:	0d92      	lsrs	r2, r2, #22
 8001b0a:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8001b0c:	193b      	adds	r3, r7, r4
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d100      	bne.n	8001b16 <PCD_EP_ISR_Handler+0x3fe>
 8001b14:	e08d      	b.n	8001c32 <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b1c:	6959      	ldr	r1, [r3, #20]
 8001b1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b20:	88da      	ldrh	r2, [r3, #6]
 8001b22:	193b      	adds	r3, r7, r4
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	f003 fb87 	bl	8005238 <USB_ReadPMA>
 8001b2a:	e082      	b.n	8001c32 <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b2e:	78db      	ldrb	r3, [r3, #3]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d10c      	bne.n	8001b4e <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b34:	2350      	movs	r3, #80	@ 0x50
 8001b36:	18fc      	adds	r4, r7, r3
 8001b38:	234c      	movs	r3, #76	@ 0x4c
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	881a      	ldrh	r2, [r3, #0]
 8001b3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	0018      	movs	r0, r3
 8001b44:	f000 f9ec 	bl	8001f20 <HAL_PCD_EP_DB_Receive>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	8023      	strh	r3, [r4, #0]
 8001b4c:	e071      	b.n	8001c32 <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	001a      	movs	r2, r3
 8001b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	18d3      	adds	r3, r2, r3
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	2052      	movs	r0, #82	@ 0x52
 8001b62:	183b      	adds	r3, r7, r0
 8001b64:	49a2      	ldr	r1, [pc, #648]	@ (8001df0 <PCD_EP_ISR_Handler+0x6d8>)
 8001b66:	400a      	ands	r2, r1
 8001b68:	801a      	strh	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	001a      	movs	r2, r3
 8001b70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	18d3      	adds	r3, r2, r3
 8001b78:	183a      	adds	r2, r7, r0
 8001b7a:	8812      	ldrh	r2, [r2, #0]
 8001b7c:	499d      	ldr	r1, [pc, #628]	@ (8001df4 <PCD_EP_ISR_Handler+0x6dc>)
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	b292      	uxth	r2, r2
 8001b82:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	001a      	movs	r2, r3
 8001b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	18d3      	adds	r3, r2, r3
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	001a      	movs	r2, r3
 8001b98:	2380      	movs	r3, #128	@ 0x80
 8001b9a:	01db      	lsls	r3, r3, #7
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d024      	beq.n	8001bea <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2250      	movs	r2, #80	@ 0x50
 8001ba6:	5a9b      	ldrh	r3, [r3, r2]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	001a      	movs	r2, r3
 8001bac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	18d2      	adds	r2, r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	18d3      	adds	r3, r2, r3
 8001bba:	4a8f      	ldr	r2, [pc, #572]	@ (8001df8 <PCD_EP_ISR_Handler+0x6e0>)
 8001bbc:	4694      	mov	ip, r2
 8001bbe:	4463      	add	r3, ip
 8001bc0:	881a      	ldrh	r2, [r3, #0]
 8001bc2:	2450      	movs	r4, #80	@ 0x50
 8001bc4:	193b      	adds	r3, r7, r4
 8001bc6:	0592      	lsls	r2, r2, #22
 8001bc8:	0d92      	lsrs	r2, r2, #22
 8001bca:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001bcc:	193b      	adds	r3, r7, r4
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d02e      	beq.n	8001c32 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bda:	6959      	ldr	r1, [r3, #20]
 8001bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bde:	891a      	ldrh	r2, [r3, #8]
 8001be0:	193b      	adds	r3, r7, r4
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	f003 fb28 	bl	8005238 <USB_ReadPMA>
 8001be8:	e023      	b.n	8001c32 <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2250      	movs	r2, #80	@ 0x50
 8001bf0:	5a9b      	ldrh	r3, [r3, r2]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	001a      	movs	r2, r3
 8001bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	18d2      	adds	r2, r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	18d3      	adds	r3, r2, r3
 8001c04:	4a79      	ldr	r2, [pc, #484]	@ (8001dec <PCD_EP_ISR_Handler+0x6d4>)
 8001c06:	4694      	mov	ip, r2
 8001c08:	4463      	add	r3, ip
 8001c0a:	881a      	ldrh	r2, [r3, #0]
 8001c0c:	2450      	movs	r4, #80	@ 0x50
 8001c0e:	193b      	adds	r3, r7, r4
 8001c10:	0592      	lsls	r2, r2, #22
 8001c12:	0d92      	lsrs	r2, r2, #22
 8001c14:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001c16:	193b      	adds	r3, r7, r4
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d009      	beq.n	8001c32 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6818      	ldr	r0, [r3, #0]
 8001c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c24:	6959      	ldr	r1, [r3, #20]
 8001c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c28:	895a      	ldrh	r2, [r3, #10]
 8001c2a:	193b      	adds	r3, r7, r4
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	f003 fb03 	bl	8005238 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c34:	69da      	ldr	r2, [r3, #28]
 8001c36:	2150      	movs	r1, #80	@ 0x50
 8001c38:	187b      	adds	r3, r7, r1
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	18d2      	adds	r2, r2, r3
 8001c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c40:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c44:	695a      	ldr	r2, [r3, #20]
 8001c46:	187b      	adds	r3, r7, r1
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	18d2      	adds	r2, r2, r3
 8001c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c4e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <PCD_EP_ISR_Handler+0x54c>
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	881a      	ldrh	r2, [r3, #0]
 8001c5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d207      	bcs.n	8001c74 <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c66:	781a      	ldrb	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	0011      	movs	r1, r2
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f005 ffe0 	bl	8007c32 <HAL_PCD_DataOutStageCallback>
 8001c72:	e006      	b.n	8001c82 <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001c7a:	0011      	movs	r1, r2
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f002 f815 	bl	8003cac <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c82:	244c      	movs	r4, #76	@ 0x4c
 8001c84:	193b      	adds	r3, r7, r4
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	2280      	movs	r2, #128	@ 0x80
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d100      	bne.n	8001c90 <PCD_EP_ISR_Handler+0x578>
 8001c8e:	e133      	b.n	8001ef8 <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 8001c90:	204f      	movs	r0, #79	@ 0x4f
 8001c92:	183b      	adds	r3, r7, r0
 8001c94:	781a      	ldrb	r2, [r3, #0]
 8001c96:	0013      	movs	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	189b      	adds	r3, r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	3310      	adds	r3, #16
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	18d3      	adds	r3, r2, r3
 8001ca4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	001a      	movs	r2, r3
 8001cac:	183b      	adds	r3, r7, r0
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	18d3      	adds	r3, r2, r3
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	2542      	movs	r5, #66	@ 0x42
 8001cba:	197b      	adds	r3, r7, r5
 8001cbc:	494f      	ldr	r1, [pc, #316]	@ (8001dfc <PCD_EP_ISR_Handler+0x6e4>)
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	801a      	strh	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	001a      	movs	r2, r3
 8001cc8:	183b      	adds	r3, r7, r0
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	18d3      	adds	r3, r2, r3
 8001cd0:	197a      	adds	r2, r7, r5
 8001cd2:	8812      	ldrh	r2, [r2, #0]
 8001cd4:	494a      	ldr	r1, [pc, #296]	@ (8001e00 <PCD_EP_ISR_Handler+0x6e8>)
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	b292      	uxth	r2, r2
 8001cda:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cde:	78db      	ldrb	r3, [r3, #3]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d000      	beq.n	8001ce6 <PCD_EP_ISR_Handler+0x5ce>
 8001ce4:	e0af      	b.n	8001e46 <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 8001ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cee:	7b1b      	ldrb	r3, [r3, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d100      	bne.n	8001cf6 <PCD_EP_ISR_Handler+0x5de>
 8001cf4:	e09f      	b.n	8001e36 <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001cf6:	193b      	adds	r3, r7, r4
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	2240      	movs	r2, #64	@ 0x40
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d046      	beq.n	8001d8e <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d02:	785b      	ldrb	r3, [r3, #1]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d125      	bne.n	8001d54 <PCD_EP_ISR_Handler+0x63c>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2250      	movs	r2, #80	@ 0x50
 8001d14:	5a9b      	ldrh	r3, [r3, r2]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	001a      	movs	r2, r3
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	189b      	adds	r3, r3, r2
 8001d1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	00da      	lsls	r2, r3, #3
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	18d3      	adds	r3, r2, r3
 8001d2a:	4a33      	ldr	r2, [pc, #204]	@ (8001df8 <PCD_EP_ISR_Handler+0x6e0>)
 8001d2c:	4694      	mov	ip, r2
 8001d2e:	4463      	add	r3, ip
 8001d30:	623b      	str	r3, [r7, #32]
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	059b      	lsls	r3, r3, #22
 8001d3a:	0d9b      	lsrs	r3, r3, #22
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	801a      	strh	r2, [r3, #0]
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	4a2d      	ldr	r2, [pc, #180]	@ (8001e00 <PCD_EP_ISR_Handler+0x6e8>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	801a      	strh	r2, [r3, #0]
 8001d52:	e070      	b.n	8001e36 <PCD_EP_ISR_Handler+0x71e>
 8001d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d56:	785b      	ldrb	r3, [r3, #1]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d16c      	bne.n	8001e36 <PCD_EP_ISR_Handler+0x71e>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2250      	movs	r2, #80	@ 0x50
 8001d68:	5a9b      	ldrh	r3, [r3, r2]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	001a      	movs	r2, r3
 8001d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d70:	189b      	adds	r3, r3, r2
 8001d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	00da      	lsls	r2, r3, #3
 8001d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d7c:	18d3      	adds	r3, r2, r3
 8001d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8001df8 <PCD_EP_ISR_Handler+0x6e0>)
 8001d80:	4694      	mov	ip, r2
 8001d82:	4463      	add	r3, ip
 8001d84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d88:	2200      	movs	r2, #0
 8001d8a:	801a      	strh	r2, [r3, #0]
 8001d8c:	e053      	b.n	8001e36 <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d96:	785b      	ldrb	r3, [r3, #1]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d133      	bne.n	8001e04 <PCD_EP_ISR_Handler+0x6ec>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2250      	movs	r2, #80	@ 0x50
 8001da8:	5a9b      	ldrh	r3, [r3, r2]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	001a      	movs	r2, r3
 8001dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001db0:	189b      	adds	r3, r3, r2
 8001db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001db4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	00da      	lsls	r2, r3, #3
 8001dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dbc:	18d3      	adds	r3, r2, r3
 8001dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8001dec <PCD_EP_ISR_Handler+0x6d4>)
 8001dc0:	4694      	mov	ip, r2
 8001dc2:	4463      	add	r3, ip
 8001dc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	059b      	lsls	r3, r3, #22
 8001dce:	0d9b      	lsrs	r3, r3, #22
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dd4:	801a      	strh	r2, [r3, #0]
 8001dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	4a08      	ldr	r2, [pc, #32]	@ (8001e00 <PCD_EP_ISR_Handler+0x6e8>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001de4:	801a      	strh	r2, [r3, #0]
 8001de6:	e026      	b.n	8001e36 <PCD_EP_ISR_Handler+0x71e>
 8001de8:	00000f8f 	.word	0x00000f8f
 8001dec:	00000406 	.word	0x00000406
 8001df0:	ffff8f8f 	.word	0xffff8f8f
 8001df4:	ffff80c0 	.word	0xffff80c0
 8001df8:	00000402 	.word	0x00000402
 8001dfc:	ffff8f0f 	.word	0xffff8f0f
 8001e00:	ffff8000 	.word	0xffff8000
 8001e04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e06:	785b      	ldrb	r3, [r3, #1]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d114      	bne.n	8001e36 <PCD_EP_ISR_Handler+0x71e>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2250      	movs	r2, #80	@ 0x50
 8001e12:	5a9b      	ldrh	r3, [r3, r2]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	001a      	movs	r2, r3
 8001e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e1a:	189b      	adds	r3, r3, r2
 8001e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	00da      	lsls	r2, r3, #3
 8001e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e26:	18d3      	adds	r3, r2, r3
 8001e28:	4a3b      	ldr	r2, [pc, #236]	@ (8001f18 <PCD_EP_ISR_Handler+0x800>)
 8001e2a:	4694      	mov	ip, r2
 8001e2c:	4463      	add	r3, ip
 8001e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e32:	2200      	movs	r2, #0
 8001e34:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	0011      	movs	r1, r2
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f005 ff18 	bl	8007c74 <HAL_PCD_DataInStageCallback>
 8001e44:	e058      	b.n	8001ef8 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001e46:	234c      	movs	r3, #76	@ 0x4c
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	881a      	ldrh	r2, [r3, #0]
 8001e4c:	2380      	movs	r3, #128	@ 0x80
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4013      	ands	r3, r2
 8001e52:	d149      	bne.n	8001ee8 <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2250      	movs	r2, #80	@ 0x50
 8001e5a:	5a9b      	ldrh	r3, [r3, r2]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	001a      	movs	r2, r3
 8001e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	18d2      	adds	r2, r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	18d3      	adds	r3, r2, r3
 8001e6e:	4a2b      	ldr	r2, [pc, #172]	@ (8001f1c <PCD_EP_ISR_Handler+0x804>)
 8001e70:	4694      	mov	ip, r2
 8001e72:	4463      	add	r3, ip
 8001e74:	881a      	ldrh	r2, [r3, #0]
 8001e76:	2140      	movs	r1, #64	@ 0x40
 8001e78:	187b      	adds	r3, r7, r1
 8001e7a:	0592      	lsls	r2, r2, #22
 8001e7c:	0d92      	lsrs	r2, r2, #22
 8001e7e:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8001e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e82:	699a      	ldr	r2, [r3, #24]
 8001e84:	187b      	adds	r3, r7, r1
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d907      	bls.n	8001e9c <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 8001e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e8e:	699a      	ldr	r2, [r3, #24]
 8001e90:	187b      	adds	r3, r7, r1
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	1ad2      	subs	r2, r2, r3
 8001e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e98:	619a      	str	r2, [r3, #24]
 8001e9a:	e002      	b.n	8001ea2 <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d107      	bne.n	8001eba <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eac:	781a      	ldrb	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	0011      	movs	r1, r2
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f005 fede 	bl	8007c74 <HAL_PCD_DataInStageCallback>
 8001eb8:	e01e      	b.n	8001ef8 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	2140      	movs	r1, #64	@ 0x40
 8001ec0:	187b      	adds	r3, r7, r1
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	18d2      	adds	r2, r2, r3
 8001ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ecc:	69da      	ldr	r2, [r3, #28]
 8001ece:	187b      	adds	r3, r7, r1
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	18d2      	adds	r2, r2, r3
 8001ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ede:	0011      	movs	r1, r2
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f001 fee3 	bl	8003cac <USB_EPStartXfer>
 8001ee6:	e007      	b.n	8001ef8 <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ee8:	234c      	movs	r3, #76	@ 0x4c
 8001eea:	18fb      	adds	r3, r7, r3
 8001eec:	881a      	ldrh	r2, [r3, #0]
 8001eee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f000 f930 	bl	8002158 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2244      	movs	r2, #68	@ 0x44
 8001efe:	5a9b      	ldrh	r3, [r3, r2]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	b21b      	sxth	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	da01      	bge.n	8001f0c <PCD_EP_ISR_Handler+0x7f4>
 8001f08:	f7ff fc0c 	bl	8001724 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	0018      	movs	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	b016      	add	sp, #88	@ 0x58
 8001f14:	bdb0      	pop	{r4, r5, r7, pc}
 8001f16:	46c0      	nop			@ (mov r8, r8)
 8001f18:	00000406 	.word	0x00000406
 8001f1c:	00000402 	.word	0x00000402

08001f20 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b089      	sub	sp, #36	@ 0x24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	1dbb      	adds	r3, r7, #6
 8001f2c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f2e:	1dbb      	adds	r3, r7, #6
 8001f30:	881a      	ldrh	r2, [r3, #0]
 8001f32:	2380      	movs	r3, #128	@ 0x80
 8001f34:	01db      	lsls	r3, r3, #7
 8001f36:	4013      	ands	r3, r2
 8001f38:	d100      	bne.n	8001f3c <HAL_PCD_EP_DB_Receive+0x1c>
 8001f3a:	e07d      	b.n	8002038 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2250      	movs	r2, #80	@ 0x50
 8001f42:	5a9b      	ldrh	r3, [r3, r2]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	001a      	movs	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	18d2      	adds	r2, r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	18d3      	adds	r3, r2, r3
 8001f56:	4a7a      	ldr	r2, [pc, #488]	@ (8002140 <HAL_PCD_EP_DB_Receive+0x220>)
 8001f58:	4694      	mov	ip, r2
 8001f5a:	4463      	add	r3, ip
 8001f5c:	881a      	ldrh	r2, [r3, #0]
 8001f5e:	211a      	movs	r1, #26
 8001f60:	187b      	adds	r3, r7, r1
 8001f62:	0592      	lsls	r2, r2, #22
 8001f64:	0d92      	lsrs	r2, r2, #22
 8001f66:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	699a      	ldr	r2, [r3, #24]
 8001f6c:	187b      	adds	r3, r7, r1
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d307      	bcc.n	8001f84 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	699a      	ldr	r2, [r3, #24]
 8001f78:	187b      	adds	r3, r7, r1
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	1ad2      	subs	r2, r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	619a      	str	r2, [r3, #24]
 8001f82:	e002      	b.n	8001f8a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2200      	movs	r2, #0
 8001f88:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d121      	bne.n	8001fd6 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	001a      	movs	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	18d3      	adds	r3, r2, r3
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	2018      	movs	r0, #24
 8001fa6:	183b      	adds	r3, r7, r0
 8001fa8:	4966      	ldr	r1, [pc, #408]	@ (8002144 <HAL_PCD_EP_DB_Receive+0x224>)
 8001faa:	400a      	ands	r2, r1
 8001fac:	801a      	strh	r2, [r3, #0]
 8001fae:	183b      	adds	r3, r7, r0
 8001fb0:	183a      	adds	r2, r7, r0
 8001fb2:	8812      	ldrh	r2, [r2, #0]
 8001fb4:	2180      	movs	r1, #128	@ 0x80
 8001fb6:	0189      	lsls	r1, r1, #6
 8001fb8:	404a      	eors	r2, r1
 8001fba:	801a      	strh	r2, [r3, #0]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	001a      	movs	r2, r3
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	18d3      	adds	r3, r2, r3
 8001fca:	183a      	adds	r2, r7, r0
 8001fcc:	8812      	ldrh	r2, [r2, #0]
 8001fce:	495e      	ldr	r1, [pc, #376]	@ (8002148 <HAL_PCD_EP_DB_Receive+0x228>)
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	b292      	uxth	r2, r2
 8001fd4:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fd6:	1dbb      	adds	r3, r7, #6
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	2240      	movs	r2, #64	@ 0x40
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d01a      	beq.n	8002016 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	001a      	movs	r2, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	18d3      	adds	r3, r2, r3
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	2016      	movs	r0, #22
 8001ff4:	183b      	adds	r3, r7, r0
 8001ff6:	4955      	ldr	r1, [pc, #340]	@ (800214c <HAL_PCD_EP_DB_Receive+0x22c>)
 8001ff8:	400a      	ands	r2, r1
 8001ffa:	801a      	strh	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	001a      	movs	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	18d3      	adds	r3, r2, r3
 800200a:	183a      	adds	r2, r7, r0
 800200c:	8812      	ldrh	r2, [r2, #0]
 800200e:	4950      	ldr	r1, [pc, #320]	@ (8002150 <HAL_PCD_EP_DB_Receive+0x230>)
 8002010:	430a      	orrs	r2, r1
 8002012:	b292      	uxth	r2, r2
 8002014:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002016:	241a      	movs	r4, #26
 8002018:	193b      	adds	r3, r7, r4
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d100      	bne.n	8002022 <HAL_PCD_EP_DB_Receive+0x102>
 8002020:	e086      	b.n	8002130 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6818      	ldr	r0, [r3, #0]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	6959      	ldr	r1, [r3, #20]
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	891a      	ldrh	r2, [r3, #8]
 800202e:	193b      	adds	r3, r7, r4
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	f003 f901 	bl	8005238 <USB_ReadPMA>
 8002036:	e07b      	b.n	8002130 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2250      	movs	r2, #80	@ 0x50
 800203e:	5a9b      	ldrh	r3, [r3, r2]
 8002040:	b29b      	uxth	r3, r3
 8002042:	001a      	movs	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	18d2      	adds	r2, r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	18d3      	adds	r3, r2, r3
 8002052:	4a40      	ldr	r2, [pc, #256]	@ (8002154 <HAL_PCD_EP_DB_Receive+0x234>)
 8002054:	4694      	mov	ip, r2
 8002056:	4463      	add	r3, ip
 8002058:	881a      	ldrh	r2, [r3, #0]
 800205a:	211a      	movs	r1, #26
 800205c:	187b      	adds	r3, r7, r1
 800205e:	0592      	lsls	r2, r2, #22
 8002060:	0d92      	lsrs	r2, r2, #22
 8002062:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	699a      	ldr	r2, [r3, #24]
 8002068:	187b      	adds	r3, r7, r1
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d307      	bcc.n	8002080 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	699a      	ldr	r2, [r3, #24]
 8002074:	187b      	adds	r3, r7, r1
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	1ad2      	subs	r2, r2, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	619a      	str	r2, [r3, #24]
 800207e:	e002      	b.n	8002086 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2200      	movs	r2, #0
 8002084:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d121      	bne.n	80020d2 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	001a      	movs	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	18d3      	adds	r3, r2, r3
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	b29a      	uxth	r2, r3
 80020a0:	201e      	movs	r0, #30
 80020a2:	183b      	adds	r3, r7, r0
 80020a4:	4927      	ldr	r1, [pc, #156]	@ (8002144 <HAL_PCD_EP_DB_Receive+0x224>)
 80020a6:	400a      	ands	r2, r1
 80020a8:	801a      	strh	r2, [r3, #0]
 80020aa:	183b      	adds	r3, r7, r0
 80020ac:	183a      	adds	r2, r7, r0
 80020ae:	8812      	ldrh	r2, [r2, #0]
 80020b0:	2180      	movs	r1, #128	@ 0x80
 80020b2:	0189      	lsls	r1, r1, #6
 80020b4:	404a      	eors	r2, r1
 80020b6:	801a      	strh	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	001a      	movs	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	18d3      	adds	r3, r2, r3
 80020c6:	183a      	adds	r2, r7, r0
 80020c8:	8812      	ldrh	r2, [r2, #0]
 80020ca:	491f      	ldr	r1, [pc, #124]	@ (8002148 <HAL_PCD_EP_DB_Receive+0x228>)
 80020cc:	430a      	orrs	r2, r1
 80020ce:	b292      	uxth	r2, r2
 80020d0:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80020d2:	1dbb      	adds	r3, r7, #6
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	2240      	movs	r2, #64	@ 0x40
 80020d8:	4013      	ands	r3, r2
 80020da:	d11a      	bne.n	8002112 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	001a      	movs	r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	18d3      	adds	r3, r2, r3
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	201c      	movs	r0, #28
 80020f0:	183b      	adds	r3, r7, r0
 80020f2:	4916      	ldr	r1, [pc, #88]	@ (800214c <HAL_PCD_EP_DB_Receive+0x22c>)
 80020f4:	400a      	ands	r2, r1
 80020f6:	801a      	strh	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	001a      	movs	r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	18d3      	adds	r3, r2, r3
 8002106:	183a      	adds	r2, r7, r0
 8002108:	8812      	ldrh	r2, [r2, #0]
 800210a:	4911      	ldr	r1, [pc, #68]	@ (8002150 <HAL_PCD_EP_DB_Receive+0x230>)
 800210c:	430a      	orrs	r2, r1
 800210e:	b292      	uxth	r2, r2
 8002110:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002112:	241a      	movs	r4, #26
 8002114:	193b      	adds	r3, r7, r4
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d009      	beq.n	8002130 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	6959      	ldr	r1, [r3, #20]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	895a      	ldrh	r2, [r3, #10]
 8002128:	193b      	adds	r3, r7, r4
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	f003 f884 	bl	8005238 <USB_ReadPMA>
    }
  }

  return count;
 8002130:	231a      	movs	r3, #26
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	881b      	ldrh	r3, [r3, #0]
}
 8002136:	0018      	movs	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	b009      	add	sp, #36	@ 0x24
 800213c:	bd90      	pop	{r4, r7, pc}
 800213e:	46c0      	nop			@ (mov r8, r8)
 8002140:	00000402 	.word	0x00000402
 8002144:	ffffbf8f 	.word	0xffffbf8f
 8002148:	ffff8080 	.word	0xffff8080
 800214c:	ffff8f8f 	.word	0xffff8f8f
 8002150:	ffff80c0 	.word	0xffff80c0
 8002154:	00000406 	.word	0x00000406

08002158 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b0a4      	sub	sp, #144	@ 0x90
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	1dbb      	adds	r3, r7, #6
 8002164:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002166:	1dbb      	adds	r3, r7, #6
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	2240      	movs	r2, #64	@ 0x40
 800216c:	4013      	ands	r3, r2
 800216e:	d100      	bne.n	8002172 <HAL_PCD_EP_DB_Transmit+0x1a>
 8002170:	e1e4      	b.n	800253c <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2250      	movs	r2, #80	@ 0x50
 8002178:	5a9b      	ldrh	r3, [r3, r2]
 800217a:	b29b      	uxth	r3, r3
 800217c:	001a      	movs	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	18d2      	adds	r2, r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	18d3      	adds	r3, r2, r3
 800218c:	4ad0      	ldr	r2, [pc, #832]	@ (80024d0 <HAL_PCD_EP_DB_Transmit+0x378>)
 800218e:	4694      	mov	ip, r2
 8002190:	4463      	add	r3, ip
 8002192:	881a      	ldrh	r2, [r3, #0]
 8002194:	2188      	movs	r1, #136	@ 0x88
 8002196:	187b      	adds	r3, r7, r1
 8002198:	0592      	lsls	r2, r2, #22
 800219a:	0d92      	lsrs	r2, r2, #22
 800219c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	699a      	ldr	r2, [r3, #24]
 80021a2:	187b      	adds	r3, r7, r1
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d907      	bls.n	80021ba <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	187b      	adds	r3, r7, r1
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	1ad2      	subs	r2, r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	619a      	str	r2, [r3, #24]
 80021b8:	e002      	b.n	80021c0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2200      	movs	r2, #0
 80021be:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d000      	beq.n	80021ca <HAL_PCD_EP_DB_Transmit+0x72>
 80021c8:	e0b5      	b.n	8002336 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	785b      	ldrb	r3, [r3, #1]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d125      	bne.n	800221e <HAL_PCD_EP_DB_Transmit+0xc6>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2250      	movs	r2, #80	@ 0x50
 80021de:	5a9b      	ldrh	r3, [r3, r2]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	001a      	movs	r2, r3
 80021e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021e6:	189b      	adds	r3, r3, r2
 80021e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	00da      	lsls	r2, r3, #3
 80021f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021f2:	18d3      	adds	r3, r2, r3
 80021f4:	4ab6      	ldr	r2, [pc, #728]	@ (80024d0 <HAL_PCD_EP_DB_Transmit+0x378>)
 80021f6:	4694      	mov	ip, r2
 80021f8:	4463      	add	r3, ip
 80021fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	b29b      	uxth	r3, r3
 8002202:	059b      	lsls	r3, r3, #22
 8002204:	0d9b      	lsrs	r3, r3, #22
 8002206:	b29a      	uxth	r2, r3
 8002208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220a:	801a      	strh	r2, [r3, #0]
 800220c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	b29b      	uxth	r3, r3
 8002212:	4ab0      	ldr	r2, [pc, #704]	@ (80024d4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002214:	4313      	orrs	r3, r2
 8002216:	b29a      	uxth	r2, r3
 8002218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800221a:	801a      	strh	r2, [r3, #0]
 800221c:	e01b      	b.n	8002256 <HAL_PCD_EP_DB_Transmit+0xfe>
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	785b      	ldrb	r3, [r3, #1]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d117      	bne.n	8002256 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	637b      	str	r3, [r7, #52]	@ 0x34
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2250      	movs	r2, #80	@ 0x50
 8002232:	5a9b      	ldrh	r3, [r3, r2]
 8002234:	b29b      	uxth	r3, r3
 8002236:	001a      	movs	r2, r3
 8002238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800223a:	189b      	adds	r3, r3, r2
 800223c:	637b      	str	r3, [r7, #52]	@ 0x34
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	00da      	lsls	r2, r3, #3
 8002244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002246:	18d3      	adds	r3, r2, r3
 8002248:	4aa1      	ldr	r2, [pc, #644]	@ (80024d0 <HAL_PCD_EP_DB_Transmit+0x378>)
 800224a:	4694      	mov	ip, r2
 800224c:	4463      	add	r3, ip
 800224e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002252:	2200      	movs	r2, #0
 8002254:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	627b      	str	r3, [r7, #36]	@ 0x24
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	785b      	ldrb	r3, [r3, #1]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d125      	bne.n	80022b0 <HAL_PCD_EP_DB_Transmit+0x158>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	61fb      	str	r3, [r7, #28]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2250      	movs	r2, #80	@ 0x50
 8002270:	5a9b      	ldrh	r3, [r3, r2]
 8002272:	b29b      	uxth	r3, r3
 8002274:	001a      	movs	r2, r3
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	189b      	adds	r3, r3, r2
 800227a:	61fb      	str	r3, [r7, #28]
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	00da      	lsls	r2, r3, #3
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	18d3      	adds	r3, r2, r3
 8002286:	4a94      	ldr	r2, [pc, #592]	@ (80024d8 <HAL_PCD_EP_DB_Transmit+0x380>)
 8002288:	4694      	mov	ip, r2
 800228a:	4463      	add	r3, ip
 800228c:	61bb      	str	r3, [r7, #24]
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	b29b      	uxth	r3, r3
 8002294:	059b      	lsls	r3, r3, #22
 8002296:	0d9b      	lsrs	r3, r3, #22
 8002298:	b29a      	uxth	r2, r3
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	801a      	strh	r2, [r3, #0]
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	4a8b      	ldr	r2, [pc, #556]	@ (80024d4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	801a      	strh	r2, [r3, #0]
 80022ae:	e018      	b.n	80022e2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	785b      	ldrb	r3, [r3, #1]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d114      	bne.n	80022e2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2250      	movs	r2, #80	@ 0x50
 80022be:	5a9b      	ldrh	r3, [r3, r2]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	001a      	movs	r2, r3
 80022c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c6:	189b      	adds	r3, r3, r2
 80022c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	00da      	lsls	r2, r3, #3
 80022d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d2:	18d3      	adds	r3, r2, r3
 80022d4:	4a80      	ldr	r2, [pc, #512]	@ (80024d8 <HAL_PCD_EP_DB_Transmit+0x380>)
 80022d6:	4694      	mov	ip, r2
 80022d8:	4463      	add	r3, ip
 80022da:	623b      	str	r3, [r7, #32]
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	2200      	movs	r2, #0
 80022e0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	781a      	ldrb	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	0011      	movs	r1, r2
 80022ea:	0018      	movs	r0, r3
 80022ec:	f005 fcc2 	bl	8007c74 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022f0:	1dbb      	adds	r3, r7, #6
 80022f2:	881a      	ldrh	r2, [r3, #0]
 80022f4:	2380      	movs	r3, #128	@ 0x80
 80022f6:	01db      	lsls	r3, r3, #7
 80022f8:	4013      	ands	r3, r2
 80022fa:	d100      	bne.n	80022fe <HAL_PCD_EP_DB_Transmit+0x1a6>
 80022fc:	e308      	b.n	8002910 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	001a      	movs	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	18d3      	adds	r3, r2, r3
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	b29a      	uxth	r2, r3
 8002310:	2016      	movs	r0, #22
 8002312:	183b      	adds	r3, r7, r0
 8002314:	4971      	ldr	r1, [pc, #452]	@ (80024dc <HAL_PCD_EP_DB_Transmit+0x384>)
 8002316:	400a      	ands	r2, r1
 8002318:	801a      	strh	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	001a      	movs	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	18d3      	adds	r3, r2, r3
 8002328:	183a      	adds	r2, r7, r0
 800232a:	8812      	ldrh	r2, [r2, #0]
 800232c:	496c      	ldr	r1, [pc, #432]	@ (80024e0 <HAL_PCD_EP_DB_Transmit+0x388>)
 800232e:	430a      	orrs	r2, r1
 8002330:	b292      	uxth	r2, r2
 8002332:	801a      	strh	r2, [r3, #0]
 8002334:	e2ec      	b.n	8002910 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002336:	1dbb      	adds	r3, r7, #6
 8002338:	881a      	ldrh	r2, [r3, #0]
 800233a:	2380      	movs	r3, #128	@ 0x80
 800233c:	01db      	lsls	r3, r3, #7
 800233e:	4013      	ands	r3, r2
 8002340:	d01a      	beq.n	8002378 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	001a      	movs	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	18d3      	adds	r3, r2, r3
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	b29a      	uxth	r2, r3
 8002354:	208a      	movs	r0, #138	@ 0x8a
 8002356:	183b      	adds	r3, r7, r0
 8002358:	4960      	ldr	r1, [pc, #384]	@ (80024dc <HAL_PCD_EP_DB_Transmit+0x384>)
 800235a:	400a      	ands	r2, r1
 800235c:	801a      	strh	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	001a      	movs	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	18d3      	adds	r3, r2, r3
 800236c:	183a      	adds	r2, r7, r0
 800236e:	8812      	ldrh	r2, [r2, #0]
 8002370:	495b      	ldr	r1, [pc, #364]	@ (80024e0 <HAL_PCD_EP_DB_Transmit+0x388>)
 8002372:	430a      	orrs	r2, r1
 8002374:	b292      	uxth	r2, r2
 8002376:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2224      	movs	r2, #36	@ 0x24
 800237c:	5c9b      	ldrb	r3, [r3, r2]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d000      	beq.n	8002384 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002382:	e2c5      	b.n	8002910 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	695a      	ldr	r2, [r3, #20]
 8002388:	2188      	movs	r1, #136	@ 0x88
 800238a:	187b      	adds	r3, r7, r1
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	18d2      	adds	r2, r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	69da      	ldr	r2, [r3, #28]
 8002398:	187b      	adds	r3, r7, r1
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	18d2      	adds	r2, r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	6a1a      	ldr	r2, [r3, #32]
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d30c      	bcc.n	80023c8 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	218c      	movs	r1, #140	@ 0x8c
 80023b4:	187a      	adds	r2, r7, r1
 80023b6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	6a1a      	ldr	r2, [r3, #32]
 80023bc:	187b      	adds	r3, r7, r1
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	1ad2      	subs	r2, r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	621a      	str	r2, [r3, #32]
 80023c6:	e01a      	b.n	80023fe <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10a      	bne.n	80023e6 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80023d0:	2388      	movs	r3, #136	@ 0x88
 80023d2:	18fb      	adds	r3, r7, r3
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	228c      	movs	r2, #140	@ 0x8c
 80023d8:	18ba      	adds	r2, r7, r2
 80023da:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2224      	movs	r2, #36	@ 0x24
 80023e0:	2100      	movs	r1, #0
 80023e2:	5499      	strb	r1, [r3, r2]
 80023e4:	e00b      	b.n	80023fe <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2224      	movs	r2, #36	@ 0x24
 80023ea:	2100      	movs	r1, #0
 80023ec:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	228c      	movs	r2, #140	@ 0x8c
 80023f4:	18ba      	adds	r2, r7, r2
 80023f6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2200      	movs	r2, #0
 80023fc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	785b      	ldrb	r3, [r3, #1]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d000      	beq.n	8002408 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8002406:	e06d      	b.n	80024e4 <HAL_PCD_EP_DB_Transmit+0x38c>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2250      	movs	r2, #80	@ 0x50
 8002414:	5a9b      	ldrh	r3, [r3, r2]
 8002416:	b29b      	uxth	r3, r3
 8002418:	001a      	movs	r2, r3
 800241a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800241c:	189b      	adds	r3, r3, r2
 800241e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	00da      	lsls	r2, r3, #3
 8002426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002428:	18d3      	adds	r3, r2, r3
 800242a:	4a29      	ldr	r2, [pc, #164]	@ (80024d0 <HAL_PCD_EP_DB_Transmit+0x378>)
 800242c:	4694      	mov	ip, r2
 800242e:	4463      	add	r3, ip
 8002430:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	059b      	lsls	r3, r3, #22
 800243a:	0d9b      	lsrs	r3, r3, #22
 800243c:	b29a      	uxth	r2, r3
 800243e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002440:	801a      	strh	r2, [r3, #0]
 8002442:	238c      	movs	r3, #140	@ 0x8c
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d108      	bne.n	800245e <HAL_PCD_EP_DB_Transmit+0x306>
 800244c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	b29b      	uxth	r3, r3
 8002452:	4a20      	ldr	r2, [pc, #128]	@ (80024d4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002454:	4313      	orrs	r3, r2
 8002456:	b29a      	uxth	r2, r3
 8002458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800245a:	801a      	strh	r2, [r3, #0]
 800245c:	e061      	b.n	8002522 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800245e:	228c      	movs	r2, #140	@ 0x8c
 8002460:	18bb      	adds	r3, r7, r2
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b3e      	cmp	r3, #62	@ 0x3e
 8002466:	d817      	bhi.n	8002498 <HAL_PCD_EP_DB_Transmit+0x340>
 8002468:	18bb      	adds	r3, r7, r2
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	085b      	lsrs	r3, r3, #1
 800246e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002470:	18bb      	adds	r3, r7, r2
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2201      	movs	r2, #1
 8002476:	4013      	ands	r3, r2
 8002478:	d002      	beq.n	8002480 <HAL_PCD_EP_DB_Transmit+0x328>
 800247a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800247c:	3301      	adds	r3, #1
 800247e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	b29a      	uxth	r2, r3
 8002486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002488:	b29b      	uxth	r3, r3
 800248a:	029b      	lsls	r3, r3, #10
 800248c:	b29b      	uxth	r3, r3
 800248e:	4313      	orrs	r3, r2
 8002490:	b29a      	uxth	r2, r3
 8002492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002494:	801a      	strh	r2, [r3, #0]
 8002496:	e044      	b.n	8002522 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002498:	228c      	movs	r2, #140	@ 0x8c
 800249a:	18bb      	adds	r3, r7, r2
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024a2:	18bb      	adds	r3, r7, r2
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	221f      	movs	r2, #31
 80024a8:	4013      	ands	r3, r2
 80024aa:	d102      	bne.n	80024b2 <HAL_PCD_EP_DB_Transmit+0x35a>
 80024ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024ae:	3b01      	subs	r3, #1
 80024b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	029b      	lsls	r3, r3, #10
 80024be:	b29b      	uxth	r3, r3
 80024c0:	4313      	orrs	r3, r2
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	4a03      	ldr	r2, [pc, #12]	@ (80024d4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024cc:	801a      	strh	r2, [r3, #0]
 80024ce:	e028      	b.n	8002522 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80024d0:	00000402 	.word	0x00000402
 80024d4:	ffff8000 	.word	0xffff8000
 80024d8:	00000406 	.word	0x00000406
 80024dc:	ffff8f8f 	.word	0xffff8f8f
 80024e0:	ffffc080 	.word	0xffffc080
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	785b      	ldrb	r3, [r3, #1]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d11a      	bne.n	8002522 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2250      	movs	r2, #80	@ 0x50
 80024f8:	5a9b      	ldrh	r3, [r3, r2]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	001a      	movs	r2, r3
 80024fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002500:	189b      	adds	r3, r3, r2
 8002502:	647b      	str	r3, [r7, #68]	@ 0x44
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	00da      	lsls	r2, r3, #3
 800250a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800250c:	18d3      	adds	r3, r2, r3
 800250e:	4ad9      	ldr	r2, [pc, #868]	@ (8002874 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8002510:	4694      	mov	ip, r2
 8002512:	4463      	add	r3, ip
 8002514:	643b      	str	r3, [r7, #64]	@ 0x40
 8002516:	238c      	movs	r3, #140	@ 0x8c
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	b29a      	uxth	r2, r3
 800251e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002520:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	6959      	ldr	r1, [r3, #20]
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	891a      	ldrh	r2, [r3, #8]
 800252e:	238c      	movs	r3, #140	@ 0x8c
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	f002 fe36 	bl	80051a6 <USB_WritePMA>
 800253a:	e1e9      	b.n	8002910 <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2250      	movs	r2, #80	@ 0x50
 8002542:	5a9b      	ldrh	r3, [r3, r2]
 8002544:	b29b      	uxth	r3, r3
 8002546:	001a      	movs	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	18d2      	adds	r2, r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	18d3      	adds	r3, r2, r3
 8002556:	4ac8      	ldr	r2, [pc, #800]	@ (8002878 <HAL_PCD_EP_DB_Transmit+0x720>)
 8002558:	4694      	mov	ip, r2
 800255a:	4463      	add	r3, ip
 800255c:	881a      	ldrh	r2, [r3, #0]
 800255e:	2188      	movs	r1, #136	@ 0x88
 8002560:	187b      	adds	r3, r7, r1
 8002562:	0592      	lsls	r2, r2, #22
 8002564:	0d92      	lsrs	r2, r2, #22
 8002566:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	699a      	ldr	r2, [r3, #24]
 800256c:	187b      	adds	r3, r7, r1
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d307      	bcc.n	8002584 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	699a      	ldr	r2, [r3, #24]
 8002578:	187b      	adds	r3, r7, r1
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	1ad2      	subs	r2, r2, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	619a      	str	r2, [r3, #24]
 8002582:	e002      	b.n	800258a <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2200      	movs	r2, #0
 8002588:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d000      	beq.n	8002594 <HAL_PCD_EP_DB_Transmit+0x43c>
 8002592:	e0bb      	b.n	800270c <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	785b      	ldrb	r3, [r3, #1]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d125      	bne.n	80025e8 <HAL_PCD_EP_DB_Transmit+0x490>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2250      	movs	r2, #80	@ 0x50
 80025a8:	5a9b      	ldrh	r3, [r3, r2]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	001a      	movs	r2, r3
 80025ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025b0:	189b      	adds	r3, r3, r2
 80025b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	00da      	lsls	r2, r3, #3
 80025ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025bc:	18d3      	adds	r3, r2, r3
 80025be:	4aad      	ldr	r2, [pc, #692]	@ (8002874 <HAL_PCD_EP_DB_Transmit+0x71c>)
 80025c0:	4694      	mov	ip, r2
 80025c2:	4463      	add	r3, ip
 80025c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80025c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	059b      	lsls	r3, r3, #22
 80025ce:	0d9b      	lsrs	r3, r3, #22
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025d4:	801a      	strh	r2, [r3, #0]
 80025d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	4aa7      	ldr	r2, [pc, #668]	@ (800287c <HAL_PCD_EP_DB_Transmit+0x724>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025e4:	801a      	strh	r2, [r3, #0]
 80025e6:	e01b      	b.n	8002620 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	785b      	ldrb	r3, [r3, #1]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d117      	bne.n	8002620 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2250      	movs	r2, #80	@ 0x50
 80025fc:	5a9b      	ldrh	r3, [r3, r2]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	001a      	movs	r2, r3
 8002602:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002604:	189b      	adds	r3, r3, r2
 8002606:	667b      	str	r3, [r7, #100]	@ 0x64
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	00da      	lsls	r2, r3, #3
 800260e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002610:	18d3      	adds	r3, r2, r3
 8002612:	4a98      	ldr	r2, [pc, #608]	@ (8002874 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8002614:	4694      	mov	ip, r2
 8002616:	4463      	add	r3, ip
 8002618:	663b      	str	r3, [r7, #96]	@ 0x60
 800261a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800261c:	2200      	movs	r2, #0
 800261e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	677b      	str	r3, [r7, #116]	@ 0x74
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	785b      	ldrb	r3, [r3, #1]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d12b      	bne.n	8002686 <HAL_PCD_EP_DB_Transmit+0x52e>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2250      	movs	r2, #80	@ 0x50
 800263a:	5a9b      	ldrh	r3, [r3, r2]
 800263c:	b29b      	uxth	r3, r3
 800263e:	001a      	movs	r2, r3
 8002640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002642:	189b      	adds	r3, r3, r2
 8002644:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	00da      	lsls	r2, r3, #3
 800264c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800264e:	18d3      	adds	r3, r2, r3
 8002650:	4a89      	ldr	r2, [pc, #548]	@ (8002878 <HAL_PCD_EP_DB_Transmit+0x720>)
 8002652:	4694      	mov	ip, r2
 8002654:	4463      	add	r3, ip
 8002656:	2184      	movs	r1, #132	@ 0x84
 8002658:	187a      	adds	r2, r7, r1
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	187b      	adds	r3, r7, r1
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	059b      	lsls	r3, r3, #22
 8002666:	0d9b      	lsrs	r3, r3, #22
 8002668:	b29a      	uxth	r2, r3
 800266a:	187b      	adds	r3, r7, r1
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	801a      	strh	r2, [r3, #0]
 8002670:	187b      	adds	r3, r7, r1
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	b29b      	uxth	r3, r3
 8002678:	4a80      	ldr	r2, [pc, #512]	@ (800287c <HAL_PCD_EP_DB_Transmit+0x724>)
 800267a:	4313      	orrs	r3, r2
 800267c:	b29a      	uxth	r2, r3
 800267e:	187b      	adds	r3, r7, r1
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	801a      	strh	r2, [r3, #0]
 8002684:	e018      	b.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x560>
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	785b      	ldrb	r3, [r3, #1]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d114      	bne.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x560>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2250      	movs	r2, #80	@ 0x50
 8002694:	5a9b      	ldrh	r3, [r3, r2]
 8002696:	b29b      	uxth	r3, r3
 8002698:	001a      	movs	r2, r3
 800269a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800269c:	189b      	adds	r3, r3, r2
 800269e:	677b      	str	r3, [r7, #116]	@ 0x74
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	00da      	lsls	r2, r3, #3
 80026a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026a8:	18d3      	adds	r3, r2, r3
 80026aa:	4a73      	ldr	r2, [pc, #460]	@ (8002878 <HAL_PCD_EP_DB_Transmit+0x720>)
 80026ac:	4694      	mov	ip, r2
 80026ae:	4463      	add	r3, ip
 80026b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80026b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026b4:	2200      	movs	r2, #0
 80026b6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	781a      	ldrb	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	0011      	movs	r1, r2
 80026c0:	0018      	movs	r0, r3
 80026c2:	f005 fad7 	bl	8007c74 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026c6:	1dbb      	adds	r3, r7, #6
 80026c8:	881a      	ldrh	r2, [r3, #0]
 80026ca:	2380      	movs	r3, #128	@ 0x80
 80026cc:	01db      	lsls	r3, r3, #7
 80026ce:	4013      	ands	r3, r2
 80026d0:	d000      	beq.n	80026d4 <HAL_PCD_EP_DB_Transmit+0x57c>
 80026d2:	e11d      	b.n	8002910 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	001a      	movs	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	18d3      	adds	r3, r2, r3
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	2082      	movs	r0, #130	@ 0x82
 80026e8:	183b      	adds	r3, r7, r0
 80026ea:	4965      	ldr	r1, [pc, #404]	@ (8002880 <HAL_PCD_EP_DB_Transmit+0x728>)
 80026ec:	400a      	ands	r2, r1
 80026ee:	801a      	strh	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	001a      	movs	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	18d3      	adds	r3, r2, r3
 80026fe:	183a      	adds	r2, r7, r0
 8002700:	8812      	ldrh	r2, [r2, #0]
 8002702:	4960      	ldr	r1, [pc, #384]	@ (8002884 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002704:	430a      	orrs	r2, r1
 8002706:	b292      	uxth	r2, r2
 8002708:	801a      	strh	r2, [r3, #0]
 800270a:	e101      	b.n	8002910 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800270c:	1dbb      	adds	r3, r7, #6
 800270e:	881a      	ldrh	r2, [r3, #0]
 8002710:	2380      	movs	r3, #128	@ 0x80
 8002712:	01db      	lsls	r3, r3, #7
 8002714:	4013      	ands	r3, r2
 8002716:	d11a      	bne.n	800274e <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	001a      	movs	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	18d3      	adds	r3, r2, r3
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	b29a      	uxth	r2, r3
 800272a:	204e      	movs	r0, #78	@ 0x4e
 800272c:	183b      	adds	r3, r7, r0
 800272e:	4954      	ldr	r1, [pc, #336]	@ (8002880 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002730:	400a      	ands	r2, r1
 8002732:	801a      	strh	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	001a      	movs	r2, r3
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	18d3      	adds	r3, r2, r3
 8002742:	183a      	adds	r2, r7, r0
 8002744:	8812      	ldrh	r2, [r2, #0]
 8002746:	494f      	ldr	r1, [pc, #316]	@ (8002884 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002748:	430a      	orrs	r2, r1
 800274a:	b292      	uxth	r2, r2
 800274c:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2224      	movs	r2, #36	@ 0x24
 8002752:	5c9b      	ldrb	r3, [r3, r2]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d000      	beq.n	800275a <HAL_PCD_EP_DB_Transmit+0x602>
 8002758:	e0da      	b.n	8002910 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	695a      	ldr	r2, [r3, #20]
 800275e:	2188      	movs	r1, #136	@ 0x88
 8002760:	187b      	adds	r3, r7, r1
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	18d2      	adds	r2, r2, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	69da      	ldr	r2, [r3, #28]
 800276e:	187b      	adds	r3, r7, r1
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	18d2      	adds	r2, r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	6a1a      	ldr	r2, [r3, #32]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	429a      	cmp	r2, r3
 8002782:	d30c      	bcc.n	800279e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	218c      	movs	r1, #140	@ 0x8c
 800278a:	187a      	adds	r2, r7, r1
 800278c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	6a1a      	ldr	r2, [r3, #32]
 8002792:	187b      	adds	r3, r7, r1
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	1ad2      	subs	r2, r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	621a      	str	r2, [r3, #32]
 800279c:	e01a      	b.n	80027d4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10a      	bne.n	80027bc <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80027a6:	2388      	movs	r3, #136	@ 0x88
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	228c      	movs	r2, #140	@ 0x8c
 80027ae:	18ba      	adds	r2, r7, r2
 80027b0:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2224      	movs	r2, #36	@ 0x24
 80027b6:	2100      	movs	r1, #0
 80027b8:	5499      	strb	r1, [r3, r2]
 80027ba:	e00b      	b.n	80027d4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	228c      	movs	r2, #140	@ 0x8c
 80027c2:	18ba      	adds	r2, r7, r2
 80027c4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2200      	movs	r2, #0
 80027ca:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2224      	movs	r2, #36	@ 0x24
 80027d0:	2100      	movs	r1, #0
 80027d2:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	785b      	ldrb	r3, [r3, #1]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d000      	beq.n	80027e4 <HAL_PCD_EP_DB_Transmit+0x68c>
 80027e2:	e06d      	b.n	80028c0 <HAL_PCD_EP_DB_Transmit+0x768>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2250      	movs	r2, #80	@ 0x50
 80027f0:	5a9b      	ldrh	r3, [r3, r2]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	001a      	movs	r2, r3
 80027f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027f8:	189b      	adds	r3, r3, r2
 80027fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	00da      	lsls	r2, r3, #3
 8002802:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002804:	18d3      	adds	r3, r2, r3
 8002806:	4a1c      	ldr	r2, [pc, #112]	@ (8002878 <HAL_PCD_EP_DB_Transmit+0x720>)
 8002808:	4694      	mov	ip, r2
 800280a:	4463      	add	r3, ip
 800280c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800280e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	b29b      	uxth	r3, r3
 8002814:	059b      	lsls	r3, r3, #22
 8002816:	0d9b      	lsrs	r3, r3, #22
 8002818:	b29a      	uxth	r2, r3
 800281a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800281c:	801a      	strh	r2, [r3, #0]
 800281e:	238c      	movs	r3, #140	@ 0x8c
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d108      	bne.n	800283a <HAL_PCD_EP_DB_Transmit+0x6e2>
 8002828:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	b29b      	uxth	r3, r3
 800282e:	4a13      	ldr	r2, [pc, #76]	@ (800287c <HAL_PCD_EP_DB_Transmit+0x724>)
 8002830:	4313      	orrs	r3, r2
 8002832:	b29a      	uxth	r2, r3
 8002834:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002836:	801a      	strh	r2, [r3, #0]
 8002838:	e05e      	b.n	80028f8 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800283a:	228c      	movs	r2, #140	@ 0x8c
 800283c:	18bb      	adds	r3, r7, r2
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b3e      	cmp	r3, #62	@ 0x3e
 8002842:	d821      	bhi.n	8002888 <HAL_PCD_EP_DB_Transmit+0x730>
 8002844:	18bb      	adds	r3, r7, r2
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	085b      	lsrs	r3, r3, #1
 800284a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800284c:	18bb      	adds	r3, r7, r2
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2201      	movs	r2, #1
 8002852:	4013      	ands	r3, r2
 8002854:	d002      	beq.n	800285c <HAL_PCD_EP_DB_Transmit+0x704>
 8002856:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002858:	3301      	adds	r3, #1
 800285a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800285c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	b29a      	uxth	r2, r3
 8002862:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002864:	b29b      	uxth	r3, r3
 8002866:	029b      	lsls	r3, r3, #10
 8002868:	b29b      	uxth	r3, r3
 800286a:	4313      	orrs	r3, r2
 800286c:	b29a      	uxth	r2, r3
 800286e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002870:	801a      	strh	r2, [r3, #0]
 8002872:	e041      	b.n	80028f8 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8002874:	00000402 	.word	0x00000402
 8002878:	00000406 	.word	0x00000406
 800287c:	ffff8000 	.word	0xffff8000
 8002880:	ffff8f8f 	.word	0xffff8f8f
 8002884:	ffffc080 	.word	0xffffc080
 8002888:	228c      	movs	r2, #140	@ 0x8c
 800288a:	18bb      	adds	r3, r7, r2
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002892:	18bb      	adds	r3, r7, r2
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	221f      	movs	r2, #31
 8002898:	4013      	ands	r3, r2
 800289a:	d102      	bne.n	80028a2 <HAL_PCD_EP_DB_Transmit+0x74a>
 800289c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800289e:	3b01      	subs	r3, #1
 80028a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	029b      	lsls	r3, r3, #10
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	4313      	orrs	r3, r2
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002968 <HAL_PCD_EP_DB_Transmit+0x810>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028bc:	801a      	strh	r2, [r3, #0]
 80028be:	e01b      	b.n	80028f8 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	785b      	ldrb	r3, [r3, #1]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d117      	bne.n	80028f8 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2250      	movs	r2, #80	@ 0x50
 80028ce:	5a9b      	ldrh	r3, [r3, r2]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	001a      	movs	r2, r3
 80028d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028d6:	189b      	adds	r3, r3, r2
 80028d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	00da      	lsls	r2, r3, #3
 80028e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e2:	18d3      	adds	r3, r2, r3
 80028e4:	4a21      	ldr	r2, [pc, #132]	@ (800296c <HAL_PCD_EP_DB_Transmit+0x814>)
 80028e6:	4694      	mov	ip, r2
 80028e8:	4463      	add	r3, ip
 80028ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80028ec:	238c      	movs	r3, #140	@ 0x8c
 80028ee:	18fb      	adds	r3, r7, r3
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028f6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	6959      	ldr	r1, [r3, #20]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	895a      	ldrh	r2, [r3, #10]
 8002904:	238c      	movs	r3, #140	@ 0x8c
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	b29b      	uxth	r3, r3
 800290c:	f002 fc4b 	bl	80051a6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	001a      	movs	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	18d3      	adds	r3, r2, r3
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	b29a      	uxth	r2, r3
 8002922:	2014      	movs	r0, #20
 8002924:	183b      	adds	r3, r7, r0
 8002926:	4912      	ldr	r1, [pc, #72]	@ (8002970 <HAL_PCD_EP_DB_Transmit+0x818>)
 8002928:	400a      	ands	r2, r1
 800292a:	801a      	strh	r2, [r3, #0]
 800292c:	183b      	adds	r3, r7, r0
 800292e:	183a      	adds	r2, r7, r0
 8002930:	8812      	ldrh	r2, [r2, #0]
 8002932:	2110      	movs	r1, #16
 8002934:	404a      	eors	r2, r1
 8002936:	801a      	strh	r2, [r3, #0]
 8002938:	183b      	adds	r3, r7, r0
 800293a:	183a      	adds	r2, r7, r0
 800293c:	8812      	ldrh	r2, [r2, #0]
 800293e:	2120      	movs	r1, #32
 8002940:	404a      	eors	r2, r1
 8002942:	801a      	strh	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	001a      	movs	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	18d3      	adds	r3, r2, r3
 8002952:	183a      	adds	r2, r7, r0
 8002954:	8812      	ldrh	r2, [r2, #0]
 8002956:	4907      	ldr	r1, [pc, #28]	@ (8002974 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8002958:	430a      	orrs	r2, r1
 800295a:	b292      	uxth	r2, r2
 800295c:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	0018      	movs	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	b024      	add	sp, #144	@ 0x90
 8002966:	bd80      	pop	{r7, pc}
 8002968:	ffff8000 	.word	0xffff8000
 800296c:	00000406 	.word	0x00000406
 8002970:	ffff8fbf 	.word	0xffff8fbf
 8002974:	ffff8080 	.word	0xffff8080

08002978 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	0008      	movs	r0, r1
 8002982:	0011      	movs	r1, r2
 8002984:	607b      	str	r3, [r7, #4]
 8002986:	240a      	movs	r4, #10
 8002988:	193b      	adds	r3, r7, r4
 800298a:	1c02      	adds	r2, r0, #0
 800298c:	801a      	strh	r2, [r3, #0]
 800298e:	2308      	movs	r3, #8
 8002990:	18fb      	adds	r3, r7, r3
 8002992:	1c0a      	adds	r2, r1, #0
 8002994:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002996:	0021      	movs	r1, r4
 8002998:	187b      	adds	r3, r7, r1
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	2280      	movs	r2, #128	@ 0x80
 800299e:	4013      	ands	r3, r2
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00c      	beq.n	80029c0 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029a6:	187b      	adds	r3, r7, r1
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	2207      	movs	r2, #7
 80029ac:	401a      	ands	r2, r3
 80029ae:	0013      	movs	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	189b      	adds	r3, r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	3310      	adds	r3, #16
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	18d3      	adds	r3, r2, r3
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	e00b      	b.n	80029d8 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029c0:	230a      	movs	r3, #10
 80029c2:	18fb      	adds	r3, r7, r3
 80029c4:	881a      	ldrh	r2, [r3, #0]
 80029c6:	0013      	movs	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	189b      	adds	r3, r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	3351      	adds	r3, #81	@ 0x51
 80029d0:	33ff      	adds	r3, #255	@ 0xff
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	18d3      	adds	r3, r2, r3
 80029d6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80029d8:	2308      	movs	r3, #8
 80029da:	18fb      	adds	r3, r7, r3
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d107      	bne.n	80029f2 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2200      	movs	r2, #0
 80029e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	80da      	strh	r2, [r3, #6]
 80029f0:	e00b      	b.n	8002a0a <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2201      	movs	r2, #1
 80029f6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	0c1b      	lsrs	r3, r3, #16
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b007      	add	sp, #28
 8002a12:	bd90      	pop	{r4, r7, pc}

08002a14 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	23b4      	movs	r3, #180	@ 0xb4
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	2101      	movs	r1, #1
 8002a2a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	23b2      	movs	r3, #178	@ 0xb2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	2100      	movs	r1, #0
 8002a34:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2254      	movs	r2, #84	@ 0x54
 8002a3a:	5a9b      	ldrh	r3, [r3, r2]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4313      	orrs	r3, r2
 8002a42:	b299      	uxth	r1, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2254      	movs	r2, #84	@ 0x54
 8002a48:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2254      	movs	r2, #84	@ 0x54
 8002a4e:	5a9b      	ldrh	r3, [r3, r2]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	2202      	movs	r2, #2
 8002a54:	4313      	orrs	r3, r2
 8002a56:	b299      	uxth	r1, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2254      	movs	r2, #84	@ 0x54
 8002a5c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	0018      	movs	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b004      	add	sp, #16
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	000a      	movs	r2, r1
 8002a72:	1cfb      	adds	r3, r7, #3
 8002a74:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002a76:	46c0      	nop			@ (mov r8, r8)
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b002      	add	sp, #8
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e305      	b.n	800309e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2201      	movs	r2, #1
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d100      	bne.n	8002a9e <HAL_RCC_OscConfig+0x1e>
 8002a9c:	e08d      	b.n	8002bba <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a9e:	4bc5      	ldr	r3, [pc, #788]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	220c      	movs	r2, #12
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d00e      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002aaa:	4bc2      	ldr	r3, [pc, #776]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	220c      	movs	r2, #12
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d116      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x64>
 8002ab6:	4bbf      	ldr	r3, [pc, #764]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	23c0      	movs	r3, #192	@ 0xc0
 8002abc:	025b      	lsls	r3, r3, #9
 8002abe:	401a      	ands	r2, r3
 8002ac0:	2380      	movs	r3, #128	@ 0x80
 8002ac2:	025b      	lsls	r3, r3, #9
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d10d      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac8:	4bba      	ldr	r3, [pc, #744]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	2380      	movs	r3, #128	@ 0x80
 8002ace:	029b      	lsls	r3, r3, #10
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d100      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x56>
 8002ad4:	e070      	b.n	8002bb8 <HAL_RCC_OscConfig+0x138>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d000      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x60>
 8002ade:	e06b      	b.n	8002bb8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e2dc      	b.n	800309e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d107      	bne.n	8002afc <HAL_RCC_OscConfig+0x7c>
 8002aec:	4bb1      	ldr	r3, [pc, #708]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4bb0      	ldr	r3, [pc, #704]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002af2:	2180      	movs	r1, #128	@ 0x80
 8002af4:	0249      	lsls	r1, r1, #9
 8002af6:	430a      	orrs	r2, r1
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	e02f      	b.n	8002b5c <HAL_RCC_OscConfig+0xdc>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10c      	bne.n	8002b1e <HAL_RCC_OscConfig+0x9e>
 8002b04:	4bab      	ldr	r3, [pc, #684]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4baa      	ldr	r3, [pc, #680]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002b0a:	49ab      	ldr	r1, [pc, #684]	@ (8002db8 <HAL_RCC_OscConfig+0x338>)
 8002b0c:	400a      	ands	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	4ba8      	ldr	r3, [pc, #672]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4ba7      	ldr	r3, [pc, #668]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002b16:	49a9      	ldr	r1, [pc, #676]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002b18:	400a      	ands	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	e01e      	b.n	8002b5c <HAL_RCC_OscConfig+0xdc>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b05      	cmp	r3, #5
 8002b24:	d10e      	bne.n	8002b44 <HAL_RCC_OscConfig+0xc4>
 8002b26:	4ba3      	ldr	r3, [pc, #652]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	4ba2      	ldr	r3, [pc, #648]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002b2c:	2180      	movs	r1, #128	@ 0x80
 8002b2e:	02c9      	lsls	r1, r1, #11
 8002b30:	430a      	orrs	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	4b9f      	ldr	r3, [pc, #636]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4b9e      	ldr	r3, [pc, #632]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002b3a:	2180      	movs	r1, #128	@ 0x80
 8002b3c:	0249      	lsls	r1, r1, #9
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	e00b      	b.n	8002b5c <HAL_RCC_OscConfig+0xdc>
 8002b44:	4b9b      	ldr	r3, [pc, #620]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b9a      	ldr	r3, [pc, #616]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002b4a:	499b      	ldr	r1, [pc, #620]	@ (8002db8 <HAL_RCC_OscConfig+0x338>)
 8002b4c:	400a      	ands	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	4b98      	ldr	r3, [pc, #608]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b97      	ldr	r3, [pc, #604]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002b56:	4999      	ldr	r1, [pc, #612]	@ (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002b58:	400a      	ands	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d014      	beq.n	8002b8e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7fd fcf4 	bl	8000550 <HAL_GetTick>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b6e:	f7fd fcef 	bl	8000550 <HAL_GetTick>
 8002b72:	0002      	movs	r2, r0
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b64      	cmp	r3, #100	@ 0x64
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e28e      	b.n	800309e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b80:	4b8c      	ldr	r3, [pc, #560]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	2380      	movs	r3, #128	@ 0x80
 8002b86:	029b      	lsls	r3, r3, #10
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0xee>
 8002b8c:	e015      	b.n	8002bba <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8e:	f7fd fcdf 	bl	8000550 <HAL_GetTick>
 8002b92:	0003      	movs	r3, r0
 8002b94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b98:	f7fd fcda 	bl	8000550 <HAL_GetTick>
 8002b9c:	0002      	movs	r2, r0
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	@ 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e279      	b.n	800309e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002baa:	4b82      	ldr	r3, [pc, #520]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	2380      	movs	r3, #128	@ 0x80
 8002bb0:	029b      	lsls	r3, r3, #10
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x118>
 8002bb6:	e000      	b.n	8002bba <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d100      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x146>
 8002bc4:	e06c      	b.n	8002ca0 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002bc6:	4b7b      	ldr	r3, [pc, #492]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	220c      	movs	r2, #12
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d00e      	beq.n	8002bee <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002bd0:	4b78      	ldr	r3, [pc, #480]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	220c      	movs	r2, #12
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d11f      	bne.n	8002c1c <HAL_RCC_OscConfig+0x19c>
 8002bdc:	4b75      	ldr	r3, [pc, #468]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	23c0      	movs	r3, #192	@ 0xc0
 8002be2:	025b      	lsls	r3, r3, #9
 8002be4:	401a      	ands	r2, r3
 8002be6:	2380      	movs	r3, #128	@ 0x80
 8002be8:	021b      	lsls	r3, r3, #8
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d116      	bne.n	8002c1c <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bee:	4b71      	ldr	r3, [pc, #452]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d005      	beq.n	8002c04 <HAL_RCC_OscConfig+0x184>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e24c      	b.n	800309e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c04:	4b6b      	ldr	r3, [pc, #428]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	22f8      	movs	r2, #248	@ 0xf8
 8002c0a:	4393      	bics	r3, r2
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	00da      	lsls	r2, r3, #3
 8002c14:	4b67      	ldr	r3, [pc, #412]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002c16:	430a      	orrs	r2, r1
 8002c18:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1a:	e041      	b.n	8002ca0 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d024      	beq.n	8002c6e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c24:	4b63      	ldr	r3, [pc, #396]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4b62      	ldr	r3, [pc, #392]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7fd fc8e 	bl	8000550 <HAL_GetTick>
 8002c34:	0003      	movs	r3, r0
 8002c36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c3a:	f7fd fc89 	bl	8000550 <HAL_GetTick>
 8002c3e:	0002      	movs	r2, r0
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e228      	b.n	800309e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4c:	4b59      	ldr	r3, [pc, #356]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2202      	movs	r2, #2
 8002c52:	4013      	ands	r3, r2
 8002c54:	d0f1      	beq.n	8002c3a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c56:	4b57      	ldr	r3, [pc, #348]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	22f8      	movs	r2, #248	@ 0xf8
 8002c5c:	4393      	bics	r3, r2
 8002c5e:	0019      	movs	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	00da      	lsls	r2, r3, #3
 8002c66:	4b53      	ldr	r3, [pc, #332]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	e018      	b.n	8002ca0 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c6e:	4b51      	ldr	r3, [pc, #324]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	4b50      	ldr	r3, [pc, #320]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002c74:	2101      	movs	r1, #1
 8002c76:	438a      	bics	r2, r1
 8002c78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7a:	f7fd fc69 	bl	8000550 <HAL_GetTick>
 8002c7e:	0003      	movs	r3, r0
 8002c80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c84:	f7fd fc64 	bl	8000550 <HAL_GetTick>
 8002c88:	0002      	movs	r2, r0
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e203      	b.n	800309e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c96:	4b47      	ldr	r3, [pc, #284]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d1f1      	bne.n	8002c84 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2208      	movs	r2, #8
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d036      	beq.n	8002d18 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d019      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cb2:	4b40      	ldr	r3, [pc, #256]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002cb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cb6:	4b3f      	ldr	r3, [pc, #252]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002cb8:	2101      	movs	r1, #1
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbe:	f7fd fc47 	bl	8000550 <HAL_GetTick>
 8002cc2:	0003      	movs	r3, r0
 8002cc4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc8:	f7fd fc42 	bl	8000550 <HAL_GetTick>
 8002ccc:	0002      	movs	r2, r0
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e1e1      	b.n	800309e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cda:	4b36      	ldr	r3, [pc, #216]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cde:	2202      	movs	r2, #2
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d0f1      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x248>
 8002ce4:	e018      	b.n	8002d18 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce6:	4b33      	ldr	r3, [pc, #204]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002ce8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cea:	4b32      	ldr	r3, [pc, #200]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002cec:	2101      	movs	r1, #1
 8002cee:	438a      	bics	r2, r1
 8002cf0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf2:	f7fd fc2d 	bl	8000550 <HAL_GetTick>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cfc:	f7fd fc28 	bl	8000550 <HAL_GetTick>
 8002d00:	0002      	movs	r2, r0
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e1c7      	b.n	800309e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d0e:	4b29      	ldr	r3, [pc, #164]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d12:	2202      	movs	r2, #2
 8002d14:	4013      	ands	r3, r2
 8002d16:	d1f1      	bne.n	8002cfc <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d100      	bne.n	8002d24 <HAL_RCC_OscConfig+0x2a4>
 8002d22:	e0b5      	b.n	8002e90 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d24:	201f      	movs	r0, #31
 8002d26:	183b      	adds	r3, r7, r0
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d2c:	4b21      	ldr	r3, [pc, #132]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002d2e:	69da      	ldr	r2, [r3, #28]
 8002d30:	2380      	movs	r3, #128	@ 0x80
 8002d32:	055b      	lsls	r3, r3, #21
 8002d34:	4013      	ands	r3, r2
 8002d36:	d110      	bne.n	8002d5a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d38:	4b1e      	ldr	r3, [pc, #120]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002d3a:	69da      	ldr	r2, [r3, #28]
 8002d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002d3e:	2180      	movs	r1, #128	@ 0x80
 8002d40:	0549      	lsls	r1, r1, #21
 8002d42:	430a      	orrs	r2, r1
 8002d44:	61da      	str	r2, [r3, #28]
 8002d46:	4b1b      	ldr	r3, [pc, #108]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002d48:	69da      	ldr	r2, [r3, #28]
 8002d4a:	2380      	movs	r3, #128	@ 0x80
 8002d4c:	055b      	lsls	r3, r3, #21
 8002d4e:	4013      	ands	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d54:	183b      	adds	r3, r7, r0
 8002d56:	2201      	movs	r2, #1
 8002d58:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5a:	4b19      	ldr	r3, [pc, #100]	@ (8002dc0 <HAL_RCC_OscConfig+0x340>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	2380      	movs	r3, #128	@ 0x80
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	4013      	ands	r3, r2
 8002d64:	d11a      	bne.n	8002d9c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d66:	4b16      	ldr	r3, [pc, #88]	@ (8002dc0 <HAL_RCC_OscConfig+0x340>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	4b15      	ldr	r3, [pc, #84]	@ (8002dc0 <HAL_RCC_OscConfig+0x340>)
 8002d6c:	2180      	movs	r1, #128	@ 0x80
 8002d6e:	0049      	lsls	r1, r1, #1
 8002d70:	430a      	orrs	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d74:	f7fd fbec 	bl	8000550 <HAL_GetTick>
 8002d78:	0003      	movs	r3, r0
 8002d7a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d7e:	f7fd fbe7 	bl	8000550 <HAL_GetTick>
 8002d82:	0002      	movs	r2, r0
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b64      	cmp	r3, #100	@ 0x64
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e186      	b.n	800309e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d90:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc0 <HAL_RCC_OscConfig+0x340>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	2380      	movs	r3, #128	@ 0x80
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d0f0      	beq.n	8002d7e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d10f      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x344>
 8002da4:	4b03      	ldr	r3, [pc, #12]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002da6:	6a1a      	ldr	r2, [r3, #32]
 8002da8:	4b02      	ldr	r3, [pc, #8]	@ (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002daa:	2101      	movs	r1, #1
 8002dac:	430a      	orrs	r2, r1
 8002dae:	621a      	str	r2, [r3, #32]
 8002db0:	e036      	b.n	8002e20 <HAL_RCC_OscConfig+0x3a0>
 8002db2:	46c0      	nop			@ (mov r8, r8)
 8002db4:	40021000 	.word	0x40021000
 8002db8:	fffeffff 	.word	0xfffeffff
 8002dbc:	fffbffff 	.word	0xfffbffff
 8002dc0:	40007000 	.word	0x40007000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10c      	bne.n	8002de6 <HAL_RCC_OscConfig+0x366>
 8002dcc:	4bb6      	ldr	r3, [pc, #728]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002dce:	6a1a      	ldr	r2, [r3, #32]
 8002dd0:	4bb5      	ldr	r3, [pc, #724]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	438a      	bics	r2, r1
 8002dd6:	621a      	str	r2, [r3, #32]
 8002dd8:	4bb3      	ldr	r3, [pc, #716]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002dda:	6a1a      	ldr	r2, [r3, #32]
 8002ddc:	4bb2      	ldr	r3, [pc, #712]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002dde:	2104      	movs	r1, #4
 8002de0:	438a      	bics	r2, r1
 8002de2:	621a      	str	r2, [r3, #32]
 8002de4:	e01c      	b.n	8002e20 <HAL_RCC_OscConfig+0x3a0>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b05      	cmp	r3, #5
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x388>
 8002dee:	4bae      	ldr	r3, [pc, #696]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002df0:	6a1a      	ldr	r2, [r3, #32]
 8002df2:	4bad      	ldr	r3, [pc, #692]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002df4:	2104      	movs	r1, #4
 8002df6:	430a      	orrs	r2, r1
 8002df8:	621a      	str	r2, [r3, #32]
 8002dfa:	4bab      	ldr	r3, [pc, #684]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002dfc:	6a1a      	ldr	r2, [r3, #32]
 8002dfe:	4baa      	ldr	r3, [pc, #680]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002e00:	2101      	movs	r1, #1
 8002e02:	430a      	orrs	r2, r1
 8002e04:	621a      	str	r2, [r3, #32]
 8002e06:	e00b      	b.n	8002e20 <HAL_RCC_OscConfig+0x3a0>
 8002e08:	4ba7      	ldr	r3, [pc, #668]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002e0a:	6a1a      	ldr	r2, [r3, #32]
 8002e0c:	4ba6      	ldr	r3, [pc, #664]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002e0e:	2101      	movs	r1, #1
 8002e10:	438a      	bics	r2, r1
 8002e12:	621a      	str	r2, [r3, #32]
 8002e14:	4ba4      	ldr	r3, [pc, #656]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002e16:	6a1a      	ldr	r2, [r3, #32]
 8002e18:	4ba3      	ldr	r3, [pc, #652]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002e1a:	2104      	movs	r1, #4
 8002e1c:	438a      	bics	r2, r1
 8002e1e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d014      	beq.n	8002e52 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e28:	f7fd fb92 	bl	8000550 <HAL_GetTick>
 8002e2c:	0003      	movs	r3, r0
 8002e2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e30:	e009      	b.n	8002e46 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f7fd fb8d 	bl	8000550 <HAL_GetTick>
 8002e36:	0002      	movs	r2, r0
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	4a9b      	ldr	r2, [pc, #620]	@ (80030ac <HAL_RCC_OscConfig+0x62c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e12b      	b.n	800309e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e46:	4b98      	ldr	r3, [pc, #608]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x3b2>
 8002e50:	e013      	b.n	8002e7a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e52:	f7fd fb7d 	bl	8000550 <HAL_GetTick>
 8002e56:	0003      	movs	r3, r0
 8002e58:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e5a:	e009      	b.n	8002e70 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e5c:	f7fd fb78 	bl	8000550 <HAL_GetTick>
 8002e60:	0002      	movs	r2, r0
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	4a91      	ldr	r2, [pc, #580]	@ (80030ac <HAL_RCC_OscConfig+0x62c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e116      	b.n	800309e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e70:	4b8d      	ldr	r3, [pc, #564]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	2202      	movs	r2, #2
 8002e76:	4013      	ands	r3, r2
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e7a:	231f      	movs	r3, #31
 8002e7c:	18fb      	adds	r3, r7, r3
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d105      	bne.n	8002e90 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e84:	4b88      	ldr	r3, [pc, #544]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002e86:	69da      	ldr	r2, [r3, #28]
 8002e88:	4b87      	ldr	r3, [pc, #540]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002e8a:	4989      	ldr	r1, [pc, #548]	@ (80030b0 <HAL_RCC_OscConfig+0x630>)
 8002e8c:	400a      	ands	r2, r1
 8002e8e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2210      	movs	r2, #16
 8002e96:	4013      	ands	r3, r2
 8002e98:	d063      	beq.n	8002f62 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d12a      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ea2:	4b81      	ldr	r3, [pc, #516]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002ea4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ea6:	4b80      	ldr	r3, [pc, #512]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002ea8:	2104      	movs	r1, #4
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002eae:	4b7e      	ldr	r3, [pc, #504]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002eb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002eb2:	4b7d      	ldr	r3, [pc, #500]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eba:	f7fd fb49 	bl	8000550 <HAL_GetTick>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ec4:	f7fd fb44 	bl	8000550 <HAL_GetTick>
 8002ec8:	0002      	movs	r2, r0
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e0e3      	b.n	800309e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002ed6:	4b74      	ldr	r3, [pc, #464]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eda:	2202      	movs	r2, #2
 8002edc:	4013      	ands	r3, r2
 8002ede:	d0f1      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ee0:	4b71      	ldr	r3, [pc, #452]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee4:	22f8      	movs	r2, #248	@ 0xf8
 8002ee6:	4393      	bics	r3, r2
 8002ee8:	0019      	movs	r1, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	00da      	lsls	r2, r3, #3
 8002ef0:	4b6d      	ldr	r3, [pc, #436]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ef6:	e034      	b.n	8002f62 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	3305      	adds	r3, #5
 8002efe:	d111      	bne.n	8002f24 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002f00:	4b69      	ldr	r3, [pc, #420]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002f02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f04:	4b68      	ldr	r3, [pc, #416]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002f06:	2104      	movs	r1, #4
 8002f08:	438a      	bics	r2, r1
 8002f0a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002f0c:	4b66      	ldr	r3, [pc, #408]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f10:	22f8      	movs	r2, #248	@ 0xf8
 8002f12:	4393      	bics	r3, r2
 8002f14:	0019      	movs	r1, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	00da      	lsls	r2, r3, #3
 8002f1c:	4b62      	ldr	r3, [pc, #392]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f22:	e01e      	b.n	8002f62 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002f24:	4b60      	ldr	r3, [pc, #384]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002f26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f28:	4b5f      	ldr	r3, [pc, #380]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002f2a:	2104      	movs	r1, #4
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002f30:	4b5d      	ldr	r3, [pc, #372]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002f32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f34:	4b5c      	ldr	r3, [pc, #368]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002f36:	2101      	movs	r1, #1
 8002f38:	438a      	bics	r2, r1
 8002f3a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3c:	f7fd fb08 	bl	8000550 <HAL_GetTick>
 8002f40:	0003      	movs	r3, r0
 8002f42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002f46:	f7fd fb03 	bl	8000550 <HAL_GetTick>
 8002f4a:	0002      	movs	r2, r0
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e0a2      	b.n	800309e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f58:	4b53      	ldr	r3, [pc, #332]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d1f1      	bne.n	8002f46 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d100      	bne.n	8002f6c <HAL_RCC_OscConfig+0x4ec>
 8002f6a:	e097      	b.n	800309c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f6c:	4b4e      	ldr	r3, [pc, #312]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	220c      	movs	r2, #12
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d100      	bne.n	8002f7a <HAL_RCC_OscConfig+0x4fa>
 8002f78:	e06b      	b.n	8003052 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d14c      	bne.n	800301c <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f82:	4b49      	ldr	r3, [pc, #292]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	4b48      	ldr	r3, [pc, #288]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002f88:	494a      	ldr	r1, [pc, #296]	@ (80030b4 <HAL_RCC_OscConfig+0x634>)
 8002f8a:	400a      	ands	r2, r1
 8002f8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8e:	f7fd fadf 	bl	8000550 <HAL_GetTick>
 8002f92:	0003      	movs	r3, r0
 8002f94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f98:	f7fd fada 	bl	8000550 <HAL_GetTick>
 8002f9c:	0002      	movs	r2, r0
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e079      	b.n	800309e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002faa:	4b3f      	ldr	r3, [pc, #252]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	2380      	movs	r3, #128	@ 0x80
 8002fb0:	049b      	lsls	r3, r3, #18
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb6:	4b3c      	ldr	r3, [pc, #240]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fba:	220f      	movs	r2, #15
 8002fbc:	4393      	bics	r3, r2
 8002fbe:	0019      	movs	r1, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fc4:	4b38      	ldr	r3, [pc, #224]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002fca:	4b37      	ldr	r3, [pc, #220]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4a3a      	ldr	r2, [pc, #232]	@ (80030b8 <HAL_RCC_OscConfig+0x638>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	0019      	movs	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	4b32      	ldr	r3, [pc, #200]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe4:	4b30      	ldr	r3, [pc, #192]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	4b2f      	ldr	r3, [pc, #188]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8002fea:	2180      	movs	r1, #128	@ 0x80
 8002fec:	0449      	lsls	r1, r1, #17
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff2:	f7fd faad 	bl	8000550 <HAL_GetTick>
 8002ff6:	0003      	movs	r3, r0
 8002ff8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ffc:	f7fd faa8 	bl	8000550 <HAL_GetTick>
 8003000:	0002      	movs	r2, r0
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e047      	b.n	800309e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800300e:	4b26      	ldr	r3, [pc, #152]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	2380      	movs	r3, #128	@ 0x80
 8003014:	049b      	lsls	r3, r3, #18
 8003016:	4013      	ands	r3, r2
 8003018:	d0f0      	beq.n	8002ffc <HAL_RCC_OscConfig+0x57c>
 800301a:	e03f      	b.n	800309c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301c:	4b22      	ldr	r3, [pc, #136]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	4b21      	ldr	r3, [pc, #132]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8003022:	4924      	ldr	r1, [pc, #144]	@ (80030b4 <HAL_RCC_OscConfig+0x634>)
 8003024:	400a      	ands	r2, r1
 8003026:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7fd fa92 	bl	8000550 <HAL_GetTick>
 800302c:	0003      	movs	r3, r0
 800302e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003032:	f7fd fa8d 	bl	8000550 <HAL_GetTick>
 8003036:	0002      	movs	r2, r0
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e02c      	b.n	800309e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003044:	4b18      	ldr	r3, [pc, #96]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	2380      	movs	r3, #128	@ 0x80
 800304a:	049b      	lsls	r3, r3, #18
 800304c:	4013      	ands	r3, r2
 800304e:	d1f0      	bne.n	8003032 <HAL_RCC_OscConfig+0x5b2>
 8003050:	e024      	b.n	800309c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e01f      	b.n	800309e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800305e:	4b12      	ldr	r3, [pc, #72]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003064:	4b10      	ldr	r3, [pc, #64]	@ (80030a8 <HAL_RCC_OscConfig+0x628>)
 8003066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003068:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	23c0      	movs	r3, #192	@ 0xc0
 800306e:	025b      	lsls	r3, r3, #9
 8003070:	401a      	ands	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003076:	429a      	cmp	r2, r3
 8003078:	d10e      	bne.n	8003098 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	220f      	movs	r2, #15
 800307e:	401a      	ands	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003084:	429a      	cmp	r2, r3
 8003086:	d107      	bne.n	8003098 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	23f0      	movs	r3, #240	@ 0xf0
 800308c:	039b      	lsls	r3, r3, #14
 800308e:	401a      	ands	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003094:	429a      	cmp	r2, r3
 8003096:	d001      	beq.n	800309c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	0018      	movs	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b008      	add	sp, #32
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	46c0      	nop			@ (mov r8, r8)
 80030a8:	40021000 	.word	0x40021000
 80030ac:	00001388 	.word	0x00001388
 80030b0:	efffffff 	.word	0xefffffff
 80030b4:	feffffff 	.word	0xfeffffff
 80030b8:	ffc27fff 	.word	0xffc27fff

080030bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0b3      	b.n	8003238 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030d0:	4b5b      	ldr	r3, [pc, #364]	@ (8003240 <HAL_RCC_ClockConfig+0x184>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2201      	movs	r2, #1
 80030d6:	4013      	ands	r3, r2
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d911      	bls.n	8003102 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030de:	4b58      	ldr	r3, [pc, #352]	@ (8003240 <HAL_RCC_ClockConfig+0x184>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2201      	movs	r2, #1
 80030e4:	4393      	bics	r3, r2
 80030e6:	0019      	movs	r1, r3
 80030e8:	4b55      	ldr	r3, [pc, #340]	@ (8003240 <HAL_RCC_ClockConfig+0x184>)
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f0:	4b53      	ldr	r3, [pc, #332]	@ (8003240 <HAL_RCC_ClockConfig+0x184>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2201      	movs	r2, #1
 80030f6:	4013      	ands	r3, r2
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d001      	beq.n	8003102 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e09a      	b.n	8003238 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2202      	movs	r2, #2
 8003108:	4013      	ands	r3, r2
 800310a:	d015      	beq.n	8003138 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2204      	movs	r2, #4
 8003112:	4013      	ands	r3, r2
 8003114:	d006      	beq.n	8003124 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003116:	4b4b      	ldr	r3, [pc, #300]	@ (8003244 <HAL_RCC_ClockConfig+0x188>)
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	4b4a      	ldr	r3, [pc, #296]	@ (8003244 <HAL_RCC_ClockConfig+0x188>)
 800311c:	21e0      	movs	r1, #224	@ 0xe0
 800311e:	00c9      	lsls	r1, r1, #3
 8003120:	430a      	orrs	r2, r1
 8003122:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003124:	4b47      	ldr	r3, [pc, #284]	@ (8003244 <HAL_RCC_ClockConfig+0x188>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	22f0      	movs	r2, #240	@ 0xf0
 800312a:	4393      	bics	r3, r2
 800312c:	0019      	movs	r1, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	4b44      	ldr	r3, [pc, #272]	@ (8003244 <HAL_RCC_ClockConfig+0x188>)
 8003134:	430a      	orrs	r2, r1
 8003136:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2201      	movs	r2, #1
 800313e:	4013      	ands	r3, r2
 8003140:	d040      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314a:	4b3e      	ldr	r3, [pc, #248]	@ (8003244 <HAL_RCC_ClockConfig+0x188>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	2380      	movs	r3, #128	@ 0x80
 8003150:	029b      	lsls	r3, r3, #10
 8003152:	4013      	ands	r3, r2
 8003154:	d114      	bne.n	8003180 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e06e      	b.n	8003238 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d107      	bne.n	8003172 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003162:	4b38      	ldr	r3, [pc, #224]	@ (8003244 <HAL_RCC_ClockConfig+0x188>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	2380      	movs	r3, #128	@ 0x80
 8003168:	049b      	lsls	r3, r3, #18
 800316a:	4013      	ands	r3, r2
 800316c:	d108      	bne.n	8003180 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e062      	b.n	8003238 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003172:	4b34      	ldr	r3, [pc, #208]	@ (8003244 <HAL_RCC_ClockConfig+0x188>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2202      	movs	r2, #2
 8003178:	4013      	ands	r3, r2
 800317a:	d101      	bne.n	8003180 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e05b      	b.n	8003238 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003180:	4b30      	ldr	r3, [pc, #192]	@ (8003244 <HAL_RCC_ClockConfig+0x188>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2203      	movs	r2, #3
 8003186:	4393      	bics	r3, r2
 8003188:	0019      	movs	r1, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	4b2d      	ldr	r3, [pc, #180]	@ (8003244 <HAL_RCC_ClockConfig+0x188>)
 8003190:	430a      	orrs	r2, r1
 8003192:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003194:	f7fd f9dc 	bl	8000550 <HAL_GetTick>
 8003198:	0003      	movs	r3, r0
 800319a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319c:	e009      	b.n	80031b2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800319e:	f7fd f9d7 	bl	8000550 <HAL_GetTick>
 80031a2:	0002      	movs	r2, r0
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	4a27      	ldr	r2, [pc, #156]	@ (8003248 <HAL_RCC_ClockConfig+0x18c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e042      	b.n	8003238 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b2:	4b24      	ldr	r3, [pc, #144]	@ (8003244 <HAL_RCC_ClockConfig+0x188>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	220c      	movs	r2, #12
 80031b8:	401a      	ands	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d1ec      	bne.n	800319e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003240 <HAL_RCC_ClockConfig+0x184>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2201      	movs	r2, #1
 80031ca:	4013      	ands	r3, r2
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d211      	bcs.n	80031f6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003240 <HAL_RCC_ClockConfig+0x184>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2201      	movs	r2, #1
 80031d8:	4393      	bics	r3, r2
 80031da:	0019      	movs	r1, r3
 80031dc:	4b18      	ldr	r3, [pc, #96]	@ (8003240 <HAL_RCC_ClockConfig+0x184>)
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e4:	4b16      	ldr	r3, [pc, #88]	@ (8003240 <HAL_RCC_ClockConfig+0x184>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2201      	movs	r2, #1
 80031ea:	4013      	ands	r3, r2
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d001      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e020      	b.n	8003238 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2204      	movs	r2, #4
 80031fc:	4013      	ands	r3, r2
 80031fe:	d009      	beq.n	8003214 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003200:	4b10      	ldr	r3, [pc, #64]	@ (8003244 <HAL_RCC_ClockConfig+0x188>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	4a11      	ldr	r2, [pc, #68]	@ (800324c <HAL_RCC_ClockConfig+0x190>)
 8003206:	4013      	ands	r3, r2
 8003208:	0019      	movs	r1, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	4b0d      	ldr	r3, [pc, #52]	@ (8003244 <HAL_RCC_ClockConfig+0x188>)
 8003210:	430a      	orrs	r2, r1
 8003212:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003214:	f000 f820 	bl	8003258 <HAL_RCC_GetSysClockFreq>
 8003218:	0001      	movs	r1, r0
 800321a:	4b0a      	ldr	r3, [pc, #40]	@ (8003244 <HAL_RCC_ClockConfig+0x188>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	091b      	lsrs	r3, r3, #4
 8003220:	220f      	movs	r2, #15
 8003222:	4013      	ands	r3, r2
 8003224:	4a0a      	ldr	r2, [pc, #40]	@ (8003250 <HAL_RCC_ClockConfig+0x194>)
 8003226:	5cd3      	ldrb	r3, [r2, r3]
 8003228:	000a      	movs	r2, r1
 800322a:	40da      	lsrs	r2, r3
 800322c:	4b09      	ldr	r3, [pc, #36]	@ (8003254 <HAL_RCC_ClockConfig+0x198>)
 800322e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003230:	2003      	movs	r0, #3
 8003232:	f7fd f947 	bl	80004c4 <HAL_InitTick>
  
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	0018      	movs	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	b004      	add	sp, #16
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40022000 	.word	0x40022000
 8003244:	40021000 	.word	0x40021000
 8003248:	00001388 	.word	0x00001388
 800324c:	fffff8ff 	.word	0xfffff8ff
 8003250:	080082cc 	.word	0x080082cc
 8003254:	20000000 	.word	0x20000000

08003258 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	2300      	movs	r3, #0
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	2300      	movs	r3, #0
 800326c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003272:	4b21      	ldr	r3, [pc, #132]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	220c      	movs	r2, #12
 800327c:	4013      	ands	r3, r2
 800327e:	2b04      	cmp	r3, #4
 8003280:	d002      	beq.n	8003288 <HAL_RCC_GetSysClockFreq+0x30>
 8003282:	2b08      	cmp	r3, #8
 8003284:	d003      	beq.n	800328e <HAL_RCC_GetSysClockFreq+0x36>
 8003286:	e02e      	b.n	80032e6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003288:	4b1c      	ldr	r3, [pc, #112]	@ (80032fc <HAL_RCC_GetSysClockFreq+0xa4>)
 800328a:	613b      	str	r3, [r7, #16]
      break;
 800328c:	e02e      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	0c9b      	lsrs	r3, r3, #18
 8003292:	220f      	movs	r2, #15
 8003294:	4013      	ands	r3, r2
 8003296:	4a1a      	ldr	r2, [pc, #104]	@ (8003300 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003298:	5cd3      	ldrb	r3, [r2, r3]
 800329a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800329c:	4b16      	ldr	r3, [pc, #88]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800329e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a0:	220f      	movs	r2, #15
 80032a2:	4013      	ands	r3, r2
 80032a4:	4a17      	ldr	r2, [pc, #92]	@ (8003304 <HAL_RCC_GetSysClockFreq+0xac>)
 80032a6:	5cd3      	ldrb	r3, [r2, r3]
 80032a8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	23c0      	movs	r3, #192	@ 0xc0
 80032ae:	025b      	lsls	r3, r3, #9
 80032b0:	401a      	ands	r2, r3
 80032b2:	2380      	movs	r3, #128	@ 0x80
 80032b4:	025b      	lsls	r3, r3, #9
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d109      	bne.n	80032ce <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032ba:	68b9      	ldr	r1, [r7, #8]
 80032bc:	480f      	ldr	r0, [pc, #60]	@ (80032fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80032be:	f7fc ff23 	bl	8000108 <__udivsi3>
 80032c2:	0003      	movs	r3, r0
 80032c4:	001a      	movs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4353      	muls	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	480a      	ldr	r0, [pc, #40]	@ (80032fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80032d2:	f7fc ff19 	bl	8000108 <__udivsi3>
 80032d6:	0003      	movs	r3, r0
 80032d8:	001a      	movs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4353      	muls	r3, r2
 80032de:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	613b      	str	r3, [r7, #16]
      break;
 80032e4:	e002      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032e6:	4b05      	ldr	r3, [pc, #20]	@ (80032fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80032e8:	613b      	str	r3, [r7, #16]
      break;
 80032ea:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80032ec:	693b      	ldr	r3, [r7, #16]
}
 80032ee:	0018      	movs	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	b006      	add	sp, #24
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	46c0      	nop			@ (mov r8, r8)
 80032f8:	40021000 	.word	0x40021000
 80032fc:	007a1200 	.word	0x007a1200
 8003300:	080082dc 	.word	0x080082dc
 8003304:	080082ec 	.word	0x080082ec

08003308 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	2380      	movs	r3, #128	@ 0x80
 800331e:	025b      	lsls	r3, r3, #9
 8003320:	4013      	ands	r3, r2
 8003322:	d100      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003324:	e08e      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003326:	2017      	movs	r0, #23
 8003328:	183b      	adds	r3, r7, r0
 800332a:	2200      	movs	r2, #0
 800332c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800332e:	4b5f      	ldr	r3, [pc, #380]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003330:	69da      	ldr	r2, [r3, #28]
 8003332:	2380      	movs	r3, #128	@ 0x80
 8003334:	055b      	lsls	r3, r3, #21
 8003336:	4013      	ands	r3, r2
 8003338:	d110      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800333a:	4b5c      	ldr	r3, [pc, #368]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800333c:	69da      	ldr	r2, [r3, #28]
 800333e:	4b5b      	ldr	r3, [pc, #364]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003340:	2180      	movs	r1, #128	@ 0x80
 8003342:	0549      	lsls	r1, r1, #21
 8003344:	430a      	orrs	r2, r1
 8003346:	61da      	str	r2, [r3, #28]
 8003348:	4b58      	ldr	r3, [pc, #352]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800334a:	69da      	ldr	r2, [r3, #28]
 800334c:	2380      	movs	r3, #128	@ 0x80
 800334e:	055b      	lsls	r3, r3, #21
 8003350:	4013      	ands	r3, r2
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003356:	183b      	adds	r3, r7, r0
 8003358:	2201      	movs	r2, #1
 800335a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335c:	4b54      	ldr	r3, [pc, #336]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	2380      	movs	r3, #128	@ 0x80
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	4013      	ands	r3, r2
 8003366:	d11a      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003368:	4b51      	ldr	r3, [pc, #324]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4b50      	ldr	r3, [pc, #320]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800336e:	2180      	movs	r1, #128	@ 0x80
 8003370:	0049      	lsls	r1, r1, #1
 8003372:	430a      	orrs	r2, r1
 8003374:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003376:	f7fd f8eb 	bl	8000550 <HAL_GetTick>
 800337a:	0003      	movs	r3, r0
 800337c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337e:	e008      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003380:	f7fd f8e6 	bl	8000550 <HAL_GetTick>
 8003384:	0002      	movs	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b64      	cmp	r3, #100	@ 0x64
 800338c:	d901      	bls.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e087      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003392:	4b47      	ldr	r3, [pc, #284]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	2380      	movs	r3, #128	@ 0x80
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4013      	ands	r3, r2
 800339c:	d0f0      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800339e:	4b43      	ldr	r3, [pc, #268]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033a0:	6a1a      	ldr	r2, [r3, #32]
 80033a2:	23c0      	movs	r3, #192	@ 0xc0
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4013      	ands	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d034      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	23c0      	movs	r3, #192	@ 0xc0
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4013      	ands	r3, r2
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d02c      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033c0:	4b3a      	ldr	r3, [pc, #232]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	4a3b      	ldr	r2, [pc, #236]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033ca:	4b38      	ldr	r3, [pc, #224]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033cc:	6a1a      	ldr	r2, [r3, #32]
 80033ce:	4b37      	ldr	r3, [pc, #220]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033d0:	2180      	movs	r1, #128	@ 0x80
 80033d2:	0249      	lsls	r1, r1, #9
 80033d4:	430a      	orrs	r2, r1
 80033d6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033d8:	4b34      	ldr	r3, [pc, #208]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033da:	6a1a      	ldr	r2, [r3, #32]
 80033dc:	4b33      	ldr	r3, [pc, #204]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033de:	4936      	ldr	r1, [pc, #216]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80033e0:	400a      	ands	r2, r1
 80033e2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033e4:	4b31      	ldr	r3, [pc, #196]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	4013      	ands	r3, r2
 80033f0:	d013      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f2:	f7fd f8ad 	bl	8000550 <HAL_GetTick>
 80033f6:	0003      	movs	r3, r0
 80033f8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fa:	e009      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fc:	f7fd f8a8 	bl	8000550 <HAL_GetTick>
 8003400:	0002      	movs	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	4a2d      	ldr	r2, [pc, #180]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d901      	bls.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e048      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003410:	4b26      	ldr	r3, [pc, #152]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	2202      	movs	r2, #2
 8003416:	4013      	ands	r3, r2
 8003418:	d0f0      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800341a:	4b24      	ldr	r3, [pc, #144]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	4a25      	ldr	r2, [pc, #148]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003420:	4013      	ands	r3, r2
 8003422:	0019      	movs	r1, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	4b20      	ldr	r3, [pc, #128]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800342a:	430a      	orrs	r2, r1
 800342c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800342e:	2317      	movs	r3, #23
 8003430:	18fb      	adds	r3, r7, r3
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d105      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003438:	4b1c      	ldr	r3, [pc, #112]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800343a:	69da      	ldr	r2, [r3, #28]
 800343c:	4b1b      	ldr	r3, [pc, #108]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800343e:	4920      	ldr	r1, [pc, #128]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003440:	400a      	ands	r2, r1
 8003442:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2201      	movs	r2, #1
 800344a:	4013      	ands	r3, r2
 800344c:	d009      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800344e:	4b17      	ldr	r3, [pc, #92]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003452:	2203      	movs	r2, #3
 8003454:	4393      	bics	r3, r2
 8003456:	0019      	movs	r1, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	4b13      	ldr	r3, [pc, #76]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800345e:	430a      	orrs	r2, r1
 8003460:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2220      	movs	r2, #32
 8003468:	4013      	ands	r3, r2
 800346a:	d009      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800346c:	4b0f      	ldr	r3, [pc, #60]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800346e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003470:	2210      	movs	r2, #16
 8003472:	4393      	bics	r3, r2
 8003474:	0019      	movs	r1, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	4b0c      	ldr	r3, [pc, #48]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800347c:	430a      	orrs	r2, r1
 800347e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	2380      	movs	r3, #128	@ 0x80
 8003486:	029b      	lsls	r3, r3, #10
 8003488:	4013      	ands	r3, r2
 800348a:	d009      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800348c:	4b07      	ldr	r3, [pc, #28]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800348e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003490:	2280      	movs	r2, #128	@ 0x80
 8003492:	4393      	bics	r3, r2
 8003494:	0019      	movs	r1, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	4b04      	ldr	r3, [pc, #16]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800349c:	430a      	orrs	r2, r1
 800349e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	0018      	movs	r0, r3
 80034a4:	46bd      	mov	sp, r7
 80034a6:	b006      	add	sp, #24
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	46c0      	nop			@ (mov r8, r8)
 80034ac:	40021000 	.word	0x40021000
 80034b0:	40007000 	.word	0x40007000
 80034b4:	fffffcff 	.word	0xfffffcff
 80034b8:	fffeffff 	.word	0xfffeffff
 80034bc:	00001388 	.word	0x00001388
 80034c0:	efffffff 	.word	0xefffffff

080034c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2244      	movs	r2, #68	@ 0x44
 80034d0:	2100      	movs	r1, #0
 80034d2:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80034d4:	4b05      	ldr	r3, [pc, #20]	@ (80034ec <USB_EnableGlobalInt+0x28>)
 80034d6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	b299      	uxth	r1, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2240      	movs	r2, #64	@ 0x40
 80034e0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	0018      	movs	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b004      	add	sp, #16
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	0000bf80 	.word	0x0000bf80

080034f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80034f8:	4b09      	ldr	r3, [pc, #36]	@ (8003520 <USB_DisableGlobalInt+0x30>)
 80034fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2240      	movs	r2, #64	@ 0x40
 8003500:	5a9b      	ldrh	r3, [r3, r2]
 8003502:	b29b      	uxth	r3, r3
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	b292      	uxth	r2, r2
 8003508:	43d2      	mvns	r2, r2
 800350a:	b292      	uxth	r2, r2
 800350c:	4013      	ands	r3, r2
 800350e:	b299      	uxth	r1, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2240      	movs	r2, #64	@ 0x40
 8003514:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	0018      	movs	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	b004      	add	sp, #16
 800351e:	bd80      	pop	{r7, pc}
 8003520:	0000bf80 	.word	0x0000bf80

08003524 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	1d3b      	adds	r3, r7, #4
 800352e:	6019      	str	r1, [r3, #0]
 8003530:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2240      	movs	r2, #64	@ 0x40
 8003536:	2101      	movs	r1, #1
 8003538:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2240      	movs	r2, #64	@ 0x40
 800353e:	2100      	movs	r1, #0
 8003540:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2244      	movs	r2, #68	@ 0x44
 8003546:	2100      	movs	r1, #0
 8003548:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2250      	movs	r2, #80	@ 0x50
 800354e:	2100      	movs	r1, #0
 8003550:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	0018      	movs	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	b004      	add	sp, #16
 800355a:	bd80      	pop	{r7, pc}

0800355c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b09c      	sub	sp, #112	@ 0x70
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003566:	236f      	movs	r3, #111	@ 0x6f
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	2200      	movs	r2, #0
 800356c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	18d3      	adds	r3, r2, r3
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	b29a      	uxth	r2, r3
 800357c:	236c      	movs	r3, #108	@ 0x6c
 800357e:	18fb      	adds	r3, r7, r3
 8003580:	49a1      	ldr	r1, [pc, #644]	@ (8003808 <USB_ActivateEndpoint+0x2ac>)
 8003582:	400a      	ands	r2, r1
 8003584:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	78db      	ldrb	r3, [r3, #3]
 800358a:	2b03      	cmp	r3, #3
 800358c:	d017      	beq.n	80035be <USB_ActivateEndpoint+0x62>
 800358e:	dc28      	bgt.n	80035e2 <USB_ActivateEndpoint+0x86>
 8003590:	2b02      	cmp	r3, #2
 8003592:	d00e      	beq.n	80035b2 <USB_ActivateEndpoint+0x56>
 8003594:	dc25      	bgt.n	80035e2 <USB_ActivateEndpoint+0x86>
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <USB_ActivateEndpoint+0x44>
 800359a:	2b01      	cmp	r3, #1
 800359c:	d018      	beq.n	80035d0 <USB_ActivateEndpoint+0x74>
 800359e:	e020      	b.n	80035e2 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80035a0:	226c      	movs	r2, #108	@ 0x6c
 80035a2:	18bb      	adds	r3, r7, r2
 80035a4:	18ba      	adds	r2, r7, r2
 80035a6:	8812      	ldrh	r2, [r2, #0]
 80035a8:	2180      	movs	r1, #128	@ 0x80
 80035aa:	0089      	lsls	r1, r1, #2
 80035ac:	430a      	orrs	r2, r1
 80035ae:	801a      	strh	r2, [r3, #0]
      break;
 80035b0:	e01c      	b.n	80035ec <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80035b2:	226c      	movs	r2, #108	@ 0x6c
 80035b4:	18bb      	adds	r3, r7, r2
 80035b6:	18ba      	adds	r2, r7, r2
 80035b8:	8812      	ldrh	r2, [r2, #0]
 80035ba:	801a      	strh	r2, [r3, #0]
      break;
 80035bc:	e016      	b.n	80035ec <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80035be:	226c      	movs	r2, #108	@ 0x6c
 80035c0:	18bb      	adds	r3, r7, r2
 80035c2:	18ba      	adds	r2, r7, r2
 80035c4:	8812      	ldrh	r2, [r2, #0]
 80035c6:	21c0      	movs	r1, #192	@ 0xc0
 80035c8:	00c9      	lsls	r1, r1, #3
 80035ca:	430a      	orrs	r2, r1
 80035cc:	801a      	strh	r2, [r3, #0]
      break;
 80035ce:	e00d      	b.n	80035ec <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80035d0:	226c      	movs	r2, #108	@ 0x6c
 80035d2:	18bb      	adds	r3, r7, r2
 80035d4:	18ba      	adds	r2, r7, r2
 80035d6:	8812      	ldrh	r2, [r2, #0]
 80035d8:	2180      	movs	r1, #128	@ 0x80
 80035da:	00c9      	lsls	r1, r1, #3
 80035dc:	430a      	orrs	r2, r1
 80035de:	801a      	strh	r2, [r3, #0]
      break;
 80035e0:	e004      	b.n	80035ec <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80035e2:	236f      	movs	r3, #111	@ 0x6f
 80035e4:	18fb      	adds	r3, r7, r3
 80035e6:	2201      	movs	r2, #1
 80035e8:	701a      	strb	r2, [r3, #0]
      break;
 80035ea:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	18d3      	adds	r3, r2, r3
 80035f6:	226c      	movs	r2, #108	@ 0x6c
 80035f8:	18ba      	adds	r2, r7, r2
 80035fa:	8812      	ldrh	r2, [r2, #0]
 80035fc:	4983      	ldr	r1, [pc, #524]	@ (800380c <USB_ActivateEndpoint+0x2b0>)
 80035fe:	430a      	orrs	r2, r1
 8003600:	b292      	uxth	r2, r2
 8003602:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	18d3      	adds	r3, r2, r3
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	b29b      	uxth	r3, r3
 8003612:	b21b      	sxth	r3, r3
 8003614:	4a7e      	ldr	r2, [pc, #504]	@ (8003810 <USB_ActivateEndpoint+0x2b4>)
 8003616:	4013      	ands	r3, r2
 8003618:	b21a      	sxth	r2, r3
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	b21b      	sxth	r3, r3
 8003620:	4313      	orrs	r3, r2
 8003622:	b21a      	sxth	r2, r3
 8003624:	2166      	movs	r1, #102	@ 0x66
 8003626:	187b      	adds	r3, r7, r1
 8003628:	801a      	strh	r2, [r3, #0]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	18d3      	adds	r3, r2, r3
 8003634:	187a      	adds	r2, r7, r1
 8003636:	8812      	ldrh	r2, [r2, #0]
 8003638:	4974      	ldr	r1, [pc, #464]	@ (800380c <USB_ActivateEndpoint+0x2b0>)
 800363a:	430a      	orrs	r2, r1
 800363c:	b292      	uxth	r2, r2
 800363e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	7b1b      	ldrb	r3, [r3, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d000      	beq.n	800364a <USB_ActivateEndpoint+0xee>
 8003648:	e177      	b.n	800393a <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	785b      	ldrb	r3, [r3, #1]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d100      	bne.n	8003654 <USB_ActivateEndpoint+0xf8>
 8003652:	e07a      	b.n	800374a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	61bb      	str	r3, [r7, #24]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2250      	movs	r2, #80	@ 0x50
 800365c:	5a9b      	ldrh	r3, [r3, r2]
 800365e:	b29b      	uxth	r3, r3
 8003660:	001a      	movs	r2, r3
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	189b      	adds	r3, r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	00da      	lsls	r2, r3, #3
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	18d3      	adds	r3, r2, r3
 8003672:	2280      	movs	r2, #128	@ 0x80
 8003674:	00d2      	lsls	r2, r2, #3
 8003676:	4694      	mov	ip, r2
 8003678:	4463      	add	r3, ip
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	88db      	ldrh	r3, [r3, #6]
 8003680:	085b      	lsrs	r3, r3, #1
 8003682:	b29b      	uxth	r3, r3
 8003684:	18db      	adds	r3, r3, r3
 8003686:	b29a      	uxth	r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	18d2      	adds	r2, r2, r3
 8003696:	2112      	movs	r1, #18
 8003698:	187b      	adds	r3, r7, r1
 800369a:	8812      	ldrh	r2, [r2, #0]
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	187b      	adds	r3, r7, r1
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	2240      	movs	r2, #64	@ 0x40
 80036a4:	4013      	ands	r3, r2
 80036a6:	d016      	beq.n	80036d6 <USB_ActivateEndpoint+0x17a>
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	18d3      	adds	r3, r2, r3
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	2010      	movs	r0, #16
 80036b8:	183b      	adds	r3, r7, r0
 80036ba:	4955      	ldr	r1, [pc, #340]	@ (8003810 <USB_ActivateEndpoint+0x2b4>)
 80036bc:	400a      	ands	r2, r1
 80036be:	801a      	strh	r2, [r3, #0]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	18d3      	adds	r3, r2, r3
 80036ca:	183a      	adds	r2, r7, r0
 80036cc:	8812      	ldrh	r2, [r2, #0]
 80036ce:	4951      	ldr	r1, [pc, #324]	@ (8003814 <USB_ActivateEndpoint+0x2b8>)
 80036d0:	430a      	orrs	r2, r1
 80036d2:	b292      	uxth	r2, r2
 80036d4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	78db      	ldrb	r3, [r3, #3]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d01d      	beq.n	800371a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	18d3      	adds	r3, r2, r3
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	200c      	movs	r0, #12
 80036ee:	183b      	adds	r3, r7, r0
 80036f0:	4949      	ldr	r1, [pc, #292]	@ (8003818 <USB_ActivateEndpoint+0x2bc>)
 80036f2:	400a      	ands	r2, r1
 80036f4:	801a      	strh	r2, [r3, #0]
 80036f6:	183b      	adds	r3, r7, r0
 80036f8:	183a      	adds	r2, r7, r0
 80036fa:	8812      	ldrh	r2, [r2, #0]
 80036fc:	2120      	movs	r1, #32
 80036fe:	404a      	eors	r2, r1
 8003700:	801a      	strh	r2, [r3, #0]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	18d3      	adds	r3, r2, r3
 800370c:	183a      	adds	r2, r7, r0
 800370e:	8812      	ldrh	r2, [r2, #0]
 8003710:	493e      	ldr	r1, [pc, #248]	@ (800380c <USB_ActivateEndpoint+0x2b0>)
 8003712:	430a      	orrs	r2, r1
 8003714:	b292      	uxth	r2, r2
 8003716:	801a      	strh	r2, [r3, #0]
 8003718:	e2b5      	b.n	8003c86 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	b29a      	uxth	r2, r3
 8003728:	200e      	movs	r0, #14
 800372a:	183b      	adds	r3, r7, r0
 800372c:	493a      	ldr	r1, [pc, #232]	@ (8003818 <USB_ActivateEndpoint+0x2bc>)
 800372e:	400a      	ands	r2, r1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	18d3      	adds	r3, r2, r3
 800373c:	183a      	adds	r2, r7, r0
 800373e:	8812      	ldrh	r2, [r2, #0]
 8003740:	4932      	ldr	r1, [pc, #200]	@ (800380c <USB_ActivateEndpoint+0x2b0>)
 8003742:	430a      	orrs	r2, r1
 8003744:	b292      	uxth	r2, r2
 8003746:	801a      	strh	r2, [r3, #0]
 8003748:	e29d      	b.n	8003c86 <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	633b      	str	r3, [r7, #48]	@ 0x30
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2250      	movs	r2, #80	@ 0x50
 8003752:	5a9b      	ldrh	r3, [r3, r2]
 8003754:	b29b      	uxth	r3, r3
 8003756:	001a      	movs	r2, r3
 8003758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375a:	189b      	adds	r3, r3, r2
 800375c:	633b      	str	r3, [r7, #48]	@ 0x30
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	00da      	lsls	r2, r3, #3
 8003764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003766:	18d3      	adds	r3, r2, r3
 8003768:	4a2c      	ldr	r2, [pc, #176]	@ (800381c <USB_ActivateEndpoint+0x2c0>)
 800376a:	4694      	mov	ip, r2
 800376c:	4463      	add	r3, ip
 800376e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	88db      	ldrh	r3, [r3, #6]
 8003774:	085b      	lsrs	r3, r3, #1
 8003776:	b29b      	uxth	r3, r3
 8003778:	18db      	adds	r3, r3, r3
 800377a:	b29a      	uxth	r2, r3
 800377c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2250      	movs	r2, #80	@ 0x50
 8003788:	5a9b      	ldrh	r3, [r3, r2]
 800378a:	b29b      	uxth	r3, r3
 800378c:	001a      	movs	r2, r3
 800378e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003790:	189b      	adds	r3, r3, r2
 8003792:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	00da      	lsls	r2, r3, #3
 800379a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379c:	18d3      	adds	r3, r2, r3
 800379e:	4a20      	ldr	r2, [pc, #128]	@ (8003820 <USB_ActivateEndpoint+0x2c4>)
 80037a0:	4694      	mov	ip, r2
 80037a2:	4463      	add	r3, ip
 80037a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	059b      	lsls	r3, r3, #22
 80037ae:	0d9b      	lsrs	r3, r3, #22
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b4:	801a      	strh	r2, [r3, #0]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d108      	bne.n	80037d0 <USB_ActivateEndpoint+0x274>
 80037be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	4a17      	ldr	r2, [pc, #92]	@ (8003824 <USB_ActivateEndpoint+0x2c8>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037cc:	801a      	strh	r2, [r3, #0]
 80037ce:	e045      	b.n	800385c <USB_ActivateEndpoint+0x300>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80037d6:	d827      	bhi.n	8003828 <USB_ActivateEndpoint+0x2cc>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	085b      	lsrs	r3, r3, #1
 80037de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	2201      	movs	r2, #1
 80037e6:	4013      	ands	r3, r2
 80037e8:	d002      	beq.n	80037f0 <USB_ActivateEndpoint+0x294>
 80037ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037ec:	3301      	adds	r3, #1
 80037ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	029b      	lsls	r3, r3, #10
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	4313      	orrs	r3, r2
 8003800:	b29a      	uxth	r2, r3
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	801a      	strh	r2, [r3, #0]
 8003806:	e029      	b.n	800385c <USB_ActivateEndpoint+0x300>
 8003808:	ffff898f 	.word	0xffff898f
 800380c:	ffff8080 	.word	0xffff8080
 8003810:	ffff8f8f 	.word	0xffff8f8f
 8003814:	ffff80c0 	.word	0xffff80c0
 8003818:	ffff8fbf 	.word	0xffff8fbf
 800381c:	00000404 	.word	0x00000404
 8003820:	00000406 	.word	0x00000406
 8003824:	ffff8000 	.word	0xffff8000
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	221f      	movs	r2, #31
 8003836:	4013      	ands	r3, r2
 8003838:	d102      	bne.n	8003840 <USB_ActivateEndpoint+0x2e4>
 800383a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800383c:	3b01      	subs	r3, #1
 800383e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	b29a      	uxth	r2, r3
 8003846:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003848:	b29b      	uxth	r3, r3
 800384a:	029b      	lsls	r3, r3, #10
 800384c:	b29b      	uxth	r3, r3
 800384e:	4313      	orrs	r3, r2
 8003850:	b29b      	uxth	r3, r3
 8003852:	4ab5      	ldr	r2, [pc, #724]	@ (8003b28 <USB_ActivateEndpoint+0x5cc>)
 8003854:	4313      	orrs	r3, r2
 8003856:	b29a      	uxth	r2, r3
 8003858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	18d2      	adds	r2, r2, r3
 8003866:	2122      	movs	r1, #34	@ 0x22
 8003868:	187b      	adds	r3, r7, r1
 800386a:	8812      	ldrh	r2, [r2, #0]
 800386c:	801a      	strh	r2, [r3, #0]
 800386e:	187b      	adds	r3, r7, r1
 8003870:	881a      	ldrh	r2, [r3, #0]
 8003872:	2380      	movs	r3, #128	@ 0x80
 8003874:	01db      	lsls	r3, r3, #7
 8003876:	4013      	ands	r3, r2
 8003878:	d016      	beq.n	80038a8 <USB_ActivateEndpoint+0x34c>
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	18d3      	adds	r3, r2, r3
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	b29a      	uxth	r2, r3
 8003888:	2020      	movs	r0, #32
 800388a:	183b      	adds	r3, r7, r0
 800388c:	49a7      	ldr	r1, [pc, #668]	@ (8003b2c <USB_ActivateEndpoint+0x5d0>)
 800388e:	400a      	ands	r2, r1
 8003890:	801a      	strh	r2, [r3, #0]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	18d3      	adds	r3, r2, r3
 800389c:	183a      	adds	r2, r7, r0
 800389e:	8812      	ldrh	r2, [r2, #0]
 80038a0:	49a3      	ldr	r1, [pc, #652]	@ (8003b30 <USB_ActivateEndpoint+0x5d4>)
 80038a2:	430a      	orrs	r2, r1
 80038a4:	b292      	uxth	r2, r2
 80038a6:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d125      	bne.n	80038fc <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	18d3      	adds	r3, r2, r3
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	b29a      	uxth	r2, r3
 80038be:	201c      	movs	r0, #28
 80038c0:	183b      	adds	r3, r7, r0
 80038c2:	499c      	ldr	r1, [pc, #624]	@ (8003b34 <USB_ActivateEndpoint+0x5d8>)
 80038c4:	400a      	ands	r2, r1
 80038c6:	801a      	strh	r2, [r3, #0]
 80038c8:	183b      	adds	r3, r7, r0
 80038ca:	183a      	adds	r2, r7, r0
 80038cc:	8812      	ldrh	r2, [r2, #0]
 80038ce:	2180      	movs	r1, #128	@ 0x80
 80038d0:	0149      	lsls	r1, r1, #5
 80038d2:	404a      	eors	r2, r1
 80038d4:	801a      	strh	r2, [r3, #0]
 80038d6:	183b      	adds	r3, r7, r0
 80038d8:	183a      	adds	r2, r7, r0
 80038da:	8812      	ldrh	r2, [r2, #0]
 80038dc:	2180      	movs	r1, #128	@ 0x80
 80038de:	0189      	lsls	r1, r1, #6
 80038e0:	404a      	eors	r2, r1
 80038e2:	801a      	strh	r2, [r3, #0]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	18d3      	adds	r3, r2, r3
 80038ee:	183a      	adds	r2, r7, r0
 80038f0:	8812      	ldrh	r2, [r2, #0]
 80038f2:	4991      	ldr	r1, [pc, #580]	@ (8003b38 <USB_ActivateEndpoint+0x5dc>)
 80038f4:	430a      	orrs	r2, r1
 80038f6:	b292      	uxth	r2, r2
 80038f8:	801a      	strh	r2, [r3, #0]
 80038fa:	e1c4      	b.n	8003c86 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	18d3      	adds	r3, r2, r3
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	b29a      	uxth	r2, r3
 800390a:	201e      	movs	r0, #30
 800390c:	183b      	adds	r3, r7, r0
 800390e:	4989      	ldr	r1, [pc, #548]	@ (8003b34 <USB_ActivateEndpoint+0x5d8>)
 8003910:	400a      	ands	r2, r1
 8003912:	801a      	strh	r2, [r3, #0]
 8003914:	183b      	adds	r3, r7, r0
 8003916:	183a      	adds	r2, r7, r0
 8003918:	8812      	ldrh	r2, [r2, #0]
 800391a:	2180      	movs	r1, #128	@ 0x80
 800391c:	0189      	lsls	r1, r1, #6
 800391e:	404a      	eors	r2, r1
 8003920:	801a      	strh	r2, [r3, #0]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	18d3      	adds	r3, r2, r3
 800392c:	183a      	adds	r2, r7, r0
 800392e:	8812      	ldrh	r2, [r2, #0]
 8003930:	4981      	ldr	r1, [pc, #516]	@ (8003b38 <USB_ActivateEndpoint+0x5dc>)
 8003932:	430a      	orrs	r2, r1
 8003934:	b292      	uxth	r2, r2
 8003936:	801a      	strh	r2, [r3, #0]
 8003938:	e1a5      	b.n	8003c86 <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	78db      	ldrb	r3, [r3, #3]
 800393e:	2b02      	cmp	r3, #2
 8003940:	d117      	bne.n	8003972 <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	18d3      	adds	r3, r2, r3
 800394c:	881b      	ldrh	r3, [r3, #0]
 800394e:	b29a      	uxth	r2, r3
 8003950:	2062      	movs	r0, #98	@ 0x62
 8003952:	183b      	adds	r3, r7, r0
 8003954:	4975      	ldr	r1, [pc, #468]	@ (8003b2c <USB_ActivateEndpoint+0x5d0>)
 8003956:	400a      	ands	r2, r1
 8003958:	801a      	strh	r2, [r3, #0]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	18d3      	adds	r3, r2, r3
 8003964:	183a      	adds	r2, r7, r0
 8003966:	8812      	ldrh	r2, [r2, #0]
 8003968:	4974      	ldr	r1, [pc, #464]	@ (8003b3c <USB_ActivateEndpoint+0x5e0>)
 800396a:	430a      	orrs	r2, r1
 800396c:	b292      	uxth	r2, r2
 800396e:	801a      	strh	r2, [r3, #0]
 8003970:	e016      	b.n	80039a0 <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	18d3      	adds	r3, r2, r3
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	b29a      	uxth	r2, r3
 8003980:	2064      	movs	r0, #100	@ 0x64
 8003982:	183b      	adds	r3, r7, r0
 8003984:	496e      	ldr	r1, [pc, #440]	@ (8003b40 <USB_ActivateEndpoint+0x5e4>)
 8003986:	400a      	ands	r2, r1
 8003988:	801a      	strh	r2, [r3, #0]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	18d3      	adds	r3, r2, r3
 8003994:	183a      	adds	r2, r7, r0
 8003996:	8812      	ldrh	r2, [r2, #0]
 8003998:	4967      	ldr	r1, [pc, #412]	@ (8003b38 <USB_ActivateEndpoint+0x5dc>)
 800399a:	430a      	orrs	r2, r1
 800399c:	b292      	uxth	r2, r2
 800399e:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2250      	movs	r2, #80	@ 0x50
 80039a8:	5a9b      	ldrh	r3, [r3, r2]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	001a      	movs	r2, r3
 80039ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039b0:	189b      	adds	r3, r3, r2
 80039b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	00da      	lsls	r2, r3, #3
 80039ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039bc:	18d3      	adds	r3, r2, r3
 80039be:	2280      	movs	r2, #128	@ 0x80
 80039c0:	00d2      	lsls	r2, r2, #3
 80039c2:	4694      	mov	ip, r2
 80039c4:	4463      	add	r3, ip
 80039c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	891b      	ldrh	r3, [r3, #8]
 80039cc:	085b      	lsrs	r3, r3, #1
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	18db      	adds	r3, r3, r3
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039d6:	801a      	strh	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	657b      	str	r3, [r7, #84]	@ 0x54
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2250      	movs	r2, #80	@ 0x50
 80039e0:	5a9b      	ldrh	r3, [r3, r2]
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	001a      	movs	r2, r3
 80039e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e8:	189b      	adds	r3, r3, r2
 80039ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	00da      	lsls	r2, r3, #3
 80039f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039f4:	18d3      	adds	r3, r2, r3
 80039f6:	4a53      	ldr	r2, [pc, #332]	@ (8003b44 <USB_ActivateEndpoint+0x5e8>)
 80039f8:	4694      	mov	ip, r2
 80039fa:	4463      	add	r3, ip
 80039fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	895b      	ldrh	r3, [r3, #10]
 8003a02:	085b      	lsrs	r3, r3, #1
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	18db      	adds	r3, r3, r3
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a0c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	785b      	ldrb	r3, [r3, #1]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d000      	beq.n	8003a18 <USB_ActivateEndpoint+0x4bc>
 8003a16:	e09b      	b.n	8003b50 <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	18d2      	adds	r2, r2, r3
 8003a22:	2140      	movs	r1, #64	@ 0x40
 8003a24:	187b      	adds	r3, r7, r1
 8003a26:	8812      	ldrh	r2, [r2, #0]
 8003a28:	801a      	strh	r2, [r3, #0]
 8003a2a:	187b      	adds	r3, r7, r1
 8003a2c:	881a      	ldrh	r2, [r3, #0]
 8003a2e:	2380      	movs	r3, #128	@ 0x80
 8003a30:	01db      	lsls	r3, r3, #7
 8003a32:	4013      	ands	r3, r2
 8003a34:	d016      	beq.n	8003a64 <USB_ActivateEndpoint+0x508>
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	18d3      	adds	r3, r2, r3
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	203e      	movs	r0, #62	@ 0x3e
 8003a46:	183b      	adds	r3, r7, r0
 8003a48:	4938      	ldr	r1, [pc, #224]	@ (8003b2c <USB_ActivateEndpoint+0x5d0>)
 8003a4a:	400a      	ands	r2, r1
 8003a4c:	801a      	strh	r2, [r3, #0]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	18d3      	adds	r3, r2, r3
 8003a58:	183a      	adds	r2, r7, r0
 8003a5a:	8812      	ldrh	r2, [r2, #0]
 8003a5c:	4934      	ldr	r1, [pc, #208]	@ (8003b30 <USB_ActivateEndpoint+0x5d4>)
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	b292      	uxth	r2, r2
 8003a62:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	18d2      	adds	r2, r2, r3
 8003a6e:	213c      	movs	r1, #60	@ 0x3c
 8003a70:	187b      	adds	r3, r7, r1
 8003a72:	8812      	ldrh	r2, [r2, #0]
 8003a74:	801a      	strh	r2, [r3, #0]
 8003a76:	187b      	adds	r3, r7, r1
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	2240      	movs	r2, #64	@ 0x40
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d016      	beq.n	8003aae <USB_ActivateEndpoint+0x552>
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	18d3      	adds	r3, r2, r3
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	203a      	movs	r0, #58	@ 0x3a
 8003a90:	183b      	adds	r3, r7, r0
 8003a92:	4926      	ldr	r1, [pc, #152]	@ (8003b2c <USB_ActivateEndpoint+0x5d0>)
 8003a94:	400a      	ands	r2, r1
 8003a96:	801a      	strh	r2, [r3, #0]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	18d3      	adds	r3, r2, r3
 8003aa2:	183a      	adds	r2, r7, r0
 8003aa4:	8812      	ldrh	r2, [r2, #0]
 8003aa6:	4928      	ldr	r1, [pc, #160]	@ (8003b48 <USB_ActivateEndpoint+0x5ec>)
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	b292      	uxth	r2, r2
 8003aac:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	18d3      	adds	r3, r2, r3
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	2038      	movs	r0, #56	@ 0x38
 8003abe:	183b      	adds	r3, r7, r0
 8003ac0:	491c      	ldr	r1, [pc, #112]	@ (8003b34 <USB_ActivateEndpoint+0x5d8>)
 8003ac2:	400a      	ands	r2, r1
 8003ac4:	801a      	strh	r2, [r3, #0]
 8003ac6:	183b      	adds	r3, r7, r0
 8003ac8:	183a      	adds	r2, r7, r0
 8003aca:	8812      	ldrh	r2, [r2, #0]
 8003acc:	2180      	movs	r1, #128	@ 0x80
 8003ace:	0149      	lsls	r1, r1, #5
 8003ad0:	404a      	eors	r2, r1
 8003ad2:	801a      	strh	r2, [r3, #0]
 8003ad4:	183b      	adds	r3, r7, r0
 8003ad6:	183a      	adds	r2, r7, r0
 8003ad8:	8812      	ldrh	r2, [r2, #0]
 8003ada:	2180      	movs	r1, #128	@ 0x80
 8003adc:	0189      	lsls	r1, r1, #6
 8003ade:	404a      	eors	r2, r1
 8003ae0:	801a      	strh	r2, [r3, #0]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	18d3      	adds	r3, r2, r3
 8003aec:	183a      	adds	r2, r7, r0
 8003aee:	8812      	ldrh	r2, [r2, #0]
 8003af0:	4911      	ldr	r1, [pc, #68]	@ (8003b38 <USB_ActivateEndpoint+0x5dc>)
 8003af2:	430a      	orrs	r2, r1
 8003af4:	b292      	uxth	r2, r2
 8003af6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	18d3      	adds	r3, r2, r3
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	2036      	movs	r0, #54	@ 0x36
 8003b08:	183b      	adds	r3, r7, r0
 8003b0a:	4910      	ldr	r1, [pc, #64]	@ (8003b4c <USB_ActivateEndpoint+0x5f0>)
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	801a      	strh	r2, [r3, #0]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	18d3      	adds	r3, r2, r3
 8003b1a:	183a      	adds	r2, r7, r0
 8003b1c:	8812      	ldrh	r2, [r2, #0]
 8003b1e:	4906      	ldr	r1, [pc, #24]	@ (8003b38 <USB_ActivateEndpoint+0x5dc>)
 8003b20:	430a      	orrs	r2, r1
 8003b22:	b292      	uxth	r2, r2
 8003b24:	801a      	strh	r2, [r3, #0]
 8003b26:	e0ae      	b.n	8003c86 <USB_ActivateEndpoint+0x72a>
 8003b28:	ffff8000 	.word	0xffff8000
 8003b2c:	ffff8f8f 	.word	0xffff8f8f
 8003b30:	ffffc080 	.word	0xffffc080
 8003b34:	ffffbf8f 	.word	0xffffbf8f
 8003b38:	ffff8080 	.word	0xffff8080
 8003b3c:	ffff8180 	.word	0xffff8180
 8003b40:	ffff8e8f 	.word	0xffff8e8f
 8003b44:	00000404 	.word	0x00000404
 8003b48:	ffff80c0 	.word	0xffff80c0
 8003b4c:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	18d2      	adds	r2, r2, r3
 8003b5a:	214e      	movs	r1, #78	@ 0x4e
 8003b5c:	187b      	adds	r3, r7, r1
 8003b5e:	8812      	ldrh	r2, [r2, #0]
 8003b60:	801a      	strh	r2, [r3, #0]
 8003b62:	187b      	adds	r3, r7, r1
 8003b64:	881a      	ldrh	r2, [r3, #0]
 8003b66:	2380      	movs	r3, #128	@ 0x80
 8003b68:	01db      	lsls	r3, r3, #7
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d016      	beq.n	8003b9c <USB_ActivateEndpoint+0x640>
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	18d3      	adds	r3, r2, r3
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	204c      	movs	r0, #76	@ 0x4c
 8003b7e:	183b      	adds	r3, r7, r0
 8003b80:	4944      	ldr	r1, [pc, #272]	@ (8003c94 <USB_ActivateEndpoint+0x738>)
 8003b82:	400a      	ands	r2, r1
 8003b84:	801a      	strh	r2, [r3, #0]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	18d3      	adds	r3, r2, r3
 8003b90:	183a      	adds	r2, r7, r0
 8003b92:	8812      	ldrh	r2, [r2, #0]
 8003b94:	4940      	ldr	r1, [pc, #256]	@ (8003c98 <USB_ActivateEndpoint+0x73c>)
 8003b96:	430a      	orrs	r2, r1
 8003b98:	b292      	uxth	r2, r2
 8003b9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	18d2      	adds	r2, r2, r3
 8003ba6:	214a      	movs	r1, #74	@ 0x4a
 8003ba8:	187b      	adds	r3, r7, r1
 8003baa:	8812      	ldrh	r2, [r2, #0]
 8003bac:	801a      	strh	r2, [r3, #0]
 8003bae:	187b      	adds	r3, r7, r1
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	2240      	movs	r2, #64	@ 0x40
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d016      	beq.n	8003be6 <USB_ActivateEndpoint+0x68a>
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	18d3      	adds	r3, r2, r3
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	2048      	movs	r0, #72	@ 0x48
 8003bc8:	183b      	adds	r3, r7, r0
 8003bca:	4932      	ldr	r1, [pc, #200]	@ (8003c94 <USB_ActivateEndpoint+0x738>)
 8003bcc:	400a      	ands	r2, r1
 8003bce:	801a      	strh	r2, [r3, #0]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	18d3      	adds	r3, r2, r3
 8003bda:	183a      	adds	r2, r7, r0
 8003bdc:	8812      	ldrh	r2, [r2, #0]
 8003bde:	492f      	ldr	r1, [pc, #188]	@ (8003c9c <USB_ActivateEndpoint+0x740>)
 8003be0:	430a      	orrs	r2, r1
 8003be2:	b292      	uxth	r2, r2
 8003be4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	78db      	ldrb	r3, [r3, #3]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d01d      	beq.n	8003c2a <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	18d3      	adds	r3, r2, r3
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	2044      	movs	r0, #68	@ 0x44
 8003bfe:	183b      	adds	r3, r7, r0
 8003c00:	4927      	ldr	r1, [pc, #156]	@ (8003ca0 <USB_ActivateEndpoint+0x744>)
 8003c02:	400a      	ands	r2, r1
 8003c04:	801a      	strh	r2, [r3, #0]
 8003c06:	183b      	adds	r3, r7, r0
 8003c08:	183a      	adds	r2, r7, r0
 8003c0a:	8812      	ldrh	r2, [r2, #0]
 8003c0c:	2120      	movs	r1, #32
 8003c0e:	404a      	eors	r2, r1
 8003c10:	801a      	strh	r2, [r3, #0]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	18d3      	adds	r3, r2, r3
 8003c1c:	183a      	adds	r2, r7, r0
 8003c1e:	8812      	ldrh	r2, [r2, #0]
 8003c20:	4920      	ldr	r1, [pc, #128]	@ (8003ca4 <USB_ActivateEndpoint+0x748>)
 8003c22:	430a      	orrs	r2, r1
 8003c24:	b292      	uxth	r2, r2
 8003c26:	801a      	strh	r2, [r3, #0]
 8003c28:	e016      	b.n	8003c58 <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	18d3      	adds	r3, r2, r3
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	2046      	movs	r0, #70	@ 0x46
 8003c3a:	183b      	adds	r3, r7, r0
 8003c3c:	4918      	ldr	r1, [pc, #96]	@ (8003ca0 <USB_ActivateEndpoint+0x744>)
 8003c3e:	400a      	ands	r2, r1
 8003c40:	801a      	strh	r2, [r3, #0]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	18d3      	adds	r3, r2, r3
 8003c4c:	183a      	adds	r2, r7, r0
 8003c4e:	8812      	ldrh	r2, [r2, #0]
 8003c50:	4914      	ldr	r1, [pc, #80]	@ (8003ca4 <USB_ActivateEndpoint+0x748>)
 8003c52:	430a      	orrs	r2, r1
 8003c54:	b292      	uxth	r2, r2
 8003c56:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	18d3      	adds	r3, r2, r3
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	2042      	movs	r0, #66	@ 0x42
 8003c68:	183b      	adds	r3, r7, r0
 8003c6a:	490f      	ldr	r1, [pc, #60]	@ (8003ca8 <USB_ActivateEndpoint+0x74c>)
 8003c6c:	400a      	ands	r2, r1
 8003c6e:	801a      	strh	r2, [r3, #0]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	18d3      	adds	r3, r2, r3
 8003c7a:	183a      	adds	r2, r7, r0
 8003c7c:	8812      	ldrh	r2, [r2, #0]
 8003c7e:	4909      	ldr	r1, [pc, #36]	@ (8003ca4 <USB_ActivateEndpoint+0x748>)
 8003c80:	430a      	orrs	r2, r1
 8003c82:	b292      	uxth	r2, r2
 8003c84:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003c86:	236f      	movs	r3, #111	@ 0x6f
 8003c88:	18fb      	adds	r3, r7, r3
 8003c8a:	781b      	ldrb	r3, [r3, #0]
}
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	b01c      	add	sp, #112	@ 0x70
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	ffff8f8f 	.word	0xffff8f8f
 8003c98:	ffffc080 	.word	0xffffc080
 8003c9c:	ffff80c0 	.word	0xffff80c0
 8003ca0:	ffff8fbf 	.word	0xffff8fbf
 8003ca4:	ffff8080 	.word	0xffff8080
 8003ca8:	ffffbf8f 	.word	0xffffbf8f

08003cac <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003cac:	b590      	push	{r4, r7, lr}
 8003cae:	b0c3      	sub	sp, #268	@ 0x10c
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	785b      	ldrb	r3, [r3, #1]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d001      	beq.n	8003cc2 <USB_EPStartXfer+0x16>
 8003cbe:	f000 fd2d 	bl	800471c <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d905      	bls.n	8003cda <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	1d7a      	adds	r2, r7, #5
 8003cd4:	32ff      	adds	r2, #255	@ 0xff
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	e004      	b.n	8003ce4 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	1d7a      	adds	r2, r7, #5
 8003ce0:	32ff      	adds	r2, #255	@ 0xff
 8003ce2:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	7b1b      	ldrb	r3, [r3, #12]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d125      	bne.n	8003d38 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	6959      	ldr	r1, [r3, #20]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	88da      	ldrh	r2, [r3, #6]
 8003cf4:	1d7b      	adds	r3, r7, #5
 8003cf6:	33ff      	adds	r3, #255	@ 0xff
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f001 fa52 	bl	80051a6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2250      	movs	r2, #80	@ 0x50
 8003d0a:	5a9b      	ldrh	r3, [r3, r2]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	001a      	movs	r2, r3
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	189b      	adds	r3, r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	00da      	lsls	r2, r3, #3
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	18d3      	adds	r3, r2, r3
 8003d20:	4ad7      	ldr	r2, [pc, #860]	@ (8004080 <USB_EPStartXfer+0x3d4>)
 8003d22:	4694      	mov	ip, r2
 8003d24:	4463      	add	r3, ip
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	1d7b      	adds	r3, r7, #5
 8003d2a:	33ff      	adds	r3, #255	@ 0xff
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	801a      	strh	r2, [r3, #0]
 8003d34:	f000 fccd 	bl	80046d2 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	78db      	ldrb	r3, [r3, #3]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d000      	beq.n	8003d42 <USB_EPStartXfer+0x96>
 8003d40:	e362      	b.n	8004408 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	6a1a      	ldr	r2, [r3, #32]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d800      	bhi.n	8003d50 <USB_EPStartXfer+0xa4>
 8003d4e:	e309      	b.n	8004364 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	18d3      	adds	r3, r2, r3
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	2056      	movs	r0, #86	@ 0x56
 8003d60:	183b      	adds	r3, r7, r0
 8003d62:	49c8      	ldr	r1, [pc, #800]	@ (8004084 <USB_EPStartXfer+0x3d8>)
 8003d64:	400a      	ands	r2, r1
 8003d66:	801a      	strh	r2, [r3, #0]
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	18d3      	adds	r3, r2, r3
 8003d72:	183a      	adds	r2, r7, r0
 8003d74:	8812      	ldrh	r2, [r2, #0]
 8003d76:	49c4      	ldr	r1, [pc, #784]	@ (8004088 <USB_EPStartXfer+0x3dc>)
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	b292      	uxth	r2, r2
 8003d7c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	6a1a      	ldr	r2, [r3, #32]
 8003d82:	1d7b      	adds	r3, r7, #5
 8003d84:	33ff      	adds	r3, #255	@ 0xff
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	1ad2      	subs	r2, r2, r3
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	18d3      	adds	r3, r2, r3
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	001a      	movs	r2, r3
 8003d9e:	2340      	movs	r3, #64	@ 0x40
 8003da0:	4013      	ands	r3, r2
 8003da2:	d100      	bne.n	8003da6 <USB_EPStartXfer+0xfa>
 8003da4:	e176      	b.n	8004094 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	785b      	ldrb	r3, [r3, #1]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d000      	beq.n	8003db4 <USB_EPStartXfer+0x108>
 8003db2:	e074      	b.n	8003e9e <USB_EPStartXfer+0x1f2>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2250      	movs	r2, #80	@ 0x50
 8003dbc:	5a9b      	ldrh	r3, [r3, r2]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	001a      	movs	r2, r3
 8003dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc4:	189b      	adds	r3, r3, r2
 8003dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	00da      	lsls	r2, r3, #3
 8003dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd0:	18d3      	adds	r3, r2, r3
 8003dd2:	4aae      	ldr	r2, [pc, #696]	@ (800408c <USB_EPStartXfer+0x3e0>)
 8003dd4:	4694      	mov	ip, r2
 8003dd6:	4463      	add	r3, ip
 8003dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	059b      	lsls	r3, r3, #22
 8003de2:	0d9b      	lsrs	r3, r3, #22
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	801a      	strh	r2, [r3, #0]
 8003dea:	1d7b      	adds	r3, r7, #5
 8003dec:	33ff      	adds	r3, #255	@ 0xff
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d108      	bne.n	8003e06 <USB_EPStartXfer+0x15a>
 8003df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	4aa5      	ldr	r2, [pc, #660]	@ (8004090 <USB_EPStartXfer+0x3e4>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	801a      	strh	r2, [r3, #0]
 8003e04:	e066      	b.n	8003ed4 <USB_EPStartXfer+0x228>
 8003e06:	1d7b      	adds	r3, r7, #5
 8003e08:	33ff      	adds	r3, #255	@ 0xff
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e0e:	d821      	bhi.n	8003e54 <USB_EPStartXfer+0x1a8>
 8003e10:	1d7b      	adds	r3, r7, #5
 8003e12:	33ff      	adds	r3, #255	@ 0xff
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	1c7a      	adds	r2, r7, #1
 8003e1a:	32ff      	adds	r2, #255	@ 0xff
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	1d7b      	adds	r3, r7, #5
 8003e20:	33ff      	adds	r3, #255	@ 0xff
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2201      	movs	r2, #1
 8003e26:	4013      	ands	r3, r2
 8003e28:	d006      	beq.n	8003e38 <USB_EPStartXfer+0x18c>
 8003e2a:	1c7b      	adds	r3, r7, #1
 8003e2c:	33ff      	adds	r3, #255	@ 0xff
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3301      	adds	r3, #1
 8003e32:	1c7a      	adds	r2, r7, #1
 8003e34:	32ff      	adds	r2, #255	@ 0xff
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	1c7b      	adds	r3, r7, #1
 8003e40:	33ff      	adds	r3, #255	@ 0xff
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	029b      	lsls	r3, r3, #10
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e50:	801a      	strh	r2, [r3, #0]
 8003e52:	e03f      	b.n	8003ed4 <USB_EPStartXfer+0x228>
 8003e54:	1d7b      	adds	r3, r7, #5
 8003e56:	33ff      	adds	r3, #255	@ 0xff
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	1c7a      	adds	r2, r7, #1
 8003e5e:	32ff      	adds	r2, #255	@ 0xff
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	1d7b      	adds	r3, r7, #5
 8003e64:	33ff      	adds	r3, #255	@ 0xff
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	221f      	movs	r2, #31
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d106      	bne.n	8003e7c <USB_EPStartXfer+0x1d0>
 8003e6e:	1c7b      	adds	r3, r7, #1
 8003e70:	33ff      	adds	r3, #255	@ 0xff
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	1c7a      	adds	r2, r7, #1
 8003e78:	32ff      	adds	r2, #255	@ 0xff
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	1c7b      	adds	r3, r7, #1
 8003e84:	33ff      	adds	r3, #255	@ 0xff
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	029b      	lsls	r3, r3, #10
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	4a7f      	ldr	r2, [pc, #508]	@ (8004090 <USB_EPStartXfer+0x3e4>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9a:	801a      	strh	r2, [r3, #0]
 8003e9c:	e01a      	b.n	8003ed4 <USB_EPStartXfer+0x228>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	785b      	ldrb	r3, [r3, #1]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d116      	bne.n	8003ed4 <USB_EPStartXfer+0x228>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2250      	movs	r2, #80	@ 0x50
 8003eaa:	5a9b      	ldrh	r3, [r3, r2]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	001a      	movs	r2, r3
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb2:	189b      	adds	r3, r3, r2
 8003eb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	00da      	lsls	r2, r3, #3
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebe:	18d3      	adds	r3, r2, r3
 8003ec0:	4a72      	ldr	r2, [pc, #456]	@ (800408c <USB_EPStartXfer+0x3e0>)
 8003ec2:	4694      	mov	ip, r2
 8003ec4:	4463      	add	r3, ip
 8003ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ec8:	1d7b      	adds	r3, r7, #5
 8003eca:	33ff      	adds	r3, #255	@ 0xff
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003ed4:	2076      	movs	r0, #118	@ 0x76
 8003ed6:	183b      	adds	r3, r7, r0
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	8952      	ldrh	r2, [r2, #10]
 8003edc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	6959      	ldr	r1, [r3, #20]
 8003ee2:	1d7b      	adds	r3, r7, #5
 8003ee4:	33ff      	adds	r3, #255	@ 0xff
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	b29c      	uxth	r4, r3
 8003eea:	183b      	adds	r3, r7, r0
 8003eec:	881a      	ldrh	r2, [r3, #0]
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	0023      	movs	r3, r4
 8003ef2:	f001 f958 	bl	80051a6 <USB_WritePMA>
            ep->xfer_buff += len;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	695a      	ldr	r2, [r3, #20]
 8003efa:	1d7b      	adds	r3, r7, #5
 8003efc:	33ff      	adds	r3, #255	@ 0xff
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	18d2      	adds	r2, r2, r3
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6a1a      	ldr	r2, [r3, #32]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d908      	bls.n	8003f24 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	6a1a      	ldr	r2, [r3, #32]
 8003f16:	1d7b      	adds	r3, r7, #5
 8003f18:	33ff      	adds	r3, #255	@ 0xff
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	1ad2      	subs	r2, r2, r3
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	621a      	str	r2, [r3, #32]
 8003f22:	e007      	b.n	8003f34 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	1d7a      	adds	r2, r7, #5
 8003f2a:	32ff      	adds	r2, #255	@ 0xff
 8003f2c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2200      	movs	r2, #0
 8003f32:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	785b      	ldrb	r3, [r3, #1]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d000      	beq.n	8003f3e <USB_EPStartXfer+0x292>
 8003f3c:	e070      	b.n	8004020 <USB_EPStartXfer+0x374>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	61bb      	str	r3, [r7, #24]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2250      	movs	r2, #80	@ 0x50
 8003f46:	5a9b      	ldrh	r3, [r3, r2]
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	001a      	movs	r2, r3
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	189b      	adds	r3, r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	00da      	lsls	r2, r3, #3
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	18d3      	adds	r3, r2, r3
 8003f5c:	4a48      	ldr	r2, [pc, #288]	@ (8004080 <USB_EPStartXfer+0x3d4>)
 8003f5e:	4694      	mov	ip, r2
 8003f60:	4463      	add	r3, ip
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	059b      	lsls	r3, r3, #22
 8003f6c:	0d9b      	lsrs	r3, r3, #22
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	801a      	strh	r2, [r3, #0]
 8003f74:	1d7b      	adds	r3, r7, #5
 8003f76:	33ff      	adds	r3, #255	@ 0xff
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d108      	bne.n	8003f90 <USB_EPStartXfer+0x2e4>
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	4a42      	ldr	r2, [pc, #264]	@ (8004090 <USB_EPStartXfer+0x3e4>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	801a      	strh	r2, [r3, #0]
 8003f8e:	e064      	b.n	800405a <USB_EPStartXfer+0x3ae>
 8003f90:	1d7b      	adds	r3, r7, #5
 8003f92:	33ff      	adds	r3, #255	@ 0xff
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f98:	d81f      	bhi.n	8003fda <USB_EPStartXfer+0x32e>
 8003f9a:	1d7b      	adds	r3, r7, #5
 8003f9c:	33ff      	adds	r3, #255	@ 0xff
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	085b      	lsrs	r3, r3, #1
 8003fa2:	21fc      	movs	r1, #252	@ 0xfc
 8003fa4:	187a      	adds	r2, r7, r1
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	1d7b      	adds	r3, r7, #5
 8003faa:	33ff      	adds	r3, #255	@ 0xff
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d004      	beq.n	8003fbe <USB_EPStartXfer+0x312>
 8003fb4:	187b      	adds	r3, r7, r1
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	187a      	adds	r2, r7, r1
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	23fc      	movs	r3, #252	@ 0xfc
 8003fc6:	18fb      	adds	r3, r7, r3
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	029b      	lsls	r3, r3, #10
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	801a      	strh	r2, [r3, #0]
 8003fd8:	e03f      	b.n	800405a <USB_EPStartXfer+0x3ae>
 8003fda:	1d7b      	adds	r3, r7, #5
 8003fdc:	33ff      	adds	r3, #255	@ 0xff
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	21fc      	movs	r1, #252	@ 0xfc
 8003fe4:	187a      	adds	r2, r7, r1
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	1d7b      	adds	r3, r7, #5
 8003fea:	33ff      	adds	r3, #255	@ 0xff
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	221f      	movs	r2, #31
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d104      	bne.n	8003ffe <USB_EPStartXfer+0x352>
 8003ff4:	187b      	adds	r3, r7, r1
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	187a      	adds	r2, r7, r1
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	b29a      	uxth	r2, r3
 8004004:	23fc      	movs	r3, #252	@ 0xfc
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	b29b      	uxth	r3, r3
 800400c:	029b      	lsls	r3, r3, #10
 800400e:	b29b      	uxth	r3, r3
 8004010:	4313      	orrs	r3, r2
 8004012:	b29b      	uxth	r3, r3
 8004014:	4a1e      	ldr	r2, [pc, #120]	@ (8004090 <USB_EPStartXfer+0x3e4>)
 8004016:	4313      	orrs	r3, r2
 8004018:	b29a      	uxth	r2, r3
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	801a      	strh	r2, [r3, #0]
 800401e:	e01c      	b.n	800405a <USB_EPStartXfer+0x3ae>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	785b      	ldrb	r3, [r3, #1]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d118      	bne.n	800405a <USB_EPStartXfer+0x3ae>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	623b      	str	r3, [r7, #32]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2250      	movs	r2, #80	@ 0x50
 8004030:	5a9b      	ldrh	r3, [r3, r2]
 8004032:	b29b      	uxth	r3, r3
 8004034:	001a      	movs	r2, r3
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	189b      	adds	r3, r3, r2
 800403a:	623b      	str	r3, [r7, #32]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	00da      	lsls	r2, r3, #3
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	18d3      	adds	r3, r2, r3
 8004046:	4a0e      	ldr	r2, [pc, #56]	@ (8004080 <USB_EPStartXfer+0x3d4>)
 8004048:	4694      	mov	ip, r2
 800404a:	4463      	add	r3, ip
 800404c:	61fb      	str	r3, [r7, #28]
 800404e:	1d7b      	adds	r3, r7, #5
 8004050:	33ff      	adds	r3, #255	@ 0xff
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	b29a      	uxth	r2, r3
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800405a:	2076      	movs	r0, #118	@ 0x76
 800405c:	183b      	adds	r3, r7, r0
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	8912      	ldrh	r2, [r2, #8]
 8004062:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	6959      	ldr	r1, [r3, #20]
 8004068:	1d7b      	adds	r3, r7, #5
 800406a:	33ff      	adds	r3, #255	@ 0xff
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	b29c      	uxth	r4, r3
 8004070:	183b      	adds	r3, r7, r0
 8004072:	881a      	ldrh	r2, [r3, #0]
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	0023      	movs	r3, r4
 8004078:	f001 f895 	bl	80051a6 <USB_WritePMA>
 800407c:	e329      	b.n	80046d2 <USB_EPStartXfer+0xa26>
 800407e:	46c0      	nop			@ (mov r8, r8)
 8004080:	00000402 	.word	0x00000402
 8004084:	ffff8f8f 	.word	0xffff8f8f
 8004088:	ffff8180 	.word	0xffff8180
 800408c:	00000406 	.word	0x00000406
 8004090:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	785b      	ldrb	r3, [r3, #1]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d000      	beq.n	800409e <USB_EPStartXfer+0x3f2>
 800409c:	e070      	b.n	8004180 <USB_EPStartXfer+0x4d4>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2250      	movs	r2, #80	@ 0x50
 80040a6:	5a9b      	ldrh	r3, [r3, r2]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	001a      	movs	r2, r3
 80040ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040ae:	189b      	adds	r3, r3, r2
 80040b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	00da      	lsls	r2, r3, #3
 80040b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040ba:	18d3      	adds	r3, r2, r3
 80040bc:	4acd      	ldr	r2, [pc, #820]	@ (80043f4 <USB_EPStartXfer+0x748>)
 80040be:	4694      	mov	ip, r2
 80040c0:	4463      	add	r3, ip
 80040c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80040c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	059b      	lsls	r3, r3, #22
 80040cc:	0d9b      	lsrs	r3, r3, #22
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040d2:	801a      	strh	r2, [r3, #0]
 80040d4:	1d7b      	adds	r3, r7, #5
 80040d6:	33ff      	adds	r3, #255	@ 0xff
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d108      	bne.n	80040f0 <USB_EPStartXfer+0x444>
 80040de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	4ac4      	ldr	r2, [pc, #784]	@ (80043f8 <USB_EPStartXfer+0x74c>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040ec:	801a      	strh	r2, [r3, #0]
 80040ee:	e064      	b.n	80041ba <USB_EPStartXfer+0x50e>
 80040f0:	1d7b      	adds	r3, r7, #5
 80040f2:	33ff      	adds	r3, #255	@ 0xff
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80040f8:	d81f      	bhi.n	800413a <USB_EPStartXfer+0x48e>
 80040fa:	1d7b      	adds	r3, r7, #5
 80040fc:	33ff      	adds	r3, #255	@ 0xff
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	085b      	lsrs	r3, r3, #1
 8004102:	21f8      	movs	r1, #248	@ 0xf8
 8004104:	187a      	adds	r2, r7, r1
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	1d7b      	adds	r3, r7, #5
 800410a:	33ff      	adds	r3, #255	@ 0xff
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2201      	movs	r2, #1
 8004110:	4013      	ands	r3, r2
 8004112:	d004      	beq.n	800411e <USB_EPStartXfer+0x472>
 8004114:	187b      	adds	r3, r7, r1
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3301      	adds	r3, #1
 800411a:	187a      	adds	r2, r7, r1
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	b29a      	uxth	r2, r3
 8004124:	23f8      	movs	r3, #248	@ 0xf8
 8004126:	18fb      	adds	r3, r7, r3
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	b29b      	uxth	r3, r3
 800412c:	029b      	lsls	r3, r3, #10
 800412e:	b29b      	uxth	r3, r3
 8004130:	4313      	orrs	r3, r2
 8004132:	b29a      	uxth	r2, r3
 8004134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004136:	801a      	strh	r2, [r3, #0]
 8004138:	e03f      	b.n	80041ba <USB_EPStartXfer+0x50e>
 800413a:	1d7b      	adds	r3, r7, #5
 800413c:	33ff      	adds	r3, #255	@ 0xff
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	095b      	lsrs	r3, r3, #5
 8004142:	21f8      	movs	r1, #248	@ 0xf8
 8004144:	187a      	adds	r2, r7, r1
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	1d7b      	adds	r3, r7, #5
 800414a:	33ff      	adds	r3, #255	@ 0xff
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	221f      	movs	r2, #31
 8004150:	4013      	ands	r3, r2
 8004152:	d104      	bne.n	800415e <USB_EPStartXfer+0x4b2>
 8004154:	187b      	adds	r3, r7, r1
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3b01      	subs	r3, #1
 800415a:	187a      	adds	r2, r7, r1
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	b29a      	uxth	r2, r3
 8004164:	23f8      	movs	r3, #248	@ 0xf8
 8004166:	18fb      	adds	r3, r7, r3
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	b29b      	uxth	r3, r3
 800416c:	029b      	lsls	r3, r3, #10
 800416e:	b29b      	uxth	r3, r3
 8004170:	4313      	orrs	r3, r2
 8004172:	b29b      	uxth	r3, r3
 8004174:	4aa0      	ldr	r2, [pc, #640]	@ (80043f8 <USB_EPStartXfer+0x74c>)
 8004176:	4313      	orrs	r3, r2
 8004178:	b29a      	uxth	r2, r3
 800417a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800417c:	801a      	strh	r2, [r3, #0]
 800417e:	e01c      	b.n	80041ba <USB_EPStartXfer+0x50e>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	785b      	ldrb	r3, [r3, #1]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d118      	bne.n	80041ba <USB_EPStartXfer+0x50e>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	653b      	str	r3, [r7, #80]	@ 0x50
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2250      	movs	r2, #80	@ 0x50
 8004190:	5a9b      	ldrh	r3, [r3, r2]
 8004192:	b29b      	uxth	r3, r3
 8004194:	001a      	movs	r2, r3
 8004196:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004198:	189b      	adds	r3, r3, r2
 800419a:	653b      	str	r3, [r7, #80]	@ 0x50
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	00da      	lsls	r2, r3, #3
 80041a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041a4:	18d3      	adds	r3, r2, r3
 80041a6:	4a93      	ldr	r2, [pc, #588]	@ (80043f4 <USB_EPStartXfer+0x748>)
 80041a8:	4694      	mov	ip, r2
 80041aa:	4463      	add	r3, ip
 80041ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041ae:	1d7b      	adds	r3, r7, #5
 80041b0:	33ff      	adds	r3, #255	@ 0xff
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80041ba:	2076      	movs	r0, #118	@ 0x76
 80041bc:	183b      	adds	r3, r7, r0
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	8912      	ldrh	r2, [r2, #8]
 80041c2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	6959      	ldr	r1, [r3, #20]
 80041c8:	1d7b      	adds	r3, r7, #5
 80041ca:	33ff      	adds	r3, #255	@ 0xff
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	b29c      	uxth	r4, r3
 80041d0:	183b      	adds	r3, r7, r0
 80041d2:	881a      	ldrh	r2, [r3, #0]
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	0023      	movs	r3, r4
 80041d8:	f000 ffe5 	bl	80051a6 <USB_WritePMA>
            ep->xfer_buff += len;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	695a      	ldr	r2, [r3, #20]
 80041e0:	1d7b      	adds	r3, r7, #5
 80041e2:	33ff      	adds	r3, #255	@ 0xff
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	18d2      	adds	r2, r2, r3
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	6a1a      	ldr	r2, [r3, #32]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d908      	bls.n	800420a <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	6a1a      	ldr	r2, [r3, #32]
 80041fc:	1d7b      	adds	r3, r7, #5
 80041fe:	33ff      	adds	r3, #255	@ 0xff
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	1ad2      	subs	r2, r2, r3
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	621a      	str	r2, [r3, #32]
 8004208:	e007      	b.n	800421a <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	1d7a      	adds	r2, r7, #5
 8004210:	32ff      	adds	r2, #255	@ 0xff
 8004212:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2200      	movs	r2, #0
 8004218:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	643b      	str	r3, [r7, #64]	@ 0x40
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	785b      	ldrb	r3, [r3, #1]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d000      	beq.n	8004228 <USB_EPStartXfer+0x57c>
 8004226:	e070      	b.n	800430a <USB_EPStartXfer+0x65e>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2250      	movs	r2, #80	@ 0x50
 8004230:	5a9b      	ldrh	r3, [r3, r2]
 8004232:	b29b      	uxth	r3, r3
 8004234:	001a      	movs	r2, r3
 8004236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004238:	189b      	adds	r3, r3, r2
 800423a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	00da      	lsls	r2, r3, #3
 8004242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004244:	18d3      	adds	r3, r2, r3
 8004246:	4a6d      	ldr	r2, [pc, #436]	@ (80043fc <USB_EPStartXfer+0x750>)
 8004248:	4694      	mov	ip, r2
 800424a:	4463      	add	r3, ip
 800424c:	637b      	str	r3, [r7, #52]	@ 0x34
 800424e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	b29b      	uxth	r3, r3
 8004254:	059b      	lsls	r3, r3, #22
 8004256:	0d9b      	lsrs	r3, r3, #22
 8004258:	b29a      	uxth	r2, r3
 800425a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800425c:	801a      	strh	r2, [r3, #0]
 800425e:	1d7b      	adds	r3, r7, #5
 8004260:	33ff      	adds	r3, #255	@ 0xff
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d108      	bne.n	800427a <USB_EPStartXfer+0x5ce>
 8004268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	b29b      	uxth	r3, r3
 800426e:	4a62      	ldr	r2, [pc, #392]	@ (80043f8 <USB_EPStartXfer+0x74c>)
 8004270:	4313      	orrs	r3, r2
 8004272:	b29a      	uxth	r2, r3
 8004274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004276:	801a      	strh	r2, [r3, #0]
 8004278:	e062      	b.n	8004340 <USB_EPStartXfer+0x694>
 800427a:	1d7b      	adds	r3, r7, #5
 800427c:	33ff      	adds	r3, #255	@ 0xff
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b3e      	cmp	r3, #62	@ 0x3e
 8004282:	d81f      	bhi.n	80042c4 <USB_EPStartXfer+0x618>
 8004284:	1d7b      	adds	r3, r7, #5
 8004286:	33ff      	adds	r3, #255	@ 0xff
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	085b      	lsrs	r3, r3, #1
 800428c:	21f4      	movs	r1, #244	@ 0xf4
 800428e:	187a      	adds	r2, r7, r1
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	1d7b      	adds	r3, r7, #5
 8004294:	33ff      	adds	r3, #255	@ 0xff
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2201      	movs	r2, #1
 800429a:	4013      	ands	r3, r2
 800429c:	d004      	beq.n	80042a8 <USB_EPStartXfer+0x5fc>
 800429e:	187b      	adds	r3, r7, r1
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3301      	adds	r3, #1
 80042a4:	187a      	adds	r2, r7, r1
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	23f4      	movs	r3, #244	@ 0xf4
 80042b0:	18fb      	adds	r3, r7, r3
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	029b      	lsls	r3, r3, #10
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	4313      	orrs	r3, r2
 80042bc:	b29a      	uxth	r2, r3
 80042be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c0:	801a      	strh	r2, [r3, #0]
 80042c2:	e03d      	b.n	8004340 <USB_EPStartXfer+0x694>
 80042c4:	1d7b      	adds	r3, r7, #5
 80042c6:	33ff      	adds	r3, #255	@ 0xff
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	21f4      	movs	r1, #244	@ 0xf4
 80042ce:	187a      	adds	r2, r7, r1
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	1d7b      	adds	r3, r7, #5
 80042d4:	33ff      	adds	r3, #255	@ 0xff
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	221f      	movs	r2, #31
 80042da:	4013      	ands	r3, r2
 80042dc:	d104      	bne.n	80042e8 <USB_EPStartXfer+0x63c>
 80042de:	187b      	adds	r3, r7, r1
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	187a      	adds	r2, r7, r1
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	23f4      	movs	r3, #244	@ 0xf4
 80042f0:	18fb      	adds	r3, r7, r3
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	029b      	lsls	r3, r3, #10
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	4313      	orrs	r3, r2
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	4a3e      	ldr	r2, [pc, #248]	@ (80043f8 <USB_EPStartXfer+0x74c>)
 8004300:	4313      	orrs	r3, r2
 8004302:	b29a      	uxth	r2, r3
 8004304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004306:	801a      	strh	r2, [r3, #0]
 8004308:	e01a      	b.n	8004340 <USB_EPStartXfer+0x694>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	785b      	ldrb	r3, [r3, #1]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d116      	bne.n	8004340 <USB_EPStartXfer+0x694>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2250      	movs	r2, #80	@ 0x50
 8004316:	5a9b      	ldrh	r3, [r3, r2]
 8004318:	b29b      	uxth	r3, r3
 800431a:	001a      	movs	r2, r3
 800431c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800431e:	189b      	adds	r3, r3, r2
 8004320:	643b      	str	r3, [r7, #64]	@ 0x40
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	00da      	lsls	r2, r3, #3
 8004328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800432a:	18d3      	adds	r3, r2, r3
 800432c:	4a33      	ldr	r2, [pc, #204]	@ (80043fc <USB_EPStartXfer+0x750>)
 800432e:	4694      	mov	ip, r2
 8004330:	4463      	add	r3, ip
 8004332:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004334:	1d7b      	adds	r3, r7, #5
 8004336:	33ff      	adds	r3, #255	@ 0xff
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	b29a      	uxth	r2, r3
 800433c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800433e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004340:	2076      	movs	r0, #118	@ 0x76
 8004342:	183b      	adds	r3, r7, r0
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	8952      	ldrh	r2, [r2, #10]
 8004348:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6959      	ldr	r1, [r3, #20]
 800434e:	1d7b      	adds	r3, r7, #5
 8004350:	33ff      	adds	r3, #255	@ 0xff
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	b29c      	uxth	r4, r3
 8004356:	183b      	adds	r3, r7, r0
 8004358:	881a      	ldrh	r2, [r3, #0]
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	0023      	movs	r3, r4
 800435e:	f000 ff22 	bl	80051a6 <USB_WritePMA>
 8004362:	e1b6      	b.n	80046d2 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	1d7a      	adds	r2, r7, #5
 800436a:	32ff      	adds	r2, #255	@ 0xff
 800436c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	18d3      	adds	r3, r2, r3
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	b29a      	uxth	r2, r3
 800437c:	2062      	movs	r0, #98	@ 0x62
 800437e:	183b      	adds	r3, r7, r0
 8004380:	491f      	ldr	r1, [pc, #124]	@ (8004400 <USB_EPStartXfer+0x754>)
 8004382:	400a      	ands	r2, r1
 8004384:	801a      	strh	r2, [r3, #0]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	18d3      	adds	r3, r2, r3
 8004390:	183a      	adds	r2, r7, r0
 8004392:	8812      	ldrh	r2, [r2, #0]
 8004394:	491b      	ldr	r1, [pc, #108]	@ (8004404 <USB_EPStartXfer+0x758>)
 8004396:	430a      	orrs	r2, r1
 8004398:	b292      	uxth	r2, r2
 800439a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2250      	movs	r2, #80	@ 0x50
 80043a4:	5a9b      	ldrh	r3, [r3, r2]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	001a      	movs	r2, r3
 80043aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043ac:	189b      	adds	r3, r3, r2
 80043ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	00da      	lsls	r2, r3, #3
 80043b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043b8:	18d3      	adds	r3, r2, r3
 80043ba:	4a0e      	ldr	r2, [pc, #56]	@ (80043f4 <USB_EPStartXfer+0x748>)
 80043bc:	4694      	mov	ip, r2
 80043be:	4463      	add	r3, ip
 80043c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043c2:	1d7b      	adds	r3, r7, #5
 80043c4:	33ff      	adds	r3, #255	@ 0xff
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80043ce:	2076      	movs	r0, #118	@ 0x76
 80043d0:	183b      	adds	r3, r7, r0
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	8912      	ldrh	r2, [r2, #8]
 80043d6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	6959      	ldr	r1, [r3, #20]
 80043dc:	1d7b      	adds	r3, r7, #5
 80043de:	33ff      	adds	r3, #255	@ 0xff
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	b29c      	uxth	r4, r3
 80043e4:	183b      	adds	r3, r7, r0
 80043e6:	881a      	ldrh	r2, [r3, #0]
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	0023      	movs	r3, r4
 80043ec:	f000 fedb 	bl	80051a6 <USB_WritePMA>
 80043f0:	e16f      	b.n	80046d2 <USB_EPStartXfer+0xa26>
 80043f2:	46c0      	nop			@ (mov r8, r8)
 80043f4:	00000402 	.word	0x00000402
 80043f8:	ffff8000 	.word	0xffff8000
 80043fc:	00000406 	.word	0x00000406
 8004400:	ffff8e8f 	.word	0xffff8e8f
 8004404:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	6a1a      	ldr	r2, [r3, #32]
 800440c:	1d7b      	adds	r3, r7, #5
 800440e:	33ff      	adds	r3, #255	@ 0xff
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	1ad2      	subs	r2, r2, r3
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	18d3      	adds	r3, r2, r3
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	b29b      	uxth	r3, r3
 8004426:	001a      	movs	r2, r3
 8004428:	2340      	movs	r3, #64	@ 0x40
 800442a:	4013      	ands	r3, r2
 800442c:	d100      	bne.n	8004430 <USB_EPStartXfer+0x784>
 800442e:	e0a4      	b.n	800457a <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	673b      	str	r3, [r7, #112]	@ 0x70
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	785b      	ldrb	r3, [r3, #1]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d000      	beq.n	800443e <USB_EPStartXfer+0x792>
 800443c:	e070      	b.n	8004520 <USB_EPStartXfer+0x874>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2250      	movs	r2, #80	@ 0x50
 8004446:	5a9b      	ldrh	r3, [r3, r2]
 8004448:	b29b      	uxth	r3, r3
 800444a:	001a      	movs	r2, r3
 800444c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800444e:	189b      	adds	r3, r3, r2
 8004450:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	00da      	lsls	r2, r3, #3
 8004458:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800445a:	18d3      	adds	r3, r2, r3
 800445c:	4ada      	ldr	r2, [pc, #872]	@ (80047c8 <USB_EPStartXfer+0xb1c>)
 800445e:	4694      	mov	ip, r2
 8004460:	4463      	add	r3, ip
 8004462:	667b      	str	r3, [r7, #100]	@ 0x64
 8004464:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	b29b      	uxth	r3, r3
 800446a:	059b      	lsls	r3, r3, #22
 800446c:	0d9b      	lsrs	r3, r3, #22
 800446e:	b29a      	uxth	r2, r3
 8004470:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004472:	801a      	strh	r2, [r3, #0]
 8004474:	1d7b      	adds	r3, r7, #5
 8004476:	33ff      	adds	r3, #255	@ 0xff
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d108      	bne.n	8004490 <USB_EPStartXfer+0x7e4>
 800447e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	b29b      	uxth	r3, r3
 8004484:	4ad1      	ldr	r2, [pc, #836]	@ (80047cc <USB_EPStartXfer+0xb20>)
 8004486:	4313      	orrs	r3, r2
 8004488:	b29a      	uxth	r2, r3
 800448a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800448c:	801a      	strh	r2, [r3, #0]
 800448e:	e062      	b.n	8004556 <USB_EPStartXfer+0x8aa>
 8004490:	1d7b      	adds	r3, r7, #5
 8004492:	33ff      	adds	r3, #255	@ 0xff
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b3e      	cmp	r3, #62	@ 0x3e
 8004498:	d81f      	bhi.n	80044da <USB_EPStartXfer+0x82e>
 800449a:	1d7b      	adds	r3, r7, #5
 800449c:	33ff      	adds	r3, #255	@ 0xff
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	085b      	lsrs	r3, r3, #1
 80044a2:	21f0      	movs	r1, #240	@ 0xf0
 80044a4:	187a      	adds	r2, r7, r1
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	1d7b      	adds	r3, r7, #5
 80044aa:	33ff      	adds	r3, #255	@ 0xff
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2201      	movs	r2, #1
 80044b0:	4013      	ands	r3, r2
 80044b2:	d004      	beq.n	80044be <USB_EPStartXfer+0x812>
 80044b4:	187b      	adds	r3, r7, r1
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3301      	adds	r3, #1
 80044ba:	187a      	adds	r2, r7, r1
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	23f0      	movs	r3, #240	@ 0xf0
 80044c6:	18fb      	adds	r3, r7, r3
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	029b      	lsls	r3, r3, #10
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	4313      	orrs	r3, r2
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044d6:	801a      	strh	r2, [r3, #0]
 80044d8:	e03d      	b.n	8004556 <USB_EPStartXfer+0x8aa>
 80044da:	1d7b      	adds	r3, r7, #5
 80044dc:	33ff      	adds	r3, #255	@ 0xff
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	21f0      	movs	r1, #240	@ 0xf0
 80044e4:	187a      	adds	r2, r7, r1
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	1d7b      	adds	r3, r7, #5
 80044ea:	33ff      	adds	r3, #255	@ 0xff
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	221f      	movs	r2, #31
 80044f0:	4013      	ands	r3, r2
 80044f2:	d104      	bne.n	80044fe <USB_EPStartXfer+0x852>
 80044f4:	187b      	adds	r3, r7, r1
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3b01      	subs	r3, #1
 80044fa:	187a      	adds	r2, r7, r1
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	b29a      	uxth	r2, r3
 8004504:	23f0      	movs	r3, #240	@ 0xf0
 8004506:	18fb      	adds	r3, r7, r3
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	b29b      	uxth	r3, r3
 800450c:	029b      	lsls	r3, r3, #10
 800450e:	b29b      	uxth	r3, r3
 8004510:	4313      	orrs	r3, r2
 8004512:	b29b      	uxth	r3, r3
 8004514:	4aad      	ldr	r2, [pc, #692]	@ (80047cc <USB_EPStartXfer+0xb20>)
 8004516:	4313      	orrs	r3, r2
 8004518:	b29a      	uxth	r2, r3
 800451a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800451c:	801a      	strh	r2, [r3, #0]
 800451e:	e01a      	b.n	8004556 <USB_EPStartXfer+0x8aa>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	785b      	ldrb	r3, [r3, #1]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d116      	bne.n	8004556 <USB_EPStartXfer+0x8aa>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2250      	movs	r2, #80	@ 0x50
 800452c:	5a9b      	ldrh	r3, [r3, r2]
 800452e:	b29b      	uxth	r3, r3
 8004530:	001a      	movs	r2, r3
 8004532:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004534:	189b      	adds	r3, r3, r2
 8004536:	673b      	str	r3, [r7, #112]	@ 0x70
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	00da      	lsls	r2, r3, #3
 800453e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004540:	18d3      	adds	r3, r2, r3
 8004542:	4aa1      	ldr	r2, [pc, #644]	@ (80047c8 <USB_EPStartXfer+0xb1c>)
 8004544:	4694      	mov	ip, r2
 8004546:	4463      	add	r3, ip
 8004548:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800454a:	1d7b      	adds	r3, r7, #5
 800454c:	33ff      	adds	r3, #255	@ 0xff
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	b29a      	uxth	r2, r3
 8004552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004554:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004556:	2076      	movs	r0, #118	@ 0x76
 8004558:	183b      	adds	r3, r7, r0
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	8952      	ldrh	r2, [r2, #10]
 800455e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	6959      	ldr	r1, [r3, #20]
 8004564:	1d7b      	adds	r3, r7, #5
 8004566:	33ff      	adds	r3, #255	@ 0xff
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	b29c      	uxth	r4, r3
 800456c:	183b      	adds	r3, r7, r0
 800456e:	881a      	ldrh	r2, [r3, #0]
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	0023      	movs	r3, r4
 8004574:	f000 fe17 	bl	80051a6 <USB_WritePMA>
 8004578:	e0ab      	b.n	80046d2 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	785b      	ldrb	r3, [r3, #1]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d000      	beq.n	8004584 <USB_EPStartXfer+0x8d8>
 8004582:	e070      	b.n	8004666 <USB_EPStartXfer+0x9ba>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2250      	movs	r2, #80	@ 0x50
 800458c:	5a9b      	ldrh	r3, [r3, r2]
 800458e:	b29b      	uxth	r3, r3
 8004590:	001a      	movs	r2, r3
 8004592:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004594:	189b      	adds	r3, r3, r2
 8004596:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	00da      	lsls	r2, r3, #3
 800459e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045a0:	18d3      	adds	r3, r2, r3
 80045a2:	4a8b      	ldr	r2, [pc, #556]	@ (80047d0 <USB_EPStartXfer+0xb24>)
 80045a4:	4694      	mov	ip, r2
 80045a6:	4463      	add	r3, ip
 80045a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	059b      	lsls	r3, r3, #22
 80045b2:	0d9b      	lsrs	r3, r3, #22
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045b8:	801a      	strh	r2, [r3, #0]
 80045ba:	1d7b      	adds	r3, r7, #5
 80045bc:	33ff      	adds	r3, #255	@ 0xff
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d108      	bne.n	80045d6 <USB_EPStartXfer+0x92a>
 80045c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	4a80      	ldr	r2, [pc, #512]	@ (80047cc <USB_EPStartXfer+0xb20>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045d2:	801a      	strh	r2, [r3, #0]
 80045d4:	e06c      	b.n	80046b0 <USB_EPStartXfer+0xa04>
 80045d6:	1d7b      	adds	r3, r7, #5
 80045d8:	33ff      	adds	r3, #255	@ 0xff
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80045de:	d81f      	bhi.n	8004620 <USB_EPStartXfer+0x974>
 80045e0:	1d7b      	adds	r3, r7, #5
 80045e2:	33ff      	adds	r3, #255	@ 0xff
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	085b      	lsrs	r3, r3, #1
 80045e8:	21ec      	movs	r1, #236	@ 0xec
 80045ea:	187a      	adds	r2, r7, r1
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	1d7b      	adds	r3, r7, #5
 80045f0:	33ff      	adds	r3, #255	@ 0xff
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2201      	movs	r2, #1
 80045f6:	4013      	ands	r3, r2
 80045f8:	d004      	beq.n	8004604 <USB_EPStartXfer+0x958>
 80045fa:	187b      	adds	r3, r7, r1
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3301      	adds	r3, #1
 8004600:	187a      	adds	r2, r7, r1
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004606:	881b      	ldrh	r3, [r3, #0]
 8004608:	b29a      	uxth	r2, r3
 800460a:	23ec      	movs	r3, #236	@ 0xec
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	b29b      	uxth	r3, r3
 8004612:	029b      	lsls	r3, r3, #10
 8004614:	b29b      	uxth	r3, r3
 8004616:	4313      	orrs	r3, r2
 8004618:	b29a      	uxth	r2, r3
 800461a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800461c:	801a      	strh	r2, [r3, #0]
 800461e:	e047      	b.n	80046b0 <USB_EPStartXfer+0xa04>
 8004620:	1d7b      	adds	r3, r7, #5
 8004622:	33ff      	adds	r3, #255	@ 0xff
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	21ec      	movs	r1, #236	@ 0xec
 800462a:	187a      	adds	r2, r7, r1
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	1d7b      	adds	r3, r7, #5
 8004630:	33ff      	adds	r3, #255	@ 0xff
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	221f      	movs	r2, #31
 8004636:	4013      	ands	r3, r2
 8004638:	d104      	bne.n	8004644 <USB_EPStartXfer+0x998>
 800463a:	187b      	adds	r3, r7, r1
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3b01      	subs	r3, #1
 8004640:	187a      	adds	r2, r7, r1
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	b29a      	uxth	r2, r3
 800464a:	23ec      	movs	r3, #236	@ 0xec
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	b29b      	uxth	r3, r3
 8004652:	029b      	lsls	r3, r3, #10
 8004654:	b29b      	uxth	r3, r3
 8004656:	4313      	orrs	r3, r2
 8004658:	b29b      	uxth	r3, r3
 800465a:	4a5c      	ldr	r2, [pc, #368]	@ (80047cc <USB_EPStartXfer+0xb20>)
 800465c:	4313      	orrs	r3, r2
 800465e:	b29a      	uxth	r2, r3
 8004660:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004662:	801a      	strh	r2, [r3, #0]
 8004664:	e024      	b.n	80046b0 <USB_EPStartXfer+0xa04>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	785b      	ldrb	r3, [r3, #1]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d120      	bne.n	80046b0 <USB_EPStartXfer+0xa04>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2184      	movs	r1, #132	@ 0x84
 8004672:	187a      	adds	r2, r7, r1
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2250      	movs	r2, #80	@ 0x50
 800467a:	5a9b      	ldrh	r3, [r3, r2]
 800467c:	b29b      	uxth	r3, r3
 800467e:	001a      	movs	r2, r3
 8004680:	187b      	adds	r3, r7, r1
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	189b      	adds	r3, r3, r2
 8004686:	187a      	adds	r2, r7, r1
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	00da      	lsls	r2, r3, #3
 8004690:	187b      	adds	r3, r7, r1
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	18d3      	adds	r3, r2, r3
 8004696:	4a4e      	ldr	r2, [pc, #312]	@ (80047d0 <USB_EPStartXfer+0xb24>)
 8004698:	4694      	mov	ip, r2
 800469a:	4463      	add	r3, ip
 800469c:	2180      	movs	r1, #128	@ 0x80
 800469e:	187a      	adds	r2, r7, r1
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	1d7b      	adds	r3, r7, #5
 80046a4:	33ff      	adds	r3, #255	@ 0xff
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	187b      	adds	r3, r7, r1
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80046b0:	2076      	movs	r0, #118	@ 0x76
 80046b2:	183b      	adds	r3, r7, r0
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	8912      	ldrh	r2, [r2, #8]
 80046b8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6959      	ldr	r1, [r3, #20]
 80046be:	1d7b      	adds	r3, r7, #5
 80046c0:	33ff      	adds	r3, #255	@ 0xff
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	b29c      	uxth	r4, r3
 80046c6:	183b      	adds	r3, r7, r0
 80046c8:	881a      	ldrh	r2, [r3, #0]
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	0023      	movs	r3, r4
 80046ce:	f000 fd6a 	bl	80051a6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	18d3      	adds	r3, r2, r3
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	b29a      	uxth	r2, r3
 80046e0:	200a      	movs	r0, #10
 80046e2:	183b      	adds	r3, r7, r0
 80046e4:	493b      	ldr	r1, [pc, #236]	@ (80047d4 <USB_EPStartXfer+0xb28>)
 80046e6:	400a      	ands	r2, r1
 80046e8:	801a      	strh	r2, [r3, #0]
 80046ea:	183b      	adds	r3, r7, r0
 80046ec:	183a      	adds	r2, r7, r0
 80046ee:	8812      	ldrh	r2, [r2, #0]
 80046f0:	2110      	movs	r1, #16
 80046f2:	404a      	eors	r2, r1
 80046f4:	801a      	strh	r2, [r3, #0]
 80046f6:	183b      	adds	r3, r7, r0
 80046f8:	183a      	adds	r2, r7, r0
 80046fa:	8812      	ldrh	r2, [r2, #0]
 80046fc:	2120      	movs	r1, #32
 80046fe:	404a      	eors	r2, r1
 8004700:	801a      	strh	r2, [r3, #0]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	18d3      	adds	r3, r2, r3
 800470c:	183a      	adds	r2, r7, r0
 800470e:	8812      	ldrh	r2, [r2, #0]
 8004710:	4931      	ldr	r1, [pc, #196]	@ (80047d8 <USB_EPStartXfer+0xb2c>)
 8004712:	430a      	orrs	r2, r1
 8004714:	b292      	uxth	r2, r2
 8004716:	801a      	strh	r2, [r3, #0]
 8004718:	f000 fbe9 	bl	8004eee <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	7b1b      	ldrb	r3, [r3, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d000      	beq.n	8004726 <USB_EPStartXfer+0xa7a>
 8004724:	e0a8      	b.n	8004878 <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	429a      	cmp	r2, r3
 8004730:	d90d      	bls.n	800474e <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	1d7a      	adds	r2, r7, #5
 8004738:	32ff      	adds	r2, #255	@ 0xff
 800473a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	699a      	ldr	r2, [r3, #24]
 8004740:	1d7b      	adds	r3, r7, #5
 8004742:	33ff      	adds	r3, #255	@ 0xff
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	1ad2      	subs	r2, r2, r3
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	619a      	str	r2, [r3, #24]
 800474c:	e007      	b.n	800475e <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	1d7a      	adds	r2, r7, #5
 8004754:	32ff      	adds	r2, #255	@ 0xff
 8004756:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2200      	movs	r2, #0
 800475c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2190      	movs	r1, #144	@ 0x90
 8004762:	187a      	adds	r2, r7, r1
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2250      	movs	r2, #80	@ 0x50
 800476a:	5a9b      	ldrh	r3, [r3, r2]
 800476c:	b29b      	uxth	r3, r3
 800476e:	001a      	movs	r2, r3
 8004770:	187b      	adds	r3, r7, r1
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	189b      	adds	r3, r3, r2
 8004776:	187a      	adds	r2, r7, r1
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	00da      	lsls	r2, r3, #3
 8004780:	187b      	adds	r3, r7, r1
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	18d3      	adds	r3, r2, r3
 8004786:	4a10      	ldr	r2, [pc, #64]	@ (80047c8 <USB_EPStartXfer+0xb1c>)
 8004788:	4694      	mov	ip, r2
 800478a:	4463      	add	r3, ip
 800478c:	218c      	movs	r1, #140	@ 0x8c
 800478e:	187a      	adds	r2, r7, r1
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	187b      	adds	r3, r7, r1
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	b29b      	uxth	r3, r3
 800479a:	059b      	lsls	r3, r3, #22
 800479c:	0d9b      	lsrs	r3, r3, #22
 800479e:	b29a      	uxth	r2, r3
 80047a0:	187b      	adds	r3, r7, r1
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	801a      	strh	r2, [r3, #0]
 80047a6:	1d7b      	adds	r3, r7, #5
 80047a8:	33ff      	adds	r3, #255	@ 0xff
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d115      	bne.n	80047dc <USB_EPStartXfer+0xb30>
 80047b0:	187b      	adds	r3, r7, r1
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	4a04      	ldr	r2, [pc, #16]	@ (80047cc <USB_EPStartXfer+0xb20>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	b29a      	uxth	r2, r3
 80047be:	187b      	adds	r3, r7, r1
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	801a      	strh	r2, [r3, #0]
 80047c4:	e36e      	b.n	8004ea4 <USB_EPStartXfer+0x11f8>
 80047c6:	46c0      	nop			@ (mov r8, r8)
 80047c8:	00000406 	.word	0x00000406
 80047cc:	ffff8000 	.word	0xffff8000
 80047d0:	00000402 	.word	0x00000402
 80047d4:	ffff8fbf 	.word	0xffff8fbf
 80047d8:	ffff8080 	.word	0xffff8080
 80047dc:	1d7b      	adds	r3, r7, #5
 80047de:	33ff      	adds	r3, #255	@ 0xff
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80047e4:	d822      	bhi.n	800482c <USB_EPStartXfer+0xb80>
 80047e6:	1d7b      	adds	r3, r7, #5
 80047e8:	33ff      	adds	r3, #255	@ 0xff
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	085b      	lsrs	r3, r3, #1
 80047ee:	21e8      	movs	r1, #232	@ 0xe8
 80047f0:	187a      	adds	r2, r7, r1
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	1d7b      	adds	r3, r7, #5
 80047f6:	33ff      	adds	r3, #255	@ 0xff
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2201      	movs	r2, #1
 80047fc:	4013      	ands	r3, r2
 80047fe:	d004      	beq.n	800480a <USB_EPStartXfer+0xb5e>
 8004800:	187b      	adds	r3, r7, r1
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3301      	adds	r3, #1
 8004806:	187a      	adds	r2, r7, r1
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	218c      	movs	r1, #140	@ 0x8c
 800480c:	187b      	adds	r3, r7, r1
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	b29a      	uxth	r2, r3
 8004814:	23e8      	movs	r3, #232	@ 0xe8
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	b29b      	uxth	r3, r3
 800481c:	029b      	lsls	r3, r3, #10
 800481e:	b29b      	uxth	r3, r3
 8004820:	4313      	orrs	r3, r2
 8004822:	b29a      	uxth	r2, r3
 8004824:	187b      	adds	r3, r7, r1
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	801a      	strh	r2, [r3, #0]
 800482a:	e33b      	b.n	8004ea4 <USB_EPStartXfer+0x11f8>
 800482c:	1d7b      	adds	r3, r7, #5
 800482e:	33ff      	adds	r3, #255	@ 0xff
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	21e8      	movs	r1, #232	@ 0xe8
 8004836:	187a      	adds	r2, r7, r1
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	1d7b      	adds	r3, r7, #5
 800483c:	33ff      	adds	r3, #255	@ 0xff
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	221f      	movs	r2, #31
 8004842:	4013      	ands	r3, r2
 8004844:	d104      	bne.n	8004850 <USB_EPStartXfer+0xba4>
 8004846:	187b      	adds	r3, r7, r1
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3b01      	subs	r3, #1
 800484c:	187a      	adds	r2, r7, r1
 800484e:	6013      	str	r3, [r2, #0]
 8004850:	218c      	movs	r1, #140	@ 0x8c
 8004852:	187b      	adds	r3, r7, r1
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	b29a      	uxth	r2, r3
 800485a:	23e8      	movs	r3, #232	@ 0xe8
 800485c:	18fb      	adds	r3, r7, r3
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	b29b      	uxth	r3, r3
 8004862:	029b      	lsls	r3, r3, #10
 8004864:	b29b      	uxth	r3, r3
 8004866:	4313      	orrs	r3, r2
 8004868:	b29b      	uxth	r3, r3
 800486a:	4ad7      	ldr	r2, [pc, #860]	@ (8004bc8 <USB_EPStartXfer+0xf1c>)
 800486c:	4313      	orrs	r3, r2
 800486e:	b29a      	uxth	r2, r3
 8004870:	187b      	adds	r3, r7, r1
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	801a      	strh	r2, [r3, #0]
 8004876:	e315      	b.n	8004ea4 <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	78db      	ldrb	r3, [r3, #3]
 800487c:	2b02      	cmp	r3, #2
 800487e:	d000      	beq.n	8004882 <USB_EPStartXfer+0xbd6>
 8004880:	e189      	b.n	8004b96 <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	785b      	ldrb	r3, [r3, #1]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d000      	beq.n	800488c <USB_EPStartXfer+0xbe0>
 800488a:	e07b      	b.n	8004984 <USB_EPStartXfer+0xcd8>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	21ac      	movs	r1, #172	@ 0xac
 8004890:	187a      	adds	r2, r7, r1
 8004892:	6013      	str	r3, [r2, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2250      	movs	r2, #80	@ 0x50
 8004898:	5a9b      	ldrh	r3, [r3, r2]
 800489a:	b29b      	uxth	r3, r3
 800489c:	001a      	movs	r2, r3
 800489e:	187b      	adds	r3, r7, r1
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	189b      	adds	r3, r3, r2
 80048a4:	187a      	adds	r2, r7, r1
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	00da      	lsls	r2, r3, #3
 80048ae:	187b      	adds	r3, r7, r1
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	18d3      	adds	r3, r2, r3
 80048b4:	4ac5      	ldr	r2, [pc, #788]	@ (8004bcc <USB_EPStartXfer+0xf20>)
 80048b6:	4694      	mov	ip, r2
 80048b8:	4463      	add	r3, ip
 80048ba:	21a8      	movs	r1, #168	@ 0xa8
 80048bc:	187a      	adds	r2, r7, r1
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	187b      	adds	r3, r7, r1
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	059b      	lsls	r3, r3, #22
 80048ca:	0d9b      	lsrs	r3, r3, #22
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	187b      	adds	r3, r7, r1
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	801a      	strh	r2, [r3, #0]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10a      	bne.n	80048f2 <USB_EPStartXfer+0xc46>
 80048dc:	187b      	adds	r3, r7, r1
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	4ab8      	ldr	r2, [pc, #736]	@ (8004bc8 <USB_EPStartXfer+0xf1c>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	187b      	adds	r3, r7, r1
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	801a      	strh	r2, [r3, #0]
 80048f0:	e06c      	b.n	80049cc <USB_EPStartXfer+0xd20>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80048f8:	d820      	bhi.n	800493c <USB_EPStartXfer+0xc90>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	085b      	lsrs	r3, r3, #1
 8004900:	21e4      	movs	r1, #228	@ 0xe4
 8004902:	187a      	adds	r2, r7, r1
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	2201      	movs	r2, #1
 800490c:	4013      	ands	r3, r2
 800490e:	d004      	beq.n	800491a <USB_EPStartXfer+0xc6e>
 8004910:	187b      	adds	r3, r7, r1
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3301      	adds	r3, #1
 8004916:	187a      	adds	r2, r7, r1
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	21a8      	movs	r1, #168	@ 0xa8
 800491c:	187b      	adds	r3, r7, r1
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	b29a      	uxth	r2, r3
 8004924:	23e4      	movs	r3, #228	@ 0xe4
 8004926:	18fb      	adds	r3, r7, r3
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	b29b      	uxth	r3, r3
 800492c:	029b      	lsls	r3, r3, #10
 800492e:	b29b      	uxth	r3, r3
 8004930:	4313      	orrs	r3, r2
 8004932:	b29a      	uxth	r2, r3
 8004934:	187b      	adds	r3, r7, r1
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	801a      	strh	r2, [r3, #0]
 800493a:	e047      	b.n	80049cc <USB_EPStartXfer+0xd20>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	095b      	lsrs	r3, r3, #5
 8004942:	21e4      	movs	r1, #228	@ 0xe4
 8004944:	187a      	adds	r2, r7, r1
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	221f      	movs	r2, #31
 800494e:	4013      	ands	r3, r2
 8004950:	d104      	bne.n	800495c <USB_EPStartXfer+0xcb0>
 8004952:	187b      	adds	r3, r7, r1
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3b01      	subs	r3, #1
 8004958:	187a      	adds	r2, r7, r1
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	21a8      	movs	r1, #168	@ 0xa8
 800495e:	187b      	adds	r3, r7, r1
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	b29a      	uxth	r2, r3
 8004966:	23e4      	movs	r3, #228	@ 0xe4
 8004968:	18fb      	adds	r3, r7, r3
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	b29b      	uxth	r3, r3
 800496e:	029b      	lsls	r3, r3, #10
 8004970:	b29b      	uxth	r3, r3
 8004972:	4313      	orrs	r3, r2
 8004974:	b29b      	uxth	r3, r3
 8004976:	4a94      	ldr	r2, [pc, #592]	@ (8004bc8 <USB_EPStartXfer+0xf1c>)
 8004978:	4313      	orrs	r3, r2
 800497a:	b29a      	uxth	r2, r3
 800497c:	187b      	adds	r3, r7, r1
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	801a      	strh	r2, [r3, #0]
 8004982:	e023      	b.n	80049cc <USB_EPStartXfer+0xd20>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	785b      	ldrb	r3, [r3, #1]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d11f      	bne.n	80049cc <USB_EPStartXfer+0xd20>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	21b4      	movs	r1, #180	@ 0xb4
 8004990:	187a      	adds	r2, r7, r1
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2250      	movs	r2, #80	@ 0x50
 8004998:	5a9b      	ldrh	r3, [r3, r2]
 800499a:	b29b      	uxth	r3, r3
 800499c:	001a      	movs	r2, r3
 800499e:	187b      	adds	r3, r7, r1
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	189b      	adds	r3, r3, r2
 80049a4:	187a      	adds	r2, r7, r1
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	00da      	lsls	r2, r3, #3
 80049ae:	187b      	adds	r3, r7, r1
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	18d3      	adds	r3, r2, r3
 80049b4:	4a85      	ldr	r2, [pc, #532]	@ (8004bcc <USB_EPStartXfer+0xf20>)
 80049b6:	4694      	mov	ip, r2
 80049b8:	4463      	add	r3, ip
 80049ba:	21b0      	movs	r1, #176	@ 0xb0
 80049bc:	187a      	adds	r2, r7, r1
 80049be:	6013      	str	r3, [r2, #0]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	187b      	adds	r3, r7, r1
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	801a      	strh	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	22a4      	movs	r2, #164	@ 0xa4
 80049d0:	18ba      	adds	r2, r7, r2
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	785b      	ldrb	r3, [r3, #1]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d000      	beq.n	80049de <USB_EPStartXfer+0xd32>
 80049dc:	e07b      	b.n	8004ad6 <USB_EPStartXfer+0xe2a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	219c      	movs	r1, #156	@ 0x9c
 80049e2:	187a      	adds	r2, r7, r1
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2250      	movs	r2, #80	@ 0x50
 80049ea:	5a9b      	ldrh	r3, [r3, r2]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	001a      	movs	r2, r3
 80049f0:	187b      	adds	r3, r7, r1
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	189b      	adds	r3, r3, r2
 80049f6:	187a      	adds	r2, r7, r1
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	00da      	lsls	r2, r3, #3
 8004a00:	187b      	adds	r3, r7, r1
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	18d3      	adds	r3, r2, r3
 8004a06:	4a72      	ldr	r2, [pc, #456]	@ (8004bd0 <USB_EPStartXfer+0xf24>)
 8004a08:	4694      	mov	ip, r2
 8004a0a:	4463      	add	r3, ip
 8004a0c:	2198      	movs	r1, #152	@ 0x98
 8004a0e:	187a      	adds	r2, r7, r1
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	187b      	adds	r3, r7, r1
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	059b      	lsls	r3, r3, #22
 8004a1c:	0d9b      	lsrs	r3, r3, #22
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	187b      	adds	r3, r7, r1
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	801a      	strh	r2, [r3, #0]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10a      	bne.n	8004a44 <USB_EPStartXfer+0xd98>
 8004a2e:	187b      	adds	r3, r7, r1
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	4a64      	ldr	r2, [pc, #400]	@ (8004bc8 <USB_EPStartXfer+0xf1c>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	187b      	adds	r3, r7, r1
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	801a      	strh	r2, [r3, #0]
 8004a42:	e069      	b.n	8004b18 <USB_EPStartXfer+0xe6c>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a4a:	d820      	bhi.n	8004a8e <USB_EPStartXfer+0xde2>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	085b      	lsrs	r3, r3, #1
 8004a52:	21e0      	movs	r1, #224	@ 0xe0
 8004a54:	187a      	adds	r2, r7, r1
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d004      	beq.n	8004a6c <USB_EPStartXfer+0xdc0>
 8004a62:	187b      	adds	r3, r7, r1
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3301      	adds	r3, #1
 8004a68:	187a      	adds	r2, r7, r1
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	2198      	movs	r1, #152	@ 0x98
 8004a6e:	187b      	adds	r3, r7, r1
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	23e0      	movs	r3, #224	@ 0xe0
 8004a78:	18fb      	adds	r3, r7, r3
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	029b      	lsls	r3, r3, #10
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	4313      	orrs	r3, r2
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	187b      	adds	r3, r7, r1
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	801a      	strh	r2, [r3, #0]
 8004a8c:	e044      	b.n	8004b18 <USB_EPStartXfer+0xe6c>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	095b      	lsrs	r3, r3, #5
 8004a94:	21e0      	movs	r1, #224	@ 0xe0
 8004a96:	187a      	adds	r2, r7, r1
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	221f      	movs	r2, #31
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	d104      	bne.n	8004aae <USB_EPStartXfer+0xe02>
 8004aa4:	187b      	adds	r3, r7, r1
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	187a      	adds	r2, r7, r1
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	2198      	movs	r1, #152	@ 0x98
 8004ab0:	187b      	adds	r3, r7, r1
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	23e0      	movs	r3, #224	@ 0xe0
 8004aba:	18fb      	adds	r3, r7, r3
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	029b      	lsls	r3, r3, #10
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	4a3f      	ldr	r2, [pc, #252]	@ (8004bc8 <USB_EPStartXfer+0xf1c>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	187b      	adds	r3, r7, r1
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	801a      	strh	r2, [r3, #0]
 8004ad4:	e020      	b.n	8004b18 <USB_EPStartXfer+0xe6c>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	785b      	ldrb	r3, [r3, #1]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d11c      	bne.n	8004b18 <USB_EPStartXfer+0xe6c>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2250      	movs	r2, #80	@ 0x50
 8004ae2:	5a9b      	ldrh	r3, [r3, r2]
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	001a      	movs	r2, r3
 8004ae8:	21a4      	movs	r1, #164	@ 0xa4
 8004aea:	187b      	adds	r3, r7, r1
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	189b      	adds	r3, r3, r2
 8004af0:	187a      	adds	r2, r7, r1
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	00da      	lsls	r2, r3, #3
 8004afa:	187b      	adds	r3, r7, r1
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	18d3      	adds	r3, r2, r3
 8004b00:	4a33      	ldr	r2, [pc, #204]	@ (8004bd0 <USB_EPStartXfer+0xf24>)
 8004b02:	4694      	mov	ip, r2
 8004b04:	4463      	add	r3, ip
 8004b06:	21a0      	movs	r1, #160	@ 0xa0
 8004b08:	187a      	adds	r2, r7, r1
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	187b      	adds	r3, r7, r1
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d100      	bne.n	8004b22 <USB_EPStartXfer+0xe76>
 8004b20:	e1c0      	b.n	8004ea4 <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	18d2      	adds	r2, r2, r3
 8004b2c:	2196      	movs	r1, #150	@ 0x96
 8004b2e:	187b      	adds	r3, r7, r1
 8004b30:	8812      	ldrh	r2, [r2, #0]
 8004b32:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004b34:	187b      	adds	r3, r7, r1
 8004b36:	881a      	ldrh	r2, [r3, #0]
 8004b38:	2380      	movs	r3, #128	@ 0x80
 8004b3a:	01db      	lsls	r3, r3, #7
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	d004      	beq.n	8004b4a <USB_EPStartXfer+0xe9e>
 8004b40:	187b      	adds	r3, r7, r1
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	2240      	movs	r2, #64	@ 0x40
 8004b46:	4013      	ands	r3, r2
 8004b48:	d10d      	bne.n	8004b66 <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004b4a:	2196      	movs	r1, #150	@ 0x96
 8004b4c:	187b      	adds	r3, r7, r1
 8004b4e:	881a      	ldrh	r2, [r3, #0]
 8004b50:	2380      	movs	r3, #128	@ 0x80
 8004b52:	01db      	lsls	r3, r3, #7
 8004b54:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004b56:	d000      	beq.n	8004b5a <USB_EPStartXfer+0xeae>
 8004b58:	e1a4      	b.n	8004ea4 <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004b5a:	187b      	adds	r3, r7, r1
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	2240      	movs	r2, #64	@ 0x40
 8004b60:	4013      	ands	r3, r2
 8004b62:	d000      	beq.n	8004b66 <USB_EPStartXfer+0xeba>
 8004b64:	e19e      	b.n	8004ea4 <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	18d3      	adds	r3, r2, r3
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	2094      	movs	r0, #148	@ 0x94
 8004b76:	183b      	adds	r3, r7, r0
 8004b78:	4916      	ldr	r1, [pc, #88]	@ (8004bd4 <USB_EPStartXfer+0xf28>)
 8004b7a:	400a      	ands	r2, r1
 8004b7c:	801a      	strh	r2, [r3, #0]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	18d3      	adds	r3, r2, r3
 8004b88:	183a      	adds	r2, r7, r0
 8004b8a:	8812      	ldrh	r2, [r2, #0]
 8004b8c:	4912      	ldr	r1, [pc, #72]	@ (8004bd8 <USB_EPStartXfer+0xf2c>)
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	b292      	uxth	r2, r2
 8004b92:	801a      	strh	r2, [r3, #0]
 8004b94:	e186      	b.n	8004ea4 <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	78db      	ldrb	r3, [r3, #3]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d000      	beq.n	8004ba0 <USB_EPStartXfer+0xef4>
 8004b9e:	e17f      	b.n	8004ea0 <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	699a      	ldr	r2, [r3, #24]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d917      	bls.n	8004bdc <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	1d7a      	adds	r2, r7, #5
 8004bb2:	32ff      	adds	r2, #255	@ 0xff
 8004bb4:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	699a      	ldr	r2, [r3, #24]
 8004bba:	1d7b      	adds	r3, r7, #5
 8004bbc:	33ff      	adds	r3, #255	@ 0xff
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	1ad2      	subs	r2, r2, r3
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	619a      	str	r2, [r3, #24]
 8004bc6:	e011      	b.n	8004bec <USB_EPStartXfer+0xf40>
 8004bc8:	ffff8000 	.word	0xffff8000
 8004bcc:	00000402 	.word	0x00000402
 8004bd0:	00000406 	.word	0x00000406
 8004bd4:	ffff8f8f 	.word	0xffff8f8f
 8004bd8:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	1d7a      	adds	r2, r7, #5
 8004be2:	32ff      	adds	r2, #255	@ 0xff
 8004be4:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2200      	movs	r2, #0
 8004bea:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	785b      	ldrb	r3, [r3, #1]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d000      	beq.n	8004bf6 <USB_EPStartXfer+0xf4a>
 8004bf4:	e081      	b.n	8004cfa <USB_EPStartXfer+0x104e>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	21cc      	movs	r1, #204	@ 0xcc
 8004bfa:	187a      	adds	r2, r7, r1
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2250      	movs	r2, #80	@ 0x50
 8004c02:	5a9b      	ldrh	r3, [r3, r2]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	001a      	movs	r2, r3
 8004c08:	187b      	adds	r3, r7, r1
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	189b      	adds	r3, r3, r2
 8004c0e:	187a      	adds	r2, r7, r1
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	00da      	lsls	r2, r3, #3
 8004c18:	187b      	adds	r3, r7, r1
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	18d3      	adds	r3, r2, r3
 8004c1e:	4ab6      	ldr	r2, [pc, #728]	@ (8004ef8 <USB_EPStartXfer+0x124c>)
 8004c20:	4694      	mov	ip, r2
 8004c22:	4463      	add	r3, ip
 8004c24:	21c8      	movs	r1, #200	@ 0xc8
 8004c26:	187a      	adds	r2, r7, r1
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	187b      	adds	r3, r7, r1
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	881b      	ldrh	r3, [r3, #0]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	059b      	lsls	r3, r3, #22
 8004c34:	0d9b      	lsrs	r3, r3, #22
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	187b      	adds	r3, r7, r1
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	801a      	strh	r2, [r3, #0]
 8004c3e:	1d7b      	adds	r3, r7, #5
 8004c40:	33ff      	adds	r3, #255	@ 0xff
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10a      	bne.n	8004c5e <USB_EPStartXfer+0xfb2>
 8004c48:	187b      	adds	r3, r7, r1
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	4aaa      	ldr	r2, [pc, #680]	@ (8004efc <USB_EPStartXfer+0x1250>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	187b      	adds	r3, r7, r1
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	801a      	strh	r2, [r3, #0]
 8004c5c:	e072      	b.n	8004d44 <USB_EPStartXfer+0x1098>
 8004c5e:	1d7b      	adds	r3, r7, #5
 8004c60:	33ff      	adds	r3, #255	@ 0xff
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c66:	d822      	bhi.n	8004cae <USB_EPStartXfer+0x1002>
 8004c68:	1d7b      	adds	r3, r7, #5
 8004c6a:	33ff      	adds	r3, #255	@ 0xff
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	085b      	lsrs	r3, r3, #1
 8004c70:	21dc      	movs	r1, #220	@ 0xdc
 8004c72:	187a      	adds	r2, r7, r1
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	1d7b      	adds	r3, r7, #5
 8004c78:	33ff      	adds	r3, #255	@ 0xff
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	4013      	ands	r3, r2
 8004c80:	d004      	beq.n	8004c8c <USB_EPStartXfer+0xfe0>
 8004c82:	187b      	adds	r3, r7, r1
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3301      	adds	r3, #1
 8004c88:	187a      	adds	r2, r7, r1
 8004c8a:	6013      	str	r3, [r2, #0]
 8004c8c:	21c8      	movs	r1, #200	@ 0xc8
 8004c8e:	187b      	adds	r3, r7, r1
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	23dc      	movs	r3, #220	@ 0xdc
 8004c98:	18fb      	adds	r3, r7, r3
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	029b      	lsls	r3, r3, #10
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	187b      	adds	r3, r7, r1
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	801a      	strh	r2, [r3, #0]
 8004cac:	e04a      	b.n	8004d44 <USB_EPStartXfer+0x1098>
 8004cae:	1d7b      	adds	r3, r7, #5
 8004cb0:	33ff      	adds	r3, #255	@ 0xff
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	095b      	lsrs	r3, r3, #5
 8004cb6:	21dc      	movs	r1, #220	@ 0xdc
 8004cb8:	187a      	adds	r2, r7, r1
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	1d7b      	adds	r3, r7, #5
 8004cbe:	33ff      	adds	r3, #255	@ 0xff
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	221f      	movs	r2, #31
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d104      	bne.n	8004cd2 <USB_EPStartXfer+0x1026>
 8004cc8:	187b      	adds	r3, r7, r1
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	187a      	adds	r2, r7, r1
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	21c8      	movs	r1, #200	@ 0xc8
 8004cd4:	187b      	adds	r3, r7, r1
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	881b      	ldrh	r3, [r3, #0]
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	23dc      	movs	r3, #220	@ 0xdc
 8004cde:	18fb      	adds	r3, r7, r3
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	029b      	lsls	r3, r3, #10
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	4a83      	ldr	r2, [pc, #524]	@ (8004efc <USB_EPStartXfer+0x1250>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	187b      	adds	r3, r7, r1
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	801a      	strh	r2, [r3, #0]
 8004cf8:	e024      	b.n	8004d44 <USB_EPStartXfer+0x1098>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	785b      	ldrb	r3, [r3, #1]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d120      	bne.n	8004d44 <USB_EPStartXfer+0x1098>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	21d4      	movs	r1, #212	@ 0xd4
 8004d06:	187a      	adds	r2, r7, r1
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2250      	movs	r2, #80	@ 0x50
 8004d0e:	5a9b      	ldrh	r3, [r3, r2]
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	001a      	movs	r2, r3
 8004d14:	187b      	adds	r3, r7, r1
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	189b      	adds	r3, r3, r2
 8004d1a:	187a      	adds	r2, r7, r1
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	00da      	lsls	r2, r3, #3
 8004d24:	187b      	adds	r3, r7, r1
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	18d3      	adds	r3, r2, r3
 8004d2a:	4a73      	ldr	r2, [pc, #460]	@ (8004ef8 <USB_EPStartXfer+0x124c>)
 8004d2c:	4694      	mov	ip, r2
 8004d2e:	4463      	add	r3, ip
 8004d30:	21d0      	movs	r1, #208	@ 0xd0
 8004d32:	187a      	adds	r2, r7, r1
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	1d7b      	adds	r3, r7, #5
 8004d38:	33ff      	adds	r3, #255	@ 0xff
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	187b      	adds	r3, r7, r1
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	801a      	strh	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	22c4      	movs	r2, #196	@ 0xc4
 8004d48:	18ba      	adds	r2, r7, r2
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	785b      	ldrb	r3, [r3, #1]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d000      	beq.n	8004d56 <USB_EPStartXfer+0x10aa>
 8004d54:	e081      	b.n	8004e5a <USB_EPStartXfer+0x11ae>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	21bc      	movs	r1, #188	@ 0xbc
 8004d5a:	187a      	adds	r2, r7, r1
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2250      	movs	r2, #80	@ 0x50
 8004d62:	5a9b      	ldrh	r3, [r3, r2]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	001a      	movs	r2, r3
 8004d68:	187b      	adds	r3, r7, r1
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	189b      	adds	r3, r3, r2
 8004d6e:	187a      	adds	r2, r7, r1
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	00da      	lsls	r2, r3, #3
 8004d78:	187b      	adds	r3, r7, r1
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	18d3      	adds	r3, r2, r3
 8004d7e:	4a60      	ldr	r2, [pc, #384]	@ (8004f00 <USB_EPStartXfer+0x1254>)
 8004d80:	4694      	mov	ip, r2
 8004d82:	4463      	add	r3, ip
 8004d84:	21b8      	movs	r1, #184	@ 0xb8
 8004d86:	187a      	adds	r2, r7, r1
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	187b      	adds	r3, r7, r1
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	059b      	lsls	r3, r3, #22
 8004d94:	0d9b      	lsrs	r3, r3, #22
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	187b      	adds	r3, r7, r1
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	801a      	strh	r2, [r3, #0]
 8004d9e:	1d7b      	adds	r3, r7, #5
 8004da0:	33ff      	adds	r3, #255	@ 0xff
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10a      	bne.n	8004dbe <USB_EPStartXfer+0x1112>
 8004da8:	187b      	adds	r3, r7, r1
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	4a52      	ldr	r2, [pc, #328]	@ (8004efc <USB_EPStartXfer+0x1250>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	187b      	adds	r3, r7, r1
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	801a      	strh	r2, [r3, #0]
 8004dbc:	e072      	b.n	8004ea4 <USB_EPStartXfer+0x11f8>
 8004dbe:	1d7b      	adds	r3, r7, #5
 8004dc0:	33ff      	adds	r3, #255	@ 0xff
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8004dc6:	d822      	bhi.n	8004e0e <USB_EPStartXfer+0x1162>
 8004dc8:	1d7b      	adds	r3, r7, #5
 8004dca:	33ff      	adds	r3, #255	@ 0xff
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	085b      	lsrs	r3, r3, #1
 8004dd0:	21d8      	movs	r1, #216	@ 0xd8
 8004dd2:	187a      	adds	r2, r7, r1
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	1d7b      	adds	r3, r7, #5
 8004dd8:	33ff      	adds	r3, #255	@ 0xff
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	4013      	ands	r3, r2
 8004de0:	d004      	beq.n	8004dec <USB_EPStartXfer+0x1140>
 8004de2:	187b      	adds	r3, r7, r1
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3301      	adds	r3, #1
 8004de8:	187a      	adds	r2, r7, r1
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	21b8      	movs	r1, #184	@ 0xb8
 8004dee:	187b      	adds	r3, r7, r1
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	23d8      	movs	r3, #216	@ 0xd8
 8004df8:	18fb      	adds	r3, r7, r3
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	029b      	lsls	r3, r3, #10
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	4313      	orrs	r3, r2
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	187b      	adds	r3, r7, r1
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	801a      	strh	r2, [r3, #0]
 8004e0c:	e04a      	b.n	8004ea4 <USB_EPStartXfer+0x11f8>
 8004e0e:	1d7b      	adds	r3, r7, #5
 8004e10:	33ff      	adds	r3, #255	@ 0xff
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	095b      	lsrs	r3, r3, #5
 8004e16:	21d8      	movs	r1, #216	@ 0xd8
 8004e18:	187a      	adds	r2, r7, r1
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	1d7b      	adds	r3, r7, #5
 8004e1e:	33ff      	adds	r3, #255	@ 0xff
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	221f      	movs	r2, #31
 8004e24:	4013      	ands	r3, r2
 8004e26:	d104      	bne.n	8004e32 <USB_EPStartXfer+0x1186>
 8004e28:	187b      	adds	r3, r7, r1
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	187a      	adds	r2, r7, r1
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	21b8      	movs	r1, #184	@ 0xb8
 8004e34:	187b      	adds	r3, r7, r1
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	23d8      	movs	r3, #216	@ 0xd8
 8004e3e:	18fb      	adds	r3, r7, r3
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	029b      	lsls	r3, r3, #10
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	4a2b      	ldr	r2, [pc, #172]	@ (8004efc <USB_EPStartXfer+0x1250>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	187b      	adds	r3, r7, r1
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	801a      	strh	r2, [r3, #0]
 8004e58:	e024      	b.n	8004ea4 <USB_EPStartXfer+0x11f8>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	785b      	ldrb	r3, [r3, #1]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d120      	bne.n	8004ea4 <USB_EPStartXfer+0x11f8>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2250      	movs	r2, #80	@ 0x50
 8004e66:	5a9b      	ldrh	r3, [r3, r2]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	001a      	movs	r2, r3
 8004e6c:	21c4      	movs	r1, #196	@ 0xc4
 8004e6e:	187b      	adds	r3, r7, r1
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	189b      	adds	r3, r3, r2
 8004e74:	187a      	adds	r2, r7, r1
 8004e76:	6013      	str	r3, [r2, #0]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	00da      	lsls	r2, r3, #3
 8004e7e:	187b      	adds	r3, r7, r1
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	18d3      	adds	r3, r2, r3
 8004e84:	4a1e      	ldr	r2, [pc, #120]	@ (8004f00 <USB_EPStartXfer+0x1254>)
 8004e86:	4694      	mov	ip, r2
 8004e88:	4463      	add	r3, ip
 8004e8a:	21c0      	movs	r1, #192	@ 0xc0
 8004e8c:	187a      	adds	r2, r7, r1
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	1d7b      	adds	r3, r7, #5
 8004e92:	33ff      	adds	r3, #255	@ 0xff
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	187b      	adds	r3, r7, r1
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	801a      	strh	r2, [r3, #0]
 8004e9e:	e001      	b.n	8004ea4 <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e025      	b.n	8004ef0 <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	18d3      	adds	r3, r2, r3
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	208a      	movs	r0, #138	@ 0x8a
 8004eb4:	183b      	adds	r3, r7, r0
 8004eb6:	4913      	ldr	r1, [pc, #76]	@ (8004f04 <USB_EPStartXfer+0x1258>)
 8004eb8:	400a      	ands	r2, r1
 8004eba:	801a      	strh	r2, [r3, #0]
 8004ebc:	183b      	adds	r3, r7, r0
 8004ebe:	183a      	adds	r2, r7, r0
 8004ec0:	8812      	ldrh	r2, [r2, #0]
 8004ec2:	2180      	movs	r1, #128	@ 0x80
 8004ec4:	0149      	lsls	r1, r1, #5
 8004ec6:	404a      	eors	r2, r1
 8004ec8:	801a      	strh	r2, [r3, #0]
 8004eca:	183b      	adds	r3, r7, r0
 8004ecc:	183a      	adds	r2, r7, r0
 8004ece:	8812      	ldrh	r2, [r2, #0]
 8004ed0:	2180      	movs	r1, #128	@ 0x80
 8004ed2:	0189      	lsls	r1, r1, #6
 8004ed4:	404a      	eors	r2, r1
 8004ed6:	801a      	strh	r2, [r3, #0]
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	18d3      	adds	r3, r2, r3
 8004ee2:	183a      	adds	r2, r7, r0
 8004ee4:	8812      	ldrh	r2, [r2, #0]
 8004ee6:	4908      	ldr	r1, [pc, #32]	@ (8004f08 <USB_EPStartXfer+0x125c>)
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	b292      	uxth	r2, r2
 8004eec:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b043      	add	sp, #268	@ 0x10c
 8004ef6:	bd90      	pop	{r4, r7, pc}
 8004ef8:	00000402 	.word	0x00000402
 8004efc:	ffff8000 	.word	0xffff8000
 8004f00:	00000406 	.word	0x00000406
 8004f04:	ffffbf8f 	.word	0xffffbf8f
 8004f08:	ffff8080 	.word	0xffff8080

08004f0c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	785b      	ldrb	r3, [r3, #1]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d01d      	beq.n	8004f5a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	18d3      	adds	r3, r2, r3
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	200c      	movs	r0, #12
 8004f2e:	183b      	adds	r3, r7, r0
 8004f30:	491b      	ldr	r1, [pc, #108]	@ (8004fa0 <USB_EPSetStall+0x94>)
 8004f32:	400a      	ands	r2, r1
 8004f34:	801a      	strh	r2, [r3, #0]
 8004f36:	183b      	adds	r3, r7, r0
 8004f38:	183a      	adds	r2, r7, r0
 8004f3a:	8812      	ldrh	r2, [r2, #0]
 8004f3c:	2110      	movs	r1, #16
 8004f3e:	404a      	eors	r2, r1
 8004f40:	801a      	strh	r2, [r3, #0]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	18d3      	adds	r3, r2, r3
 8004f4c:	183a      	adds	r2, r7, r0
 8004f4e:	8812      	ldrh	r2, [r2, #0]
 8004f50:	4914      	ldr	r1, [pc, #80]	@ (8004fa4 <USB_EPSetStall+0x98>)
 8004f52:	430a      	orrs	r2, r1
 8004f54:	b292      	uxth	r2, r2
 8004f56:	801a      	strh	r2, [r3, #0]
 8004f58:	e01d      	b.n	8004f96 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	18d3      	adds	r3, r2, r3
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	200e      	movs	r0, #14
 8004f6a:	183b      	adds	r3, r7, r0
 8004f6c:	490e      	ldr	r1, [pc, #56]	@ (8004fa8 <USB_EPSetStall+0x9c>)
 8004f6e:	400a      	ands	r2, r1
 8004f70:	801a      	strh	r2, [r3, #0]
 8004f72:	183b      	adds	r3, r7, r0
 8004f74:	183a      	adds	r2, r7, r0
 8004f76:	8812      	ldrh	r2, [r2, #0]
 8004f78:	2180      	movs	r1, #128	@ 0x80
 8004f7a:	0149      	lsls	r1, r1, #5
 8004f7c:	404a      	eors	r2, r1
 8004f7e:	801a      	strh	r2, [r3, #0]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	18d3      	adds	r3, r2, r3
 8004f8a:	183a      	adds	r2, r7, r0
 8004f8c:	8812      	ldrh	r2, [r2, #0]
 8004f8e:	4905      	ldr	r1, [pc, #20]	@ (8004fa4 <USB_EPSetStall+0x98>)
 8004f90:	430a      	orrs	r2, r1
 8004f92:	b292      	uxth	r2, r2
 8004f94:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	0018      	movs	r0, r3
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	b004      	add	sp, #16
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	ffff8fbf 	.word	0xffff8fbf
 8004fa4:	ffff8080 	.word	0xffff8080
 8004fa8:	ffffbf8f 	.word	0xffffbf8f

08004fac <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	7b1b      	ldrb	r3, [r3, #12]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d000      	beq.n	8004fc0 <USB_EPClearStall+0x14>
 8004fbe:	e095      	b.n	80050ec <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	785b      	ldrb	r3, [r3, #1]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d046      	beq.n	8005056 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	18d2      	adds	r2, r2, r3
 8004fd2:	2110      	movs	r1, #16
 8004fd4:	187b      	adds	r3, r7, r1
 8004fd6:	8812      	ldrh	r2, [r2, #0]
 8004fd8:	801a      	strh	r2, [r3, #0]
 8004fda:	187b      	adds	r3, r7, r1
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	2240      	movs	r2, #64	@ 0x40
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	d016      	beq.n	8005012 <USB_EPClearStall+0x66>
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	18d3      	adds	r3, r2, r3
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	200e      	movs	r0, #14
 8004ff4:	183b      	adds	r3, r7, r0
 8004ff6:	4940      	ldr	r1, [pc, #256]	@ (80050f8 <USB_EPClearStall+0x14c>)
 8004ff8:	400a      	ands	r2, r1
 8004ffa:	801a      	strh	r2, [r3, #0]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	18d3      	adds	r3, r2, r3
 8005006:	183a      	adds	r2, r7, r0
 8005008:	8812      	ldrh	r2, [r2, #0]
 800500a:	493c      	ldr	r1, [pc, #240]	@ (80050fc <USB_EPClearStall+0x150>)
 800500c:	430a      	orrs	r2, r1
 800500e:	b292      	uxth	r2, r2
 8005010:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	78db      	ldrb	r3, [r3, #3]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d068      	beq.n	80050ec <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	18d3      	adds	r3, r2, r3
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	b29a      	uxth	r2, r3
 8005028:	200c      	movs	r0, #12
 800502a:	183b      	adds	r3, r7, r0
 800502c:	4934      	ldr	r1, [pc, #208]	@ (8005100 <USB_EPClearStall+0x154>)
 800502e:	400a      	ands	r2, r1
 8005030:	801a      	strh	r2, [r3, #0]
 8005032:	183b      	adds	r3, r7, r0
 8005034:	183a      	adds	r2, r7, r0
 8005036:	8812      	ldrh	r2, [r2, #0]
 8005038:	2120      	movs	r1, #32
 800503a:	404a      	eors	r2, r1
 800503c:	801a      	strh	r2, [r3, #0]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	18d3      	adds	r3, r2, r3
 8005048:	183a      	adds	r2, r7, r0
 800504a:	8812      	ldrh	r2, [r2, #0]
 800504c:	492d      	ldr	r1, [pc, #180]	@ (8005104 <USB_EPClearStall+0x158>)
 800504e:	430a      	orrs	r2, r1
 8005050:	b292      	uxth	r2, r2
 8005052:	801a      	strh	r2, [r3, #0]
 8005054:	e04a      	b.n	80050ec <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	18d2      	adds	r2, r2, r3
 8005060:	2116      	movs	r1, #22
 8005062:	187b      	adds	r3, r7, r1
 8005064:	8812      	ldrh	r2, [r2, #0]
 8005066:	801a      	strh	r2, [r3, #0]
 8005068:	187b      	adds	r3, r7, r1
 800506a:	881a      	ldrh	r2, [r3, #0]
 800506c:	2380      	movs	r3, #128	@ 0x80
 800506e:	01db      	lsls	r3, r3, #7
 8005070:	4013      	ands	r3, r2
 8005072:	d016      	beq.n	80050a2 <USB_EPClearStall+0xf6>
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	18d3      	adds	r3, r2, r3
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	b29a      	uxth	r2, r3
 8005082:	2014      	movs	r0, #20
 8005084:	183b      	adds	r3, r7, r0
 8005086:	491c      	ldr	r1, [pc, #112]	@ (80050f8 <USB_EPClearStall+0x14c>)
 8005088:	400a      	ands	r2, r1
 800508a:	801a      	strh	r2, [r3, #0]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	18d3      	adds	r3, r2, r3
 8005096:	183a      	adds	r2, r7, r0
 8005098:	8812      	ldrh	r2, [r2, #0]
 800509a:	491b      	ldr	r1, [pc, #108]	@ (8005108 <USB_EPClearStall+0x15c>)
 800509c:	430a      	orrs	r2, r1
 800509e:	b292      	uxth	r2, r2
 80050a0:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	18d3      	adds	r3, r2, r3
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	2012      	movs	r0, #18
 80050b2:	183b      	adds	r3, r7, r0
 80050b4:	4915      	ldr	r1, [pc, #84]	@ (800510c <USB_EPClearStall+0x160>)
 80050b6:	400a      	ands	r2, r1
 80050b8:	801a      	strh	r2, [r3, #0]
 80050ba:	183b      	adds	r3, r7, r0
 80050bc:	183a      	adds	r2, r7, r0
 80050be:	8812      	ldrh	r2, [r2, #0]
 80050c0:	2180      	movs	r1, #128	@ 0x80
 80050c2:	0149      	lsls	r1, r1, #5
 80050c4:	404a      	eors	r2, r1
 80050c6:	801a      	strh	r2, [r3, #0]
 80050c8:	183b      	adds	r3, r7, r0
 80050ca:	183a      	adds	r2, r7, r0
 80050cc:	8812      	ldrh	r2, [r2, #0]
 80050ce:	2180      	movs	r1, #128	@ 0x80
 80050d0:	0189      	lsls	r1, r1, #6
 80050d2:	404a      	eors	r2, r1
 80050d4:	801a      	strh	r2, [r3, #0]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	18d3      	adds	r3, r2, r3
 80050e0:	183a      	adds	r2, r7, r0
 80050e2:	8812      	ldrh	r2, [r2, #0]
 80050e4:	4907      	ldr	r1, [pc, #28]	@ (8005104 <USB_EPClearStall+0x158>)
 80050e6:	430a      	orrs	r2, r1
 80050e8:	b292      	uxth	r2, r2
 80050ea:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	0018      	movs	r0, r3
 80050f0:	46bd      	mov	sp, r7
 80050f2:	b006      	add	sp, #24
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	46c0      	nop			@ (mov r8, r8)
 80050f8:	ffff8f8f 	.word	0xffff8f8f
 80050fc:	ffff80c0 	.word	0xffff80c0
 8005100:	ffff8fbf 	.word	0xffff8fbf
 8005104:	ffff8080 	.word	0xffff8080
 8005108:	ffffc080 	.word	0xffffc080
 800510c:	ffffbf8f 	.word	0xffffbf8f

08005110 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	000a      	movs	r2, r1
 800511a:	1cfb      	adds	r3, r7, #3
 800511c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800511e:	1cfb      	adds	r3, r7, #3
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d103      	bne.n	800512e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	224c      	movs	r2, #76	@ 0x4c
 800512a:	2180      	movs	r1, #128	@ 0x80
 800512c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	0018      	movs	r0, r3
 8005132:	46bd      	mov	sp, r7
 8005134:	b002      	add	sp, #8
 8005136:	bd80      	pop	{r7, pc}

08005138 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2258      	movs	r2, #88	@ 0x58
 8005144:	5a9b      	ldrh	r3, [r3, r2]
 8005146:	b29b      	uxth	r3, r3
 8005148:	4a05      	ldr	r2, [pc, #20]	@ (8005160 <USB_DevConnect+0x28>)
 800514a:	4313      	orrs	r3, r2
 800514c:	b299      	uxth	r1, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2258      	movs	r2, #88	@ 0x58
 8005152:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	0018      	movs	r0, r3
 8005158:	46bd      	mov	sp, r7
 800515a:	b002      	add	sp, #8
 800515c:	bd80      	pop	{r7, pc}
 800515e:	46c0      	nop			@ (mov r8, r8)
 8005160:	ffff8000 	.word	0xffff8000

08005164 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2258      	movs	r2, #88	@ 0x58
 8005170:	5a9b      	ldrh	r3, [r3, r2]
 8005172:	b29b      	uxth	r3, r3
 8005174:	045b      	lsls	r3, r3, #17
 8005176:	0c5b      	lsrs	r3, r3, #17
 8005178:	b299      	uxth	r1, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2258      	movs	r2, #88	@ 0x58
 800517e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	0018      	movs	r0, r3
 8005184:	46bd      	mov	sp, r7
 8005186:	b002      	add	sp, #8
 8005188:	bd80      	pop	{r7, pc}

0800518a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2244      	movs	r2, #68	@ 0x44
 8005196:	5a9b      	ldrh	r3, [r3, r2]
 8005198:	b29b      	uxth	r3, r3
 800519a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800519c:	68fb      	ldr	r3, [r7, #12]
}
 800519e:	0018      	movs	r0, r3
 80051a0:	46bd      	mov	sp, r7
 80051a2:	b004      	add	sp, #16
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b08a      	sub	sp, #40	@ 0x28
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	60f8      	str	r0, [r7, #12]
 80051ae:	60b9      	str	r1, [r7, #8]
 80051b0:	0019      	movs	r1, r3
 80051b2:	1dbb      	adds	r3, r7, #6
 80051b4:	801a      	strh	r2, [r3, #0]
 80051b6:	1d3b      	adds	r3, r7, #4
 80051b8:	1c0a      	adds	r2, r1, #0
 80051ba:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80051bc:	1d3b      	adds	r3, r7, #4
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	3301      	adds	r3, #1
 80051c2:	085b      	lsrs	r3, r3, #1
 80051c4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80051ce:	1dbb      	adds	r3, r7, #6
 80051d0:	881a      	ldrh	r2, [r3, #0]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	18d3      	adds	r3, r2, r3
 80051d6:	2280      	movs	r2, #128	@ 0x80
 80051d8:	00d2      	lsls	r2, r2, #3
 80051da:	4694      	mov	ip, r2
 80051dc:	4463      	add	r3, ip
 80051de:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80051e4:	e020      	b.n	8005228 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	781a      	ldrb	r2, [r3, #0]
 80051ea:	2112      	movs	r1, #18
 80051ec:	187b      	adds	r3, r7, r1
 80051ee:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	3301      	adds	r3, #1
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	b21a      	sxth	r2, r3
 80051fa:	187b      	adds	r3, r7, r1
 80051fc:	2000      	movs	r0, #0
 80051fe:	5e1b      	ldrsh	r3, [r3, r0]
 8005200:	4313      	orrs	r3, r2
 8005202:	b21a      	sxth	r2, r3
 8005204:	187b      	adds	r3, r7, r1
 8005206:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	187a      	adds	r2, r7, r1
 800520c:	8812      	ldrh	r2, [r2, #0]
 800520e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	3302      	adds	r3, #2
 8005214:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	3301      	adds	r3, #1
 800521a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	3301      	adds	r3, #1
 8005220:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005224:	3b01      	subs	r3, #1
 8005226:	627b      	str	r3, [r7, #36]	@ 0x24
 8005228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1db      	bne.n	80051e6 <USB_WritePMA+0x40>
  }
}
 800522e:	46c0      	nop			@ (mov r8, r8)
 8005230:	46c0      	nop			@ (mov r8, r8)
 8005232:	46bd      	mov	sp, r7
 8005234:	b00a      	add	sp, #40	@ 0x28
 8005236:	bd80      	pop	{r7, pc}

08005238 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08a      	sub	sp, #40	@ 0x28
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	0019      	movs	r1, r3
 8005244:	1dbb      	adds	r3, r7, #6
 8005246:	801a      	strh	r2, [r3, #0]
 8005248:	1d3b      	adds	r3, r7, #4
 800524a:	1c0a      	adds	r2, r1, #0
 800524c:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800524e:	1d3b      	adds	r3, r7, #4
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	085b      	lsrs	r3, r3, #1
 8005254:	b29b      	uxth	r3, r3
 8005256:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005260:	1dbb      	adds	r3, r7, #6
 8005262:	881a      	ldrh	r2, [r3, #0]
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	18d3      	adds	r3, r2, r3
 8005268:	2280      	movs	r2, #128	@ 0x80
 800526a:	00d2      	lsls	r2, r2, #3
 800526c:	4694      	mov	ip, r2
 800526e:	4463      	add	r3, ip
 8005270:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	627b      	str	r3, [r7, #36]	@ 0x24
 8005276:	e018      	b.n	80052aa <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	b29b      	uxth	r3, r3
 800527e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	3302      	adds	r3, #2
 8005284:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	b2da      	uxtb	r2, r3
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	3301      	adds	r3, #1
 8005292:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	0a1b      	lsrs	r3, r3, #8
 8005298:	b2da      	uxtb	r2, r3
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	3301      	adds	r3, #1
 80052a2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80052a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a6:	3b01      	subs	r3, #1
 80052a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80052aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1e3      	bne.n	8005278 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80052b0:	1d3b      	adds	r3, r7, #4
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	2201      	movs	r2, #1
 80052b6:	4013      	ands	r3, r2
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d007      	beq.n	80052ce <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	701a      	strb	r2, [r3, #0]
  }
}
 80052ce:	46c0      	nop			@ (mov r8, r8)
 80052d0:	46bd      	mov	sp, r7
 80052d2:	b00a      	add	sp, #40	@ 0x28
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <__NVIC_SystemReset>:
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80052dc:	f3bf 8f4f 	dsb	sy
}
 80052e0:	46c0      	nop			@ (mov r8, r8)
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052e2:	4b04      	ldr	r3, [pc, #16]	@ (80052f4 <__NVIC_SystemReset+0x1c>)
 80052e4:	4a04      	ldr	r2, [pc, #16]	@ (80052f8 <__NVIC_SystemReset+0x20>)
 80052e6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80052e8:	f3bf 8f4f 	dsb	sy
}
 80052ec:	46c0      	nop			@ (mov r8, r8)
    __NOP();
 80052ee:	46c0      	nop			@ (mov r8, r8)
 80052f0:	e7fd      	b.n	80052ee <__NVIC_SystemReset+0x16>
 80052f2:	46c0      	nop			@ (mov r8, r8)
 80052f4:	e000ed00 	.word	0xe000ed00
 80052f8:	05fa0004 	.word	0x05fa0004

080052fc <USBD_DFU_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_Init(USBD_HandleTypeDef *pdev,
                              uint8_t cfgidx)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	000a      	movs	r2, r1
 8005306:	1cfb      	adds	r3, r7, #3
 8005308:	701a      	strb	r2, [r3, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 800530a:	4b2b      	ldr	r3, [pc, #172]	@ (80053b8 <USBD_DFU_Init+0xbc>)
 800530c:	0018      	movs	r0, r3
 800530e:	f002 ff23 	bl	8008158 <USBD_static_malloc>
 8005312:	0001      	movs	r1, r0
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	23ae      	movs	r3, #174	@ 0xae
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	23ae      	movs	r3, #174	@ 0xae
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	58d3      	ldr	r3, [r2, r3]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <USBD_DFU_Init+0x30>
  {
    return USBD_FAIL;
 8005328:	2302      	movs	r3, #2
 800532a:	e040      	b.n	80053ae <USBD_DFU_Init+0xb2>
  }
  else
  {
    hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	23ae      	movs	r3, #174	@ 0xae
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	58d3      	ldr	r3, [r2, r3]
 8005334:	60fb      	str	r3, [r7, #12]

    hdfu->alt_setting = 0U;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4a20      	ldr	r2, [pc, #128]	@ (80053bc <USBD_DFU_Init+0xc0>)
 800533a:	2100      	movs	r1, #0
 800533c:	5099      	str	r1, [r3, r2]
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	4a1f      	ldr	r2, [pc, #124]	@ (80053c0 <USBD_DFU_Init+0xc4>)
 8005342:	4920      	ldr	r1, [pc, #128]	@ (80053c4 <USBD_DFU_Init+0xc8>)
 8005344:	5099      	str	r1, [r3, r2]
    hdfu->wblock_num = 0U;
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	2380      	movs	r3, #128	@ 0x80
 800534a:	015b      	lsls	r3, r3, #5
 800534c:	2100      	movs	r1, #0
 800534e:	50d1      	str	r1, [r2, r3]
    hdfu->wlength = 0U;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4a1d      	ldr	r2, [pc, #116]	@ (80053c8 <USBD_DFU_Init+0xcc>)
 8005354:	2100      	movs	r1, #0
 8005356:	5099      	str	r1, [r3, r2]

    hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4a1c      	ldr	r2, [pc, #112]	@ (80053cc <USBD_DFU_Init+0xd0>)
 800535c:	2100      	movs	r1, #0
 800535e:	5499      	strb	r1, [r3, r2]
    hdfu->dev_state = DFU_STATE_IDLE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4a1b      	ldr	r2, [pc, #108]	@ (80053d0 <USBD_DFU_Init+0xd4>)
 8005364:	2102      	movs	r1, #2
 8005366:	5499      	strb	r1, [r3, r2]

    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4a1a      	ldr	r2, [pc, #104]	@ (80053d4 <USBD_DFU_Init+0xd8>)
 800536c:	2100      	movs	r1, #0
 800536e:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[1] = 0U;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4a19      	ldr	r2, [pc, #100]	@ (80053d8 <USBD_DFU_Init+0xdc>)
 8005374:	2100      	movs	r1, #0
 8005376:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[2] = 0U;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4a18      	ldr	r2, [pc, #96]	@ (80053dc <USBD_DFU_Init+0xe0>)
 800537c:	2100      	movs	r1, #0
 800537e:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[3] = 0U;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4a17      	ldr	r2, [pc, #92]	@ (80053e0 <USBD_DFU_Init+0xe4>)
 8005384:	2100      	movs	r1, #0
 8005386:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[4] = DFU_STATE_IDLE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4a16      	ldr	r2, [pc, #88]	@ (80053e4 <USBD_DFU_Init+0xe8>)
 800538c:	2102      	movs	r1, #2
 800538e:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[5] = 0U;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4a15      	ldr	r2, [pc, #84]	@ (80053e8 <USBD_DFU_Init+0xec>)
 8005394:	2100      	movs	r1, #0
 8005396:	5499      	strb	r1, [r3, r2]

    /* Initialize Hardware layer */
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	23af      	movs	r3, #175	@ 0xaf
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	58d3      	ldr	r3, [r2, r3]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	4798      	blx	r3
 80053a4:	1e03      	subs	r3, r0, #0
 80053a6:	d001      	beq.n	80053ac <USBD_DFU_Init+0xb0>
    {
      return USBD_FAIL;
 80053a8:	2302      	movs	r3, #2
 80053aa:	e000      	b.n	80053ae <USBD_DFU_Init+0xb2>
    }
  }
  return USBD_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	0018      	movs	r0, r3
 80053b0:	46bd      	mov	sp, r7
 80053b2:	b004      	add	sp, #16
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	46c0      	nop			@ (mov r8, r8)
 80053b8:	0000101c 	.word	0x0000101c
 80053bc:	0000100c 	.word	0x0000100c
 80053c0:	00001008 	.word	0x00001008
 80053c4:	08009000 	.word	0x08009000
 80053c8:	00001004 	.word	0x00001004
 80053cc:	00001019 	.word	0x00001019
 80053d0:	00001018 	.word	0x00001018
 80053d4:	00001010 	.word	0x00001010
 80053d8:	00001011 	.word	0x00001011
 80053dc:	00001012 	.word	0x00001012
 80053e0:	00001013 	.word	0x00001013
 80053e4:	00001014 	.word	0x00001014
 80053e8:	00001015 	.word	0x00001015

080053ec <USBD_DFU_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	000a      	movs	r2, r1
 80053f6:	1cfb      	adds	r3, r7, #3
 80053f8:	701a      	strb	r2, [r3, #0]
  USBD_DFU_HandleTypeDef   *hdfu;
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	23ae      	movs	r3, #174	@ 0xae
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	58d3      	ldr	r3, [r2, r3]
 8005402:	60fb      	str	r3, [r7, #12]

  hdfu->wblock_num = 0U;
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	2380      	movs	r3, #128	@ 0x80
 8005408:	015b      	lsls	r3, r3, #5
 800540a:	2100      	movs	r1, #0
 800540c:	50d1      	str	r1, [r2, r3]
  hdfu->wlength = 0U;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4a15      	ldr	r2, [pc, #84]	@ (8005468 <USBD_DFU_DeInit+0x7c>)
 8005412:	2100      	movs	r1, #0
 8005414:	5099      	str	r1, [r3, r2]

  hdfu->dev_state = DFU_STATE_IDLE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4a14      	ldr	r2, [pc, #80]	@ (800546c <USBD_DFU_DeInit+0x80>)
 800541a:	2102      	movs	r1, #2
 800541c:	5499      	strb	r1, [r3, r2]
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4a13      	ldr	r2, [pc, #76]	@ (8005470 <USBD_DFU_DeInit+0x84>)
 8005422:	2100      	movs	r1, #0
 8005424:	5499      	strb	r1, [r3, r2]
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4a12      	ldr	r2, [pc, #72]	@ (8005474 <USBD_DFU_DeInit+0x88>)
 800542a:	2102      	movs	r1, #2
 800542c:	5499      	strb	r1, [r3, r2]

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	23ae      	movs	r3, #174	@ 0xae
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	58d3      	ldr	r3, [r2, r3]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d011      	beq.n	800545e <USBD_DFU_DeInit+0x72>
  {
    /* De-Initialize Hardware layer */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	23af      	movs	r3, #175	@ 0xaf
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	58d3      	ldr	r3, [r2, r3]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	23ae      	movs	r3, #174	@ 0xae
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	58d3      	ldr	r3, [r2, r3]
 800544e:	0018      	movs	r0, r3
 8005450:	f002 fe8e 	bl	8008170 <USBD_static_free>
    pdev->pClassData = NULL;
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	23ae      	movs	r3, #174	@ 0xae
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	2100      	movs	r1, #0
 800545c:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	0018      	movs	r0, r3
 8005462:	46bd      	mov	sp, r7
 8005464:	b004      	add	sp, #16
 8005466:	bd80      	pop	{r7, pc}
 8005468:	00001004 	.word	0x00001004
 800546c:	00001018 	.word	0x00001018
 8005470:	00001010 	.word	0x00001010
 8005474:	00001014 	.word	0x00001014

08005478 <USBD_GetMSDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetMSDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005478:	b590      	push	{r4, r7, lr}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005482:	2316      	movs	r3, #22
 8005484:	18fb      	adds	r3, r7, r3
 8005486:	2200      	movs	r2, #0
 8005488:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800548a:	2300      	movs	r3, #0
 800548c:	613b      	str	r3, [r7, #16]
  uint8_t err = 0U;
 800548e:	230f      	movs	r3, #15
 8005490:	18fb      	adds	r3, r7, r3
 8005492:	2200      	movs	r2, #0
 8005494:	701a      	strb	r2, [r3, #0]


  switch (req->wValue >> 8)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	885b      	ldrh	r3, [r3, #2]
 800549a:	0a1b      	lsrs	r3, r3, #8
 800549c:	b29b      	uxth	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d132      	bne.n	8005508 <USBD_GetMSDescriptor+0x90>
  {
    case 0x00:
        if(0x00 == (uint8_t)(req->wValue) || 0x01 == (uint8_t)(req->wValue) ){//device or interface
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	885b      	ldrh	r3, [r3, #2]
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d004      	beq.n	80054b6 <USBD_GetMSDescriptor+0x3e>
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	885b      	ldrh	r3, [r3, #2]
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d11b      	bne.n	80054ee <USBD_GetMSDescriptor+0x76>
            switch(req->wIndex){
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	889b      	ldrh	r3, [r3, #4]
 80054ba:	2b05      	cmp	r3, #5
 80054bc:	d00b      	beq.n	80054d6 <USBD_GetMSDescriptor+0x5e>
 80054be:	dc11      	bgt.n	80054e4 <USBD_GetMSDescriptor+0x6c>
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d011      	beq.n	80054e8 <USBD_GetMSDescriptor+0x70>
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d10d      	bne.n	80054e4 <USBD_GetMSDescriptor+0x6c>
            case 0x0001://genre
                break;

            case 0x0004://Extended Compact ID
				pbuf = EXTEND_COMPACT_ID_OS_FEAT_DESC;
 80054c8:	4b30      	ldr	r3, [pc, #192]	@ (800558c <USBD_GetMSDescriptor+0x114>)
 80054ca:	613b      	str	r3, [r7, #16]
				len = LEN_EXTEND_COMPACT_ID;
 80054cc:	2316      	movs	r3, #22
 80054ce:	18fb      	adds	r3, r7, r3
 80054d0:	2228      	movs	r2, #40	@ 0x28
 80054d2:	801a      	strh	r2, [r3, #0]
                break;
 80054d4:	e009      	b.n	80054ea <USBD_GetMSDescriptor+0x72>

            case 0x0005://Extended Properties
                pbuf = EXTEND_PROPERTIES_OS_FEAT_DESC;
 80054d6:	4b2e      	ldr	r3, [pc, #184]	@ (8005590 <USBD_GetMSDescriptor+0x118>)
 80054d8:	613b      	str	r3, [r7, #16]
                len = LEN_EXTEND_PROPERTIES;
 80054da:	2316      	movs	r3, #22
 80054dc:	18fb      	adds	r3, r7, r3
 80054de:	228e      	movs	r2, #142	@ 0x8e
 80054e0:	801a      	strh	r2, [r3, #0]
                break;
 80054e2:	e002      	b.n	80054ea <USBD_GetMSDescriptor+0x72>

            default:
                break;
 80054e4:	46c0      	nop			@ (mov r8, r8)
 80054e6:	e000      	b.n	80054ea <USBD_GetMSDescriptor+0x72>
                break;
 80054e8:	46c0      	nop			@ (mov r8, r8)
            switch(req->wIndex){
 80054ea:	46c0      	nop			@ (mov r8, r8)
            }
        }else{
            USBD_CtlError(pdev, req);
            err++;
        }
        break;
 80054ec:	e019      	b.n	8005522 <USBD_GetMSDescriptor+0xaa>
            USBD_CtlError(pdev, req);
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	0011      	movs	r1, r2
 80054f4:	0018      	movs	r0, r3
 80054f6:	f002 f814 	bl	8007522 <USBD_CtlError>
            err++;
 80054fa:	210f      	movs	r1, #15
 80054fc:	187b      	adds	r3, r7, r1
 80054fe:	781a      	ldrb	r2, [r3, #0]
 8005500:	187b      	adds	r3, r7, r1
 8005502:	3201      	adds	r2, #1
 8005504:	701a      	strb	r2, [r3, #0]
        break;
 8005506:	e00c      	b.n	8005522 <USBD_GetMSDescriptor+0xaa>

    default:
      USBD_CtlError(pdev, req);
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	0011      	movs	r1, r2
 800550e:	0018      	movs	r0, r3
 8005510:	f002 f807 	bl	8007522 <USBD_CtlError>
      err++;
 8005514:	210f      	movs	r1, #15
 8005516:	187b      	adds	r3, r7, r1
 8005518:	781a      	ldrb	r2, [r3, #0]
 800551a:	187b      	adds	r3, r7, r1
 800551c:	3201      	adds	r2, #1
 800551e:	701a      	strb	r2, [r3, #0]
      break;
 8005520:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8005522:	230f      	movs	r3, #15
 8005524:	18fb      	adds	r3, r7, r3
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d12a      	bne.n	8005582 <USBD_GetMSDescriptor+0x10a>
  {
    return;
  }

  if (req->wLength != 0U)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	88db      	ldrh	r3, [r3, #6]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d021      	beq.n	8005578 <USBD_GetMSDescriptor+0x100>
  {
    if (len != 0U)
 8005534:	2216      	movs	r2, #22
 8005536:	18bb      	adds	r3, r7, r2
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d015      	beq.n	800556a <USBD_GetMSDescriptor+0xf2>
    {
      len = MIN(len, req->wLength);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	88d9      	ldrh	r1, [r3, #6]
 8005542:	0013      	movs	r3, r2
 8005544:	18fa      	adds	r2, r7, r3
 8005546:	18fb      	adds	r3, r7, r3
 8005548:	1c0c      	adds	r4, r1, #0
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	b298      	uxth	r0, r3
 800554e:	b2a1      	uxth	r1, r4
 8005550:	4288      	cmp	r0, r1
 8005552:	d900      	bls.n	8005556 <USBD_GetMSDescriptor+0xde>
 8005554:	1c23      	adds	r3, r4, #0
 8005556:	8013      	strh	r3, [r2, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005558:	2316      	movs	r3, #22
 800555a:	18fb      	adds	r3, r7, r3
 800555c:	881a      	ldrh	r2, [r3, #0]
 800555e:	6939      	ldr	r1, [r7, #16]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	0018      	movs	r0, r3
 8005564:	f002 f85b 	bl	800761e <USBD_CtlSendData>
 8005568:	e00c      	b.n	8005584 <USBD_GetMSDescriptor+0x10c>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	0011      	movs	r1, r2
 8005570:	0018      	movs	r0, r3
 8005572:	f001 ffd6 	bl	8007522 <USBD_CtlError>
 8005576:	e005      	b.n	8005584 <USBD_GetMSDescriptor+0x10c>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	0018      	movs	r0, r3
 800557c:	f002 f8b9 	bl	80076f2 <USBD_CtlSendStatus>
 8005580:	e000      	b.n	8005584 <USBD_GetMSDescriptor+0x10c>
    return;
 8005582:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005584:	46bd      	mov	sp, r7
 8005586:	b007      	add	sp, #28
 8005588:	bd90      	pop	{r4, r7, pc}
 800558a:	46c0      	nop			@ (mov r8, r8)
 800558c:	20000070 	.word	0x20000070
 8005590:	20000098 	.word	0x20000098

08005594 <USBD_DFU_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_DFU_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;
  uint8_t *pbuf = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	617b      	str	r3, [r7, #20]
  uint16_t len = 0U;
 80055a2:	2312      	movs	r3, #18
 80055a4:	18fb      	adds	r3, r7, r3
 80055a6:	2200      	movs	r2, #0
 80055a8:	801a      	strh	r2, [r3, #0]
  uint16_t status_info = 0U;
 80055aa:	230a      	movs	r3, #10
 80055ac:	18fb      	adds	r3, r7, r3
 80055ae:	2200      	movs	r2, #0
 80055b0:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80055b2:	2311      	movs	r3, #17
 80055b4:	18fb      	adds	r3, r7, r3
 80055b6:	2200      	movs	r2, #0
 80055b8:	701a      	strb	r2, [r3, #0]

  // MAMIEL START
  //MS OS String Descriptor
    if(0xC0 == req->bmRequest || 0xC1 == req->bmRequest){
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2bc0      	cmp	r3, #192	@ 0xc0
 80055c0:	d003      	beq.n	80055ca <USBD_DFU_Setup+0x36>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	2bc1      	cmp	r3, #193	@ 0xc1
 80055c8:	d10f      	bne.n	80055ea <USBD_DFU_Setup+0x56>
  	  if(MS_VENDER_CODE == req->bRequest){
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	785b      	ldrb	r3, [r3, #1]
 80055ce:	2bbe      	cmp	r3, #190	@ 0xbe
 80055d0:	d109      	bne.n	80055e6 <USBD_DFU_Setup+0x52>
  		  USBD_GetMSDescriptor(pdev, req);
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	0011      	movs	r1, r2
 80055d8:	0018      	movs	r0, r3
 80055da:	f7ff ff4d 	bl	8005478 <USBD_GetMSDescriptor>
  		  return ret;
 80055de:	2311      	movs	r3, #17
 80055e0:	18fb      	adds	r3, r7, r3
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	e0ec      	b.n	80057c0 <USBD_DFU_Setup+0x22c>
  	  }
  	  return (uint8_t)USBD_FAIL;
 80055e6:	2302      	movs	r3, #2
 80055e8:	e0ea      	b.n	80057c0 <USBD_DFU_Setup+0x22c>
    }
  // MAMIEL END

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	23ae      	movs	r3, #174	@ 0xae
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	58d3      	ldr	r3, [r2, r3]
 80055f2:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	001a      	movs	r2, r3
 80055fa:	2360      	movs	r3, #96	@ 0x60
 80055fc:	4013      	ands	r3, r2
 80055fe:	d040      	beq.n	8005682 <USBD_DFU_Setup+0xee>
 8005600:	2b20      	cmp	r3, #32
 8005602:	d000      	beq.n	8005606 <USBD_DFU_Setup+0x72>
 8005604:	e0ce      	b.n	80057a4 <USBD_DFU_Setup+0x210>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	785b      	ldrb	r3, [r3, #1]
 800560a:	2b06      	cmp	r3, #6
 800560c:	d82d      	bhi.n	800566a <USBD_DFU_Setup+0xd6>
 800560e:	009a      	lsls	r2, r3, #2
 8005610:	4b6d      	ldr	r3, [pc, #436]	@ (80057c8 <USBD_DFU_Setup+0x234>)
 8005612:	18d3      	adds	r3, r2, r3
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	469f      	mov	pc, r3
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	0011      	movs	r1, r2
 800561e:	0018      	movs	r0, r3
 8005620:	f000 faea 	bl	8005bf8 <DFU_Download>
          break;
 8005624:	e02c      	b.n	8005680 <USBD_DFU_Setup+0xec>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	0011      	movs	r1, r2
 800562c:	0018      	movs	r0, r3
 800562e:	f000 fb61 	bl	8005cf4 <DFU_Upload>
          break;
 8005632:	e025      	b.n	8005680 <USBD_DFU_Setup+0xec>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	0018      	movs	r0, r3
 8005638:	f000 fc4e 	bl	8005ed8 <DFU_GetStatus>
          break;
 800563c:	e020      	b.n	8005680 <USBD_DFU_Setup+0xec>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	0018      	movs	r0, r3
 8005642:	f000 fd13 	bl	800606c <DFU_ClearStatus>
          break;
 8005646:	e01b      	b.n	8005680 <USBD_DFU_Setup+0xec>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	0018      	movs	r0, r3
 800564c:	f000 fd6c 	bl	8006128 <DFU_GetState>
          break;
 8005650:	e016      	b.n	8005680 <USBD_DFU_Setup+0xec>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	0018      	movs	r0, r3
 8005656:	f000 fd7f 	bl	8006158 <DFU_Abort>
          break;
 800565a:	e011      	b.n	8005680 <USBD_DFU_Setup+0xec>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	0011      	movs	r1, r2
 8005662:	0018      	movs	r0, r3
 8005664:	f000 fa54 	bl	8005b10 <DFU_Detach>
          break;
 8005668:	e00a      	b.n	8005680 <USBD_DFU_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	0011      	movs	r1, r2
 8005670:	0018      	movs	r0, r3
 8005672:	f001 ff56 	bl	8007522 <USBD_CtlError>
          ret = USBD_FAIL;
 8005676:	2311      	movs	r3, #17
 8005678:	18fb      	adds	r3, r7, r3
 800567a:	2202      	movs	r2, #2
 800567c:	701a      	strb	r2, [r3, #0]
          break;
 800567e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8005680:	e09b      	b.n	80057ba <USBD_DFU_Setup+0x226>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	785b      	ldrb	r3, [r3, #1]
 8005686:	2b0b      	cmp	r3, #11
 8005688:	d057      	beq.n	800573a <USBD_DFU_Setup+0x1a6>
 800568a:	dd00      	ble.n	800568e <USBD_DFU_Setup+0xfa>
 800568c:	e07e      	b.n	800578c <USBD_DFU_Setup+0x1f8>
 800568e:	2b0a      	cmp	r3, #10
 8005690:	d039      	beq.n	8005706 <USBD_DFU_Setup+0x172>
 8005692:	dd00      	ble.n	8005696 <USBD_DFU_Setup+0x102>
 8005694:	e07a      	b.n	800578c <USBD_DFU_Setup+0x1f8>
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <USBD_DFU_Setup+0x10c>
 800569a:	2b06      	cmp	r3, #6
 800569c:	d019      	beq.n	80056d2 <USBD_DFU_Setup+0x13e>
 800569e:	e075      	b.n	800578c <USBD_DFU_Setup+0x1f8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	23a7      	movs	r3, #167	@ 0xa7
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	5cd3      	ldrb	r3, [r2, r3]
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d107      	bne.n	80056bc <USBD_DFU_Setup+0x128>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80056ac:	230a      	movs	r3, #10
 80056ae:	18f9      	adds	r1, r7, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	0018      	movs	r0, r3
 80056b6:	f001 ffb2 	bl	800761e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056ba:	e072      	b.n	80057a2 <USBD_DFU_Setup+0x20e>
            USBD_CtlError(pdev, req);
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	0011      	movs	r1, r2
 80056c2:	0018      	movs	r0, r3
 80056c4:	f001 ff2d 	bl	8007522 <USBD_CtlError>
            ret = USBD_FAIL;
 80056c8:	2311      	movs	r3, #17
 80056ca:	18fb      	adds	r3, r7, r3
 80056cc:	2202      	movs	r2, #2
 80056ce:	701a      	strb	r2, [r3, #0]
          break;
 80056d0:	e067      	b.n	80057a2 <USBD_DFU_Setup+0x20e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	885b      	ldrh	r3, [r3, #2]
 80056d6:	0a1b      	lsrs	r3, r3, #8
 80056d8:	b29b      	uxth	r3, r3
 80056da:	2b21      	cmp	r3, #33	@ 0x21
 80056dc:	d10a      	bne.n	80056f4 <USBD_DFU_Setup+0x160>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 80056de:	4b3b      	ldr	r3, [pc, #236]	@ (80057cc <USBD_DFU_Setup+0x238>)
 80056e0:	617b      	str	r3, [r7, #20]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	88db      	ldrh	r3, [r3, #6]
 80056e6:	2212      	movs	r2, #18
 80056e8:	18ba      	adds	r2, r7, r2
 80056ea:	b299      	uxth	r1, r3
 80056ec:	2909      	cmp	r1, #9
 80056ee:	d900      	bls.n	80056f2 <USBD_DFU_Setup+0x15e>
 80056f0:	2309      	movs	r3, #9
 80056f2:	8013      	strh	r3, [r2, #0]
          }

          USBD_CtlSendData(pdev, pbuf, len);
 80056f4:	2312      	movs	r3, #18
 80056f6:	18fb      	adds	r3, r7, r3
 80056f8:	881a      	ldrh	r2, [r3, #0]
 80056fa:	6979      	ldr	r1, [r7, #20]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	0018      	movs	r0, r3
 8005700:	f001 ff8d 	bl	800761e <USBD_CtlSendData>
          break;
 8005704:	e04d      	b.n	80057a2 <USBD_DFU_Setup+0x20e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	23a7      	movs	r3, #167	@ 0xa7
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	5cd3      	ldrb	r3, [r2, r3]
 800570e:	2b03      	cmp	r3, #3
 8005710:	d108      	bne.n	8005724 <USBD_DFU_Setup+0x190>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4a2e      	ldr	r2, [pc, #184]	@ (80057d0 <USBD_DFU_Setup+0x23c>)
 8005716:	1899      	adds	r1, r3, r2
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	0018      	movs	r0, r3
 800571e:	f001 ff7e 	bl	800761e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005722:	e03e      	b.n	80057a2 <USBD_DFU_Setup+0x20e>
            USBD_CtlError(pdev, req);
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	0011      	movs	r1, r2
 800572a:	0018      	movs	r0, r3
 800572c:	f001 fef9 	bl	8007522 <USBD_CtlError>
            ret = USBD_FAIL;
 8005730:	2311      	movs	r3, #17
 8005732:	18fb      	adds	r3, r7, r3
 8005734:	2202      	movs	r2, #2
 8005736:	701a      	strb	r2, [r3, #0]
          break;
 8005738:	e033      	b.n	80057a2 <USBD_DFU_Setup+0x20e>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	885b      	ldrh	r3, [r3, #2]
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d118      	bne.n	8005776 <USBD_DFU_Setup+0x1e2>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	23a7      	movs	r3, #167	@ 0xa7
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	5cd3      	ldrb	r3, [r2, r3]
 800574c:	2b03      	cmp	r3, #3
 800574e:	d107      	bne.n	8005760 <USBD_DFU_Setup+0x1cc>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	885b      	ldrh	r3, [r3, #2]
 8005754:	b2db      	uxtb	r3, r3
 8005756:	0019      	movs	r1, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4a1d      	ldr	r2, [pc, #116]	@ (80057d0 <USBD_DFU_Setup+0x23c>)
 800575c:	5099      	str	r1, [r3, r2]
          {
            /* Call the error management function (command will be nacked */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800575e:	e020      	b.n	80057a2 <USBD_DFU_Setup+0x20e>
              USBD_CtlError(pdev, req);
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	0011      	movs	r1, r2
 8005766:	0018      	movs	r0, r3
 8005768:	f001 fedb 	bl	8007522 <USBD_CtlError>
              ret = USBD_FAIL;
 800576c:	2311      	movs	r3, #17
 800576e:	18fb      	adds	r3, r7, r3
 8005770:	2202      	movs	r2, #2
 8005772:	701a      	strb	r2, [r3, #0]
          break;
 8005774:	e015      	b.n	80057a2 <USBD_DFU_Setup+0x20e>
            USBD_CtlError(pdev, req);
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	0011      	movs	r1, r2
 800577c:	0018      	movs	r0, r3
 800577e:	f001 fed0 	bl	8007522 <USBD_CtlError>
            ret = USBD_FAIL;
 8005782:	2311      	movs	r3, #17
 8005784:	18fb      	adds	r3, r7, r3
 8005786:	2202      	movs	r2, #2
 8005788:	701a      	strb	r2, [r3, #0]
          break;
 800578a:	e00a      	b.n	80057a2 <USBD_DFU_Setup+0x20e>

        default:
          USBD_CtlError(pdev, req);
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	0011      	movs	r1, r2
 8005792:	0018      	movs	r0, r3
 8005794:	f001 fec5 	bl	8007522 <USBD_CtlError>
          ret = USBD_FAIL;
 8005798:	2311      	movs	r3, #17
 800579a:	18fb      	adds	r3, r7, r3
 800579c:	2202      	movs	r2, #2
 800579e:	701a      	strb	r2, [r3, #0]
          break;
 80057a0:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80057a2:	e00a      	b.n	80057ba <USBD_DFU_Setup+0x226>

    default:
      USBD_CtlError(pdev, req);
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	0011      	movs	r1, r2
 80057aa:	0018      	movs	r0, r3
 80057ac:	f001 feb9 	bl	8007522 <USBD_CtlError>
      ret = USBD_FAIL;
 80057b0:	2311      	movs	r3, #17
 80057b2:	18fb      	adds	r3, r7, r3
 80057b4:	2202      	movs	r2, #2
 80057b6:	701a      	strb	r2, [r3, #0]
      break;
 80057b8:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80057ba:	2311      	movs	r3, #17
 80057bc:	18fb      	adds	r3, r7, r3
 80057be:	781b      	ldrb	r3, [r3, #0]
}
 80057c0:	0018      	movs	r0, r3
 80057c2:	46bd      	mov	sp, r7
 80057c4:	b006      	add	sp, #24
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	080082fc 	.word	0x080082fc
 80057cc:	2000005a 	.word	0x2000005a
 80057d0:	0000100c 	.word	0x0000100c

080057d4 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_CfgDesc);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	221b      	movs	r2, #27
 80057e0:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_CfgDesc;
 80057e2:	4b02      	ldr	r3, [pc, #8]	@ (80057ec <USBD_DFU_GetCfgDesc+0x18>)
}
 80057e4:	0018      	movs	r0, r3
 80057e6:	46bd      	mov	sp, r7
 80057e8:	b002      	add	sp, #8
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	20000048 	.word	0x20000048

080057f0 <USBD_DFU_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	000a      	movs	r2, r1
 80057fa:	1cfb      	adds	r3, r7, #3
 80057fc:	701a      	strb	r2, [r3, #0]

  return USBD_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	0018      	movs	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	b002      	add	sp, #8
 8005806:	bd80      	pop	{r7, pc}

08005808 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	0018      	movs	r0, r3
 8005814:	46bd      	mov	sp, r7
 8005816:	b002      	add	sp, #8
 8005818:	bd80      	pop	{r7, pc}
	...

0800581c <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800581c:	b590      	push	{r4, r7, lr}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t addr;
  USBD_SetupReqTypedef     req;
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	23ae      	movs	r3, #174	@ 0xae
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	58d3      	ldr	r3, [r2, r3]
 800582c:	617b      	str	r3, [r7, #20]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	4a72      	ldr	r2, [pc, #456]	@ (80059fc <USBD_DFU_EP0_TxReady+0x1e0>)
 8005832:	5c9b      	ldrb	r3, [r3, r2]
 8005834:	2b04      	cmp	r3, #4
 8005836:	d000      	beq.n	800583a <USBD_DFU_EP0_TxReady+0x1e>
 8005838:	e0d1      	b.n	80059de <USBD_DFU_EP0_TxReady+0x1c2>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	2380      	movs	r3, #128	@ 0x80
 800583e:	015b      	lsls	r3, r3, #5
 8005840:	58d3      	ldr	r3, [r2, r3]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d000      	beq.n	8005848 <USBD_DFU_EP0_TxReady+0x2c>
 8005846:	e089      	b.n	800595c <USBD_DFU_EP0_TxReady+0x140>
    {
      if ((hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1U))
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d105      	bne.n	800585c <USBD_DFU_EP0_TxReady+0x40>
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	4a6b      	ldr	r2, [pc, #428]	@ (8005a00 <USBD_DFU_EP0_TxReady+0x1e4>)
 8005854:	589b      	ldr	r3, [r3, r2]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d100      	bne.n	800585c <USBD_DFU_EP0_TxReady+0x40>
 800585a:	e09f      	b.n	800599c <USBD_DFU_EP0_TxReady+0x180>
      {

      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER) && (hdfu->wlength == 5U))
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b21      	cmp	r3, #33	@ 0x21
 8005862:	d129      	bne.n	80058b8 <USBD_DFU_EP0_TxReady+0x9c>
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	4a66      	ldr	r2, [pc, #408]	@ (8005a00 <USBD_DFU_EP0_TxReady+0x1e4>)
 8005868:	589b      	ldr	r3, [r3, r2]
 800586a:	2b05      	cmp	r3, #5
 800586c:	d124      	bne.n	80058b8 <USBD_DFU_EP0_TxReady+0x9c>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	785b      	ldrb	r3, [r3, #1]
 8005872:	0019      	movs	r1, r3
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	4a63      	ldr	r2, [pc, #396]	@ (8005a04 <USBD_DFU_EP0_TxReady+0x1e8>)
 8005878:	5099      	str	r1, [r3, r2]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	4a61      	ldr	r2, [pc, #388]	@ (8005a04 <USBD_DFU_EP0_TxReady+0x1e8>)
 800587e:	589a      	ldr	r2, [r3, r2]
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	789b      	ldrb	r3, [r3, #2]
 8005884:	021b      	lsls	r3, r3, #8
 8005886:	18d2      	adds	r2, r2, r3
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	495e      	ldr	r1, [pc, #376]	@ (8005a04 <USBD_DFU_EP0_TxReady+0x1e8>)
 800588c:	505a      	str	r2, [r3, r1]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	4a5c      	ldr	r2, [pc, #368]	@ (8005a04 <USBD_DFU_EP0_TxReady+0x1e8>)
 8005892:	589a      	ldr	r2, [r3, r2]
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	78db      	ldrb	r3, [r3, #3]
 8005898:	041b      	lsls	r3, r3, #16
 800589a:	18d2      	adds	r2, r2, r3
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	4959      	ldr	r1, [pc, #356]	@ (8005a04 <USBD_DFU_EP0_TxReady+0x1e8>)
 80058a0:	505a      	str	r2, [r3, r1]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	4a57      	ldr	r2, [pc, #348]	@ (8005a04 <USBD_DFU_EP0_TxReady+0x1e8>)
 80058a6:	589a      	ldr	r2, [r3, r2]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	791b      	ldrb	r3, [r3, #4]
 80058ac:	061b      	lsls	r3, r3, #24
 80058ae:	18d2      	adds	r2, r2, r3
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	4954      	ldr	r1, [pc, #336]	@ (8005a04 <USBD_DFU_EP0_TxReady+0x1e8>)
 80058b4:	505a      	str	r2, [r3, r1]
 80058b6:	e071      	b.n	800599c <USBD_DFU_EP0_TxReady+0x180>
      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_ERASE) && (hdfu->wlength == 5U))
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b41      	cmp	r3, #65	@ 0x41
 80058be:	d136      	bne.n	800592e <USBD_DFU_EP0_TxReady+0x112>
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	4a4f      	ldr	r2, [pc, #316]	@ (8005a00 <USBD_DFU_EP0_TxReady+0x1e4>)
 80058c4:	589b      	ldr	r3, [r3, r2]
 80058c6:	2b05      	cmp	r3, #5
 80058c8:	d131      	bne.n	800592e <USBD_DFU_EP0_TxReady+0x112>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	785b      	ldrb	r3, [r3, #1]
 80058ce:	0019      	movs	r1, r3
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	4a4c      	ldr	r2, [pc, #304]	@ (8005a04 <USBD_DFU_EP0_TxReady+0x1e8>)
 80058d4:	5099      	str	r1, [r3, r2]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	4a4a      	ldr	r2, [pc, #296]	@ (8005a04 <USBD_DFU_EP0_TxReady+0x1e8>)
 80058da:	589a      	ldr	r2, [r3, r2]
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	789b      	ldrb	r3, [r3, #2]
 80058e0:	021b      	lsls	r3, r3, #8
 80058e2:	18d2      	adds	r2, r2, r3
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	4947      	ldr	r1, [pc, #284]	@ (8005a04 <USBD_DFU_EP0_TxReady+0x1e8>)
 80058e8:	505a      	str	r2, [r3, r1]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	4a45      	ldr	r2, [pc, #276]	@ (8005a04 <USBD_DFU_EP0_TxReady+0x1e8>)
 80058ee:	589a      	ldr	r2, [r3, r2]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	78db      	ldrb	r3, [r3, #3]
 80058f4:	041b      	lsls	r3, r3, #16
 80058f6:	18d2      	adds	r2, r2, r3
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	4942      	ldr	r1, [pc, #264]	@ (8005a04 <USBD_DFU_EP0_TxReady+0x1e8>)
 80058fc:	505a      	str	r2, [r3, r1]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	4a40      	ldr	r2, [pc, #256]	@ (8005a04 <USBD_DFU_EP0_TxReady+0x1e8>)
 8005902:	589a      	ldr	r2, [r3, r2]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	791b      	ldrb	r3, [r3, #4]
 8005908:	061b      	lsls	r3, r3, #24
 800590a:	18d2      	adds	r2, r2, r3
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	493d      	ldr	r1, [pc, #244]	@ (8005a04 <USBD_DFU_EP0_TxReady+0x1e8>)
 8005910:	505a      	str	r2, [r3, r1]

        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	23af      	movs	r3, #175	@ 0xaf
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	58d3      	ldr	r3, [r2, r3]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	4939      	ldr	r1, [pc, #228]	@ (8005a04 <USBD_DFU_EP0_TxReady+0x1e8>)
 8005920:	5852      	ldr	r2, [r2, r1]
 8005922:	0010      	movs	r0, r2
 8005924:	4798      	blx	r3
 8005926:	1e03      	subs	r3, r0, #0
 8005928:	d038      	beq.n	800599c <USBD_DFU_EP0_TxReady+0x180>
        {
          return USBD_FAIL;
 800592a:	2302      	movs	r3, #2
 800592c:	e061      	b.n	80059f2 <USBD_DFU_EP0_TxReady+0x1d6>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	4a33      	ldr	r2, [pc, #204]	@ (8005a00 <USBD_DFU_EP0_TxReady+0x1e4>)
 8005932:	2100      	movs	r1, #0
 8005934:	5099      	str	r1, [r3, r2]
        hdfu->wblock_num = 0U;
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	2380      	movs	r3, #128	@ 0x80
 800593a:	015b      	lsls	r3, r3, #5
 800593c:	2100      	movs	r1, #0
 800593e:	50d1      	str	r1, [r2, r3]
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 8005940:	2108      	movs	r1, #8
 8005942:	187b      	adds	r3, r7, r1
 8005944:	2200      	movs	r2, #0
 8005946:	701a      	strb	r2, [r3, #0]
        req.wLength = 1U;
 8005948:	187b      	adds	r3, r7, r1
 800594a:	2201      	movs	r2, #1
 800594c:	80da      	strh	r2, [r3, #6]
        USBD_CtlError(pdev, &req);
 800594e:	187a      	adds	r2, r7, r1
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	0011      	movs	r1, r2
 8005954:	0018      	movs	r0, r3
 8005956:	f001 fde4 	bl	8007522 <USBD_CtlError>
 800595a:	e01f      	b.n	800599c <USBD_DFU_EP0_TxReady+0x180>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	2380      	movs	r3, #128	@ 0x80
 8005960:	015b      	lsls	r3, r3, #5
 8005962:	58d3      	ldr	r3, [r2, r3]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d919      	bls.n	800599c <USBD_DFU_EP0_TxReady+0x180>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	2380      	movs	r3, #128	@ 0x80
 800596c:	015b      	lsls	r3, r3, #5
 800596e:	58d3      	ldr	r3, [r2, r3]
 8005970:	3b02      	subs	r3, #2
 8005972:	031a      	lsls	r2, r3, #12
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	4923      	ldr	r1, [pc, #140]	@ (8005a04 <USBD_DFU_EP0_TxReady+0x1e8>)
 8005978:	585b      	ldr	r3, [r3, r1]
 800597a:	18d3      	adds	r3, r2, r3
 800597c:	613b      	str	r3, [r7, #16]

        /* Preform the write operation */
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	23af      	movs	r3, #175	@ 0xaf
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	58d3      	ldr	r3, [r2, r3]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	6978      	ldr	r0, [r7, #20]
 800598a:	6939      	ldr	r1, [r7, #16]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	4c1c      	ldr	r4, [pc, #112]	@ (8005a00 <USBD_DFU_EP0_TxReady+0x1e4>)
 8005990:	5912      	ldr	r2, [r2, r4]
 8005992:	4798      	blx	r3
 8005994:	1e03      	subs	r3, r0, #0
 8005996:	d001      	beq.n	800599c <USBD_DFU_EP0_TxReady+0x180>
                                                              (uint8_t *)addr, hdfu->wlength) != USBD_OK)
        {
          return USBD_FAIL;
 8005998:	2302      	movs	r3, #2
 800599a:	e02a      	b.n	80059f2 <USBD_DFU_EP0_TxReady+0x1d6>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	4a18      	ldr	r2, [pc, #96]	@ (8005a00 <USBD_DFU_EP0_TxReady+0x1e4>)
 80059a0:	2100      	movs	r1, #0
 80059a2:	5099      	str	r1, [r3, r2]
    hdfu->wblock_num = 0U;
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	2380      	movs	r3, #128	@ 0x80
 80059a8:	015b      	lsls	r3, r3, #5
 80059aa:	2100      	movs	r1, #0
 80059ac:	50d1      	str	r1, [r2, r3]

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	4a12      	ldr	r2, [pc, #72]	@ (80059fc <USBD_DFU_EP0_TxReady+0x1e0>)
 80059b2:	2103      	movs	r1, #3
 80059b4:	5499      	strb	r1, [r3, r2]

    hdfu->dev_status[1] = 0U;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	4a13      	ldr	r2, [pc, #76]	@ (8005a08 <USBD_DFU_EP0_TxReady+0x1ec>)
 80059ba:	2100      	movs	r1, #0
 80059bc:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[2] = 0U;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	4a12      	ldr	r2, [pc, #72]	@ (8005a0c <USBD_DFU_EP0_TxReady+0x1f0>)
 80059c2:	2100      	movs	r1, #0
 80059c4:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[3] = 0U;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	4a11      	ldr	r2, [pc, #68]	@ (8005a10 <USBD_DFU_EP0_TxReady+0x1f4>)
 80059ca:	2100      	movs	r1, #0
 80059cc:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[4] = hdfu->dev_state;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	4a0a      	ldr	r2, [pc, #40]	@ (80059fc <USBD_DFU_EP0_TxReady+0x1e0>)
 80059d2:	5c99      	ldrb	r1, [r3, r2]
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	4a0f      	ldr	r2, [pc, #60]	@ (8005a14 <USBD_DFU_EP0_TxReady+0x1f8>)
 80059d8:	5499      	strb	r1, [r3, r2]
    return USBD_OK;
 80059da:	2300      	movs	r3, #0
 80059dc:	e009      	b.n	80059f2 <USBD_DFU_EP0_TxReady+0x1d6>
  }
  else
  {
    if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	4a06      	ldr	r2, [pc, #24]	@ (80059fc <USBD_DFU_EP0_TxReady+0x1e0>)
 80059e2:	5c9b      	ldrb	r3, [r3, r2]
 80059e4:	2b07      	cmp	r3, #7
 80059e6:	d103      	bne.n	80059f0 <USBD_DFU_EP0_TxReady+0x1d4>
    {
      /* Start leaving DFU mode */
      DFU_Leave(pdev);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	0018      	movs	r0, r3
 80059ec:	f000 fc12 	bl	8006214 <DFU_Leave>
    }
  }

  return USBD_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	0018      	movs	r0, r3
 80059f4:	46bd      	mov	sp, r7
 80059f6:	b007      	add	sp, #28
 80059f8:	bd90      	pop	{r4, r7, pc}
 80059fa:	46c0      	nop			@ (mov r8, r8)
 80059fc:	00001018 	.word	0x00001018
 8005a00:	00001004 	.word	0x00001004
 8005a04:	00001008 	.word	0x00001008
 8005a08:	00001011 	.word	0x00001011
 8005a0c:	00001012 	.word	0x00001012
 8005a10:	00001013 	.word	0x00001013
 8005a14:	00001014 	.word	0x00001014

08005a18 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	0018      	movs	r0, r3
 8005a24:	46bd      	mov	sp, r7
 8005a26:	b002      	add	sp, #8
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <USBD_DFU_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b082      	sub	sp, #8
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	000a      	movs	r2, r1
 8005a34:	1cfb      	adds	r3, r7, #3
 8005a36:	701a      	strb	r2, [r3, #0]

  return USBD_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	b002      	add	sp, #8
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <USBD_DFU_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	000a      	movs	r2, r1
 8005a4c:	1cfb      	adds	r3, r7, #3
 8005a4e:	701a      	strb	r2, [r3, #0]

  return USBD_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	0018      	movs	r0, r3
 8005a54:	46bd      	mov	sp, r7
 8005a56:	b002      	add	sp, #8
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <USBD_DFU_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataOut(USBD_HandleTypeDef *pdev,
                                 uint8_t epnum)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b082      	sub	sp, #8
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	000a      	movs	r2, r1
 8005a64:	1cfb      	adds	r3, r7, #3
 8005a66:	701a      	strb	r2, [r3, #0]

  return USBD_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	b002      	add	sp, #8
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_DeviceQualifierDesc);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	220a      	movs	r2, #10
 8005a80:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceQualifierDesc;
 8005a82:	4b02      	ldr	r3, [pc, #8]	@ (8005a8c <USBD_DFU_GetDeviceQualifierDesc+0x18>)
}
 8005a84:	0018      	movs	r0, r3
 8005a86:	46bd      	mov	sp, r7
 8005a88:	b002      	add	sp, #8
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	20000064 	.word	0x20000064

08005a90 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	607a      	str	r2, [r7, #4]
 8005a9a:	200b      	movs	r0, #11
 8005a9c:	183b      	adds	r3, r7, r0
 8005a9e:	1c0a      	adds	r2, r1, #0
 8005aa0:	701a      	strb	r2, [r3, #0]
  static uint8_t USBD_StrDesc[255];
  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8005aa2:	183b      	adds	r3, r7, r0
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b06      	cmp	r3, #6
 8005aa8:	d80b      	bhi.n	8005ac2 <USBD_DFU_GetUsrStringDesc+0x32>
  {
    USBD_GetString((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	23af      	movs	r3, #175	@ 0xaf
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	58d3      	ldr	r3, [r2, r3]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	490b      	ldr	r1, [pc, #44]	@ (8005ae4 <USBD_DFU_GetUsrStringDesc+0x54>)
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f001 fd45 	bl	8007548 <USBD_GetString>
    return USBD_StrDesc;
 8005abe:	4b09      	ldr	r3, [pc, #36]	@ (8005ae4 <USBD_DFU_GetUsrStringDesc+0x54>)
 8005ac0:	e00c      	b.n	8005adc <USBD_DFU_GetUsrStringDesc+0x4c>
  }
  else if(0xEE == index)
 8005ac2:	230b      	movs	r3, #11
 8005ac4:	18fb      	adds	r3, r7, r3
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2bee      	cmp	r3, #238	@ 0xee
 8005aca:	d104      	bne.n	8005ad6 <USBD_DFU_GetUsrStringDesc+0x46>
  {
	*length = 0x12;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2212      	movs	r2, #18
 8005ad0:	801a      	strh	r2, [r3, #0]
	return USBD_OS_STRING_DESC;
 8005ad2:	4b05      	ldr	r3, [pc, #20]	@ (8005ae8 <USBD_DFU_GetUsrStringDesc+0x58>)
 8005ad4:	e002      	b.n	8005adc <USBD_DFU_GetUsrStringDesc+0x4c>
  }
  /* Not supported Interface Descriptor index */
  else
  {
	length = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	607b      	str	r3, [r7, #4]
    return NULL;
 8005ada:	2300      	movs	r3, #0
  }
}
 8005adc:	0018      	movs	r0, r3
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	b004      	add	sp, #16
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	200001e8 	.word	0x200001e8
 8005ae8:	20000128 	.word	0x20000128

08005aec <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_DFU_RegisterMedia(USBD_HandleTypeDef   *pdev,
                                USBD_DFU_MediaTypeDef *fops)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d004      	beq.n	8005b06 <USBD_DFU_RegisterMedia+0x1a>
  {
    pdev->pUserData = fops;
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	23af      	movs	r3, #175	@ 0xaf
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	6839      	ldr	r1, [r7, #0]
 8005b04:	50d1      	str	r1, [r2, r3]
  }
  return 0U;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	0018      	movs	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b002      	add	sp, #8
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	23ae      	movs	r3, #174	@ 0xae
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	58d3      	ldr	r3, [r2, r3]
 8005b22:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4a2b      	ldr	r2, [pc, #172]	@ (8005bd4 <DFU_Detach+0xc4>)
 8005b28:	5c9b      	ldrb	r3, [r3, r2]
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d013      	beq.n	8005b56 <DFU_Detach+0x46>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4a28      	ldr	r2, [pc, #160]	@ (8005bd4 <DFU_Detach+0xc4>)
 8005b32:	5c9b      	ldrb	r3, [r3, r2]
 8005b34:	2b03      	cmp	r3, #3
 8005b36:	d00e      	beq.n	8005b56 <DFU_Detach+0x46>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4a26      	ldr	r2, [pc, #152]	@ (8005bd4 <DFU_Detach+0xc4>)
 8005b3c:	5c9b      	ldrb	r3, [r3, r2]
 8005b3e:	2b05      	cmp	r3, #5
 8005b40:	d009      	beq.n	8005b56 <DFU_Detach+0x46>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4a23      	ldr	r2, [pc, #140]	@ (8005bd4 <DFU_Detach+0xc4>)
 8005b46:	5c9b      	ldrb	r3, [r3, r2]
 8005b48:	2b06      	cmp	r3, #6
 8005b4a:	d004      	beq.n	8005b56 <DFU_Detach+0x46>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4a21      	ldr	r2, [pc, #132]	@ (8005bd4 <DFU_Detach+0xc4>)
 8005b50:	5c9b      	ldrb	r3, [r3, r2]
 8005b52:	2b09      	cmp	r3, #9
 8005b54:	d126      	bne.n	8005ba4 <DFU_Detach+0x94>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4a1e      	ldr	r2, [pc, #120]	@ (8005bd4 <DFU_Detach+0xc4>)
 8005b5a:	2102      	movs	r1, #2
 8005b5c:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	4a1d      	ldr	r2, [pc, #116]	@ (8005bd8 <DFU_Detach+0xc8>)
 8005b62:	2100      	movs	r1, #0
 8005b64:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[1] = 0U;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4a1c      	ldr	r2, [pc, #112]	@ (8005bdc <DFU_Detach+0xcc>)
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[2] = 0U;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4a1b      	ldr	r2, [pc, #108]	@ (8005be0 <DFU_Detach+0xd0>)
 8005b72:	2100      	movs	r1, #0
 8005b74:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4a1a      	ldr	r2, [pc, #104]	@ (8005be4 <DFU_Detach+0xd4>)
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[4] = hdfu->dev_state;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4a14      	ldr	r2, [pc, #80]	@ (8005bd4 <DFU_Detach+0xc4>)
 8005b82:	5c99      	ldrb	r1, [r3, r2]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4a18      	ldr	r2, [pc, #96]	@ (8005be8 <DFU_Detach+0xd8>)
 8005b88:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[5] = 0U; /*iString*/
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4a17      	ldr	r2, [pc, #92]	@ (8005bec <DFU_Detach+0xdc>)
 8005b8e:	2100      	movs	r1, #0
 8005b90:	5499      	strb	r1, [r3, r2]
    hdfu->wblock_num = 0U;
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	2380      	movs	r3, #128	@ 0x80
 8005b96:	015b      	lsls	r3, r3, #5
 8005b98:	2100      	movs	r1, #0
 8005b9a:	50d1      	str	r1, [r2, r3]
    hdfu->wlength = 0U;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4a14      	ldr	r2, [pc, #80]	@ (8005bf0 <DFU_Detach+0xe0>)
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	5099      	str	r1, [r3, r2]
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 8005ba4:	4b13      	ldr	r3, [pc, #76]	@ (8005bf4 <DFU_Detach+0xe4>)
 8005ba6:	7d5b      	ldrb	r3, [r3, #21]
 8005ba8:	001a      	movs	r2, r3
 8005baa:	2310      	movs	r3, #16
 8005bac:	4013      	ands	r3, r2
 8005bae:	d008      	beq.n	8005bc2 <DFU_Detach+0xb2>
  {
    /* Perform an Attach-Detach operation on USB bus */
    USBD_Stop(pdev);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	0018      	movs	r0, r3
 8005bb4:	f000 fbea 	bl	800638c <USBD_Stop>
    USBD_Start(pdev);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f000 fbd9 	bl	8006372 <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
  }
}
 8005bc0:	e004      	b.n	8005bcc <DFU_Detach+0xbc>
    USBD_Delay((uint32_t)req->wValue);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	885b      	ldrh	r3, [r3, #2]
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f7fa fccc 	bl	8000564 <HAL_Delay>
}
 8005bcc:	46c0      	nop			@ (mov r8, r8)
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	b004      	add	sp, #16
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	00001018 	.word	0x00001018
 8005bd8:	00001010 	.word	0x00001010
 8005bdc:	00001011 	.word	0x00001011
 8005be0:	00001012 	.word	0x00001012
 8005be4:	00001013 	.word	0x00001013
 8005be8:	00001014 	.word	0x00001014
 8005bec:	00001015 	.word	0x00001015
 8005bf0:	00001004 	.word	0x00001004
 8005bf4:	20000048 	.word	0x20000048

08005bf8 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	23ae      	movs	r3, #174	@ 0xae
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	58d3      	ldr	r3, [r2, r3]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	88db      	ldrh	r3, [r3, #6]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d031      	beq.n	8005c78 <DFU_Download+0x80>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4a30      	ldr	r2, [pc, #192]	@ (8005cd8 <DFU_Download+0xe0>)
 8005c18:	5c9b      	ldrb	r3, [r3, r2]
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d004      	beq.n	8005c28 <DFU_Download+0x30>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4a2d      	ldr	r2, [pc, #180]	@ (8005cd8 <DFU_Download+0xe0>)
 8005c22:	5c9b      	ldrb	r3, [r3, r2]
 8005c24:	2b05      	cmp	r3, #5
 8005c26:	d120      	bne.n	8005c6a <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	885b      	ldrh	r3, [r3, #2]
 8005c2c:	0019      	movs	r1, r3
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	2380      	movs	r3, #128	@ 0x80
 8005c32:	015b      	lsls	r3, r3, #5
 8005c34:	50d1      	str	r1, [r2, r3]
      hdfu->wlength = req->wLength;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	88db      	ldrh	r3, [r3, #6]
 8005c3a:	0019      	movs	r1, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4a27      	ldr	r2, [pc, #156]	@ (8005cdc <DFU_Download+0xe4>)
 8005c40:	5099      	str	r1, [r3, r2]

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4a24      	ldr	r2, [pc, #144]	@ (8005cd8 <DFU_Download+0xe0>)
 8005c46:	2103      	movs	r1, #3
 8005c48:	5499      	strb	r1, [r3, r2]
      hdfu->dev_status[4] = hdfu->dev_state;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4a22      	ldr	r2, [pc, #136]	@ (8005cd8 <DFU_Download+0xe0>)
 8005c4e:	5c99      	ldrb	r1, [r3, r2]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4a23      	ldr	r2, [pc, #140]	@ (8005ce0 <DFU_Download+0xe8>)
 8005c54:	5499      	strb	r1, [r3, r2]

      /* Prepare the reception of the buffer over EP0 */
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8005c56:	68f9      	ldr	r1, [r7, #12]
                        (uint16_t)hdfu->wlength);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4a20      	ldr	r2, [pc, #128]	@ (8005cdc <DFU_Download+0xe4>)
 8005c5c:	589b      	ldr	r3, [r3, r2]
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	0018      	movs	r0, r3
 8005c64:	f001 fd0e 	bl	8007684 <USBD_CtlPrepareRx>
 8005c68:	e032      	b.n	8005cd0 <DFU_Download+0xd8>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	0011      	movs	r1, r2
 8005c70:	0018      	movs	r0, r3
 8005c72:	f001 fc56 	bl	8007522 <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
    }
  }
}
 8005c76:	e02b      	b.n	8005cd0 <DFU_Download+0xd8>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4a17      	ldr	r2, [pc, #92]	@ (8005cd8 <DFU_Download+0xe0>)
 8005c7c:	5c9b      	ldrb	r3, [r3, r2]
 8005c7e:	2b05      	cmp	r3, #5
 8005c80:	d004      	beq.n	8005c8c <DFU_Download+0x94>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4a14      	ldr	r2, [pc, #80]	@ (8005cd8 <DFU_Download+0xe0>)
 8005c86:	5c9b      	ldrb	r3, [r3, r2]
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d11a      	bne.n	8005cc2 <DFU_Download+0xca>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4a15      	ldr	r2, [pc, #84]	@ (8005ce4 <DFU_Download+0xec>)
 8005c90:	2101      	movs	r1, #1
 8005c92:	5499      	strb	r1, [r3, r2]
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4a10      	ldr	r2, [pc, #64]	@ (8005cd8 <DFU_Download+0xe0>)
 8005c98:	2106      	movs	r1, #6
 8005c9a:	5499      	strb	r1, [r3, r2]
      hdfu->dev_status[1] = 0U;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4a12      	ldr	r2, [pc, #72]	@ (8005ce8 <DFU_Download+0xf0>)
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	5499      	strb	r1, [r3, r2]
      hdfu->dev_status[2] = 0U;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4a11      	ldr	r2, [pc, #68]	@ (8005cec <DFU_Download+0xf4>)
 8005ca8:	2100      	movs	r1, #0
 8005caa:	5499      	strb	r1, [r3, r2]
      hdfu->dev_status[3] = 0U;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4a10      	ldr	r2, [pc, #64]	@ (8005cf0 <DFU_Download+0xf8>)
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	5499      	strb	r1, [r3, r2]
      hdfu->dev_status[4] = hdfu->dev_state;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4a08      	ldr	r2, [pc, #32]	@ (8005cd8 <DFU_Download+0xe0>)
 8005cb8:	5c99      	ldrb	r1, [r3, r2]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	4a08      	ldr	r2, [pc, #32]	@ (8005ce0 <DFU_Download+0xe8>)
 8005cbe:	5499      	strb	r1, [r3, r2]
 8005cc0:	e006      	b.n	8005cd0 <DFU_Download+0xd8>
      USBD_CtlError(pdev, req);
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	0011      	movs	r1, r2
 8005cc8:	0018      	movs	r0, r3
 8005cca:	f001 fc2a 	bl	8007522 <USBD_CtlError>
}
 8005cce:	e7ff      	b.n	8005cd0 <DFU_Download+0xd8>
 8005cd0:	46c0      	nop			@ (mov r8, r8)
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	b004      	add	sp, #16
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	00001018 	.word	0x00001018
 8005cdc:	00001004 	.word	0x00001004
 8005ce0:	00001014 	.word	0x00001014
 8005ce4:	00001019 	.word	0x00001019
 8005ce8:	00001011 	.word	0x00001011
 8005cec:	00001012 	.word	0x00001012
 8005cf0:	00001013 	.word	0x00001013

08005cf4 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cf4:	b590      	push	{r4, r7, lr}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	23ae      	movs	r3, #174	@ 0xae
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	58d3      	ldr	r3, [r2, r3]
 8005d06:	617b      	str	r3, [r7, #20]

  uint8_t *phaddr = NULL;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	613b      	str	r3, [r7, #16]
  uint32_t addr = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	88db      	ldrh	r3, [r3, #6]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d100      	bne.n	8005d1a <DFU_Upload+0x26>
 8005d18:	e0b5      	b.n	8005e86 <DFU_Upload+0x192>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	4a67      	ldr	r2, [pc, #412]	@ (8005ebc <DFU_Upload+0x1c8>)
 8005d1e:	5c9b      	ldrb	r3, [r3, r2]
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d005      	beq.n	8005d30 <DFU_Upload+0x3c>
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	4a65      	ldr	r2, [pc, #404]	@ (8005ebc <DFU_Upload+0x1c8>)
 8005d28:	5c9b      	ldrb	r3, [r3, r2]
 8005d2a:	2b09      	cmp	r3, #9
 8005d2c:	d000      	beq.n	8005d30 <DFU_Upload+0x3c>
 8005d2e:	e09a      	b.n	8005e66 <DFU_Upload+0x172>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	885b      	ldrh	r3, [r3, #2]
 8005d34:	0019      	movs	r1, r3
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	2380      	movs	r3, #128	@ 0x80
 8005d3a:	015b      	lsls	r3, r3, #5
 8005d3c:	50d1      	str	r1, [r2, r3]
      hdfu->wlength = req->wLength;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	88db      	ldrh	r3, [r3, #6]
 8005d42:	0019      	movs	r1, r3
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	4a5e      	ldr	r2, [pc, #376]	@ (8005ec0 <DFU_Upload+0x1cc>)
 8005d48:	5099      	str	r1, [r3, r2]

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	2380      	movs	r3, #128	@ 0x80
 8005d4e:	015b      	lsls	r3, r3, #5
 8005d50:	58d3      	ldr	r3, [r2, r3]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d12c      	bne.n	8005db0 <DFU_Upload+0xbc>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	4a59      	ldr	r2, [pc, #356]	@ (8005ec0 <DFU_Upload+0x1cc>)
 8005d5a:	589b      	ldr	r3, [r3, r2]
 8005d5c:	2b03      	cmp	r3, #3
 8005d5e:	d901      	bls.n	8005d64 <DFU_Upload+0x70>
 8005d60:	2102      	movs	r1, #2
 8005d62:	e000      	b.n	8005d66 <DFU_Upload+0x72>
 8005d64:	2109      	movs	r1, #9
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	4a54      	ldr	r2, [pc, #336]	@ (8005ebc <DFU_Upload+0x1c8>)
 8005d6a:	5499      	strb	r1, [r3, r2]

        hdfu->dev_status[1] = 0U;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	4a55      	ldr	r2, [pc, #340]	@ (8005ec4 <DFU_Upload+0x1d0>)
 8005d70:	2100      	movs	r1, #0
 8005d72:	5499      	strb	r1, [r3, r2]
        hdfu->dev_status[2] = 0U;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	4a54      	ldr	r2, [pc, #336]	@ (8005ec8 <DFU_Upload+0x1d4>)
 8005d78:	2100      	movs	r1, #0
 8005d7a:	5499      	strb	r1, [r3, r2]
        hdfu->dev_status[3] = 0U;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	4a53      	ldr	r2, [pc, #332]	@ (8005ecc <DFU_Upload+0x1d8>)
 8005d80:	2100      	movs	r1, #0
 8005d82:	5499      	strb	r1, [r3, r2]
        hdfu->dev_status[4] = hdfu->dev_state;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	4a4d      	ldr	r2, [pc, #308]	@ (8005ebc <DFU_Upload+0x1c8>)
 8005d88:	5c99      	ldrb	r1, [r3, r2]
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	4a50      	ldr	r2, [pc, #320]	@ (8005ed0 <DFU_Upload+0x1dc>)
 8005d8e:	5499      	strb	r1, [r3, r2]

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2200      	movs	r2, #0
 8005d94:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2221      	movs	r2, #33	@ 0x21
 8005d9a:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2241      	movs	r2, #65	@ 0x41
 8005da0:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8005da2:	6979      	ldr	r1, [r7, #20]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2203      	movs	r2, #3
 8005da8:	0018      	movs	r0, r3
 8005daa:	f001 fc38 	bl	800761e <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8005dae:	e081      	b.n	8005eb4 <DFU_Upload+0x1c0>
      }
      else if (hdfu->wblock_num > 1U)
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	2380      	movs	r3, #128	@ 0x80
 8005db4:	015b      	lsls	r3, r3, #5
 8005db6:	58d3      	ldr	r3, [r2, r3]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d937      	bls.n	8005e2c <DFU_Upload+0x138>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	4a3f      	ldr	r2, [pc, #252]	@ (8005ebc <DFU_Upload+0x1c8>)
 8005dc0:	2109      	movs	r1, #9
 8005dc2:	5499      	strb	r1, [r3, r2]

        hdfu->dev_status[1] = 0U;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	4a3f      	ldr	r2, [pc, #252]	@ (8005ec4 <DFU_Upload+0x1d0>)
 8005dc8:	2100      	movs	r1, #0
 8005dca:	5499      	strb	r1, [r3, r2]
        hdfu->dev_status[2] = 0U;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	4a3e      	ldr	r2, [pc, #248]	@ (8005ec8 <DFU_Upload+0x1d4>)
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	5499      	strb	r1, [r3, r2]
        hdfu->dev_status[3] = 0U;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	4a3d      	ldr	r2, [pc, #244]	@ (8005ecc <DFU_Upload+0x1d8>)
 8005dd8:	2100      	movs	r1, #0
 8005dda:	5499      	strb	r1, [r3, r2]
        hdfu->dev_status[4] = hdfu->dev_state;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	4a37      	ldr	r2, [pc, #220]	@ (8005ebc <DFU_Upload+0x1c8>)
 8005de0:	5c99      	ldrb	r1, [r3, r2]
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	4a3a      	ldr	r2, [pc, #232]	@ (8005ed0 <DFU_Upload+0x1dc>)
 8005de6:	5499      	strb	r1, [r3, r2]

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	2380      	movs	r3, #128	@ 0x80
 8005dec:	015b      	lsls	r3, r3, #5
 8005dee:	58d3      	ldr	r3, [r2, r3]
 8005df0:	3b02      	subs	r3, #2
 8005df2:	031a      	lsls	r2, r3, #12
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	4937      	ldr	r1, [pc, #220]	@ (8005ed4 <DFU_Upload+0x1e0>)
 8005df8:	585b      	ldr	r3, [r3, r1]
 8005dfa:	18d3      	adds	r3, r2, r3
 8005dfc:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	23af      	movs	r3, #175	@ 0xaf
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	58d3      	ldr	r3, [r2, r3]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	6979      	ldr	r1, [r7, #20]
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	4c2c      	ldr	r4, [pc, #176]	@ (8005ec0 <DFU_Upload+0x1cc>)
 8005e10:	5912      	ldr	r2, [r2, r4]
 8005e12:	4798      	blx	r3
 8005e14:	0003      	movs	r3, r0
 8005e16:	613b      	str	r3, [r7, #16]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, phaddr, (uint16_t)hdfu->wlength);
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	4a29      	ldr	r2, [pc, #164]	@ (8005ec0 <DFU_Upload+0x1cc>)
 8005e1c:	589b      	ldr	r3, [r3, r2]
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	6939      	ldr	r1, [r7, #16]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	0018      	movs	r0, r3
 8005e26:	f001 fbfa 	bl	800761e <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8005e2a:	e043      	b.n	8005eb4 <DFU_Upload+0x1c0>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	4a23      	ldr	r2, [pc, #140]	@ (8005ebc <DFU_Upload+0x1c8>)
 8005e30:	210f      	movs	r1, #15
 8005e32:	5499      	strb	r1, [r3, r2]

        hdfu->dev_status[1] = 0U;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	4a23      	ldr	r2, [pc, #140]	@ (8005ec4 <DFU_Upload+0x1d0>)
 8005e38:	2100      	movs	r1, #0
 8005e3a:	5499      	strb	r1, [r3, r2]
        hdfu->dev_status[2] = 0U;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	4a22      	ldr	r2, [pc, #136]	@ (8005ec8 <DFU_Upload+0x1d4>)
 8005e40:	2100      	movs	r1, #0
 8005e42:	5499      	strb	r1, [r3, r2]
        hdfu->dev_status[3] = 0U;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	4a21      	ldr	r2, [pc, #132]	@ (8005ecc <DFU_Upload+0x1d8>)
 8005e48:	2100      	movs	r1, #0
 8005e4a:	5499      	strb	r1, [r3, r2]
        hdfu->dev_status[4] = hdfu->dev_state;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8005ebc <DFU_Upload+0x1c8>)
 8005e50:	5c99      	ldrb	r1, [r3, r2]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	4a1e      	ldr	r2, [pc, #120]	@ (8005ed0 <DFU_Upload+0x1dc>)
 8005e56:	5499      	strb	r1, [r3, r2]

        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	0011      	movs	r1, r2
 8005e5e:	0018      	movs	r0, r3
 8005e60:	f001 fb5f 	bl	8007522 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8005e64:	e026      	b.n	8005eb4 <DFU_Upload+0x1c0>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	4a15      	ldr	r2, [pc, #84]	@ (8005ec0 <DFU_Upload+0x1cc>)
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	5099      	str	r1, [r3, r2]
      hdfu->wblock_num = 0U;
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	2380      	movs	r3, #128	@ 0x80
 8005e72:	015b      	lsls	r3, r3, #5
 8005e74:	2100      	movs	r1, #0
 8005e76:	50d1      	str	r1, [r2, r3]
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	0011      	movs	r1, r2
 8005e7e:	0018      	movs	r0, r3
 8005e80:	f001 fb4f 	bl	8007522 <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 8005e84:	e016      	b.n	8005eb4 <DFU_Upload+0x1c0>
    hdfu->dev_state = DFU_STATE_IDLE;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	4a0c      	ldr	r2, [pc, #48]	@ (8005ebc <DFU_Upload+0x1c8>)
 8005e8a:	2102      	movs	r1, #2
 8005e8c:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[1] = 0U;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	4a0c      	ldr	r2, [pc, #48]	@ (8005ec4 <DFU_Upload+0x1d0>)
 8005e92:	2100      	movs	r1, #0
 8005e94:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[2] = 0U;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	4a0b      	ldr	r2, [pc, #44]	@ (8005ec8 <DFU_Upload+0x1d4>)
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[3] = 0U;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8005ecc <DFU_Upload+0x1d8>)
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[4] = hdfu->dev_state;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	4a04      	ldr	r2, [pc, #16]	@ (8005ebc <DFU_Upload+0x1c8>)
 8005eaa:	5c99      	ldrb	r1, [r3, r2]
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	4a08      	ldr	r2, [pc, #32]	@ (8005ed0 <DFU_Upload+0x1dc>)
 8005eb0:	5499      	strb	r1, [r3, r2]
}
 8005eb2:	e7ff      	b.n	8005eb4 <DFU_Upload+0x1c0>
 8005eb4:	46c0      	nop			@ (mov r8, r8)
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	b007      	add	sp, #28
 8005eba:	bd90      	pop	{r4, r7, pc}
 8005ebc:	00001018 	.word	0x00001018
 8005ec0:	00001004 	.word	0x00001004
 8005ec4:	00001011 	.word	0x00001011
 8005ec8:	00001012 	.word	0x00001012
 8005ecc:	00001013 	.word	0x00001013
 8005ed0:	00001014 	.word	0x00001014
 8005ed4:	00001008 	.word	0x00001008

08005ed8 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	23ae      	movs	r3, #174	@ 0xae
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	58d3      	ldr	r3, [r2, r3]
 8005ee8:	60fb      	str	r3, [r7, #12]

  switch (hdfu->dev_state)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	4a55      	ldr	r2, [pc, #340]	@ (8006044 <DFU_GetStatus+0x16c>)
 8005eee:	5c9b      	ldrb	r3, [r3, r2]
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d002      	beq.n	8005efa <DFU_GetStatus+0x22>
 8005ef4:	2b06      	cmp	r3, #6
 8005ef6:	d05a      	beq.n	8005fae <DFU_GetStatus+0xd6>
        }
      }
      break;

    default :
      break;
 8005ef8:	e097      	b.n	800602a <DFU_GetStatus+0x152>
      if (hdfu->wlength != 0U)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	4a52      	ldr	r2, [pc, #328]	@ (8006048 <DFU_GetStatus+0x170>)
 8005efe:	589b      	ldr	r3, [r3, r2]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d03d      	beq.n	8005f80 <DFU_GetStatus+0xa8>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4a4f      	ldr	r2, [pc, #316]	@ (8006044 <DFU_GetStatus+0x16c>)
 8005f08:	2104      	movs	r1, #4
 8005f0a:	5499      	strb	r1, [r3, r2]
        hdfu->dev_status[1] = 0U;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4a4f      	ldr	r2, [pc, #316]	@ (800604c <DFU_GetStatus+0x174>)
 8005f10:	2100      	movs	r1, #0
 8005f12:	5499      	strb	r1, [r3, r2]
        hdfu->dev_status[2] = 0U;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4a4e      	ldr	r2, [pc, #312]	@ (8006050 <DFU_GetStatus+0x178>)
 8005f18:	2100      	movs	r1, #0
 8005f1a:	5499      	strb	r1, [r3, r2]
        hdfu->dev_status[3] = 0U;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4a4d      	ldr	r2, [pc, #308]	@ (8006054 <DFU_GetStatus+0x17c>)
 8005f20:	2100      	movs	r1, #0
 8005f22:	5499      	strb	r1, [r3, r2]
        hdfu->dev_status[4] = hdfu->dev_state;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4a47      	ldr	r2, [pc, #284]	@ (8006044 <DFU_GetStatus+0x16c>)
 8005f28:	5c99      	ldrb	r1, [r3, r2]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4a4a      	ldr	r2, [pc, #296]	@ (8006058 <DFU_GetStatus+0x180>)
 8005f2e:	5499      	strb	r1, [r3, r2]
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	2380      	movs	r3, #128	@ 0x80
 8005f34:	015b      	lsls	r3, r3, #5
 8005f36:	58d3      	ldr	r3, [r2, r3]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d112      	bne.n	8005f62 <DFU_GetStatus+0x8a>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b41      	cmp	r3, #65	@ 0x41
 8005f42:	d10e      	bne.n	8005f62 <DFU_GetStatus+0x8a>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	23af      	movs	r3, #175	@ 0xaf
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	58d3      	ldr	r3, [r2, r3]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	4942      	ldr	r1, [pc, #264]	@ (800605c <DFU_GetStatus+0x184>)
 8005f52:	5850      	ldr	r0, [r2, r1]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4942      	ldr	r1, [pc, #264]	@ (8006060 <DFU_GetStatus+0x188>)
 8005f58:	468c      	mov	ip, r1
 8005f5a:	4462      	add	r2, ip
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	4798      	blx	r3
      break;
 8005f60:	e063      	b.n	800602a <DFU_GetStatus+0x152>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	23af      	movs	r3, #175	@ 0xaf
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	58d3      	ldr	r3, [r2, r3]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	493b      	ldr	r1, [pc, #236]	@ (800605c <DFU_GetStatus+0x184>)
 8005f70:	5850      	ldr	r0, [r2, r1]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	493a      	ldr	r1, [pc, #232]	@ (8006060 <DFU_GetStatus+0x188>)
 8005f76:	468c      	mov	ip, r1
 8005f78:	4462      	add	r2, ip
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	4798      	blx	r3
      break;
 8005f7e:	e054      	b.n	800602a <DFU_GetStatus+0x152>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4a30      	ldr	r2, [pc, #192]	@ (8006044 <DFU_GetStatus+0x16c>)
 8005f84:	2105      	movs	r1, #5
 8005f86:	5499      	strb	r1, [r3, r2]
        hdfu->dev_status[1] = 0U;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4a30      	ldr	r2, [pc, #192]	@ (800604c <DFU_GetStatus+0x174>)
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	5499      	strb	r1, [r3, r2]
        hdfu->dev_status[2] = 0U;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4a2f      	ldr	r2, [pc, #188]	@ (8006050 <DFU_GetStatus+0x178>)
 8005f94:	2100      	movs	r1, #0
 8005f96:	5499      	strb	r1, [r3, r2]
        hdfu->dev_status[3] = 0U;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4a2e      	ldr	r2, [pc, #184]	@ (8006054 <DFU_GetStatus+0x17c>)
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	5499      	strb	r1, [r3, r2]
        hdfu->dev_status[4] = hdfu->dev_state;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4a28      	ldr	r2, [pc, #160]	@ (8006044 <DFU_GetStatus+0x16c>)
 8005fa4:	5c99      	ldrb	r1, [r3, r2]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4a2b      	ldr	r2, [pc, #172]	@ (8006058 <DFU_GetStatus+0x180>)
 8005faa:	5499      	strb	r1, [r3, r2]
      break;
 8005fac:	e03d      	b.n	800602a <DFU_GetStatus+0x152>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	4a2c      	ldr	r2, [pc, #176]	@ (8006064 <DFU_GetStatus+0x18c>)
 8005fb2:	5c9b      	ldrb	r3, [r3, r2]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d116      	bne.n	8005fe6 <DFU_GetStatus+0x10e>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4a22      	ldr	r2, [pc, #136]	@ (8006044 <DFU_GetStatus+0x16c>)
 8005fbc:	2107      	movs	r1, #7
 8005fbe:	5499      	strb	r1, [r3, r2]
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4a22      	ldr	r2, [pc, #136]	@ (800604c <DFU_GetStatus+0x174>)
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	5499      	strb	r1, [r3, r2]
        hdfu->dev_status[2] = 0U;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4a21      	ldr	r2, [pc, #132]	@ (8006050 <DFU_GetStatus+0x178>)
 8005fcc:	2100      	movs	r1, #0
 8005fce:	5499      	strb	r1, [r3, r2]
        hdfu->dev_status[3] = 0U;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4a20      	ldr	r2, [pc, #128]	@ (8006054 <DFU_GetStatus+0x17c>)
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	5499      	strb	r1, [r3, r2]
        hdfu->dev_status[4] = hdfu->dev_state;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4a1a      	ldr	r2, [pc, #104]	@ (8006044 <DFU_GetStatus+0x16c>)
 8005fdc:	5c99      	ldrb	r1, [r3, r2]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8006058 <DFU_GetStatus+0x180>)
 8005fe2:	5499      	strb	r1, [r3, r2]
      break;
 8005fe4:	e020      	b.n	8006028 <DFU_GetStatus+0x150>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8006064 <DFU_GetStatus+0x18c>)
 8005fea:	5c9b      	ldrb	r3, [r3, r2]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d11b      	bne.n	8006028 <DFU_GetStatus+0x150>
            ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U))
 8005ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8006068 <DFU_GetStatus+0x190>)
 8005ff2:	7d1b      	ldrb	r3, [r3, #20]
 8005ff4:	001a      	movs	r2, r3
 8005ff6:	2304      	movs	r3, #4
 8005ff8:	4013      	ands	r3, r2
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8005ffa:	d015      	beq.n	8006028 <DFU_GetStatus+0x150>
          hdfu->dev_state = DFU_STATE_IDLE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4a11      	ldr	r2, [pc, #68]	@ (8006044 <DFU_GetStatus+0x16c>)
 8006000:	2102      	movs	r1, #2
 8006002:	5499      	strb	r1, [r3, r2]
          hdfu->dev_status[1] = 0U;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4a11      	ldr	r2, [pc, #68]	@ (800604c <DFU_GetStatus+0x174>)
 8006008:	2100      	movs	r1, #0
 800600a:	5499      	strb	r1, [r3, r2]
          hdfu->dev_status[2] = 0U;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4a10      	ldr	r2, [pc, #64]	@ (8006050 <DFU_GetStatus+0x178>)
 8006010:	2100      	movs	r1, #0
 8006012:	5499      	strb	r1, [r3, r2]
          hdfu->dev_status[3] = 0U;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	4a0f      	ldr	r2, [pc, #60]	@ (8006054 <DFU_GetStatus+0x17c>)
 8006018:	2100      	movs	r1, #0
 800601a:	5499      	strb	r1, [r3, r2]
          hdfu->dev_status[4] = hdfu->dev_state;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4a09      	ldr	r2, [pc, #36]	@ (8006044 <DFU_GetStatus+0x16c>)
 8006020:	5c99      	ldrb	r1, [r3, r2]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4a0c      	ldr	r2, [pc, #48]	@ (8006058 <DFU_GetStatus+0x180>)
 8006026:	5499      	strb	r1, [r3, r2]
      break;
 8006028:	46c0      	nop			@ (mov r8, r8)
  }

  /* Send the status data over EP0 */
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	4a0c      	ldr	r2, [pc, #48]	@ (8006060 <DFU_GetStatus+0x188>)
 800602e:	1899      	adds	r1, r3, r2
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2206      	movs	r2, #6
 8006034:	0018      	movs	r0, r3
 8006036:	f001 faf2 	bl	800761e <USBD_CtlSendData>
}
 800603a:	46c0      	nop			@ (mov r8, r8)
 800603c:	46bd      	mov	sp, r7
 800603e:	b004      	add	sp, #16
 8006040:	bd80      	pop	{r7, pc}
 8006042:	46c0      	nop			@ (mov r8, r8)
 8006044:	00001018 	.word	0x00001018
 8006048:	00001004 	.word	0x00001004
 800604c:	00001011 	.word	0x00001011
 8006050:	00001012 	.word	0x00001012
 8006054:	00001013 	.word	0x00001013
 8006058:	00001014 	.word	0x00001014
 800605c:	00001008 	.word	0x00001008
 8006060:	00001010 	.word	0x00001010
 8006064:	00001019 	.word	0x00001019
 8006068:	20000048 	.word	0x20000048

0800606c <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	23ae      	movs	r3, #174	@ 0xae
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	58d3      	ldr	r3, [r2, r3]
 800607c:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4a22      	ldr	r2, [pc, #136]	@ (800610c <DFU_ClearStatus+0xa0>)
 8006082:	5c9b      	ldrb	r3, [r3, r2]
 8006084:	2b0a      	cmp	r3, #10
 8006086:	d11e      	bne.n	80060c6 <DFU_ClearStatus+0x5a>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4a20      	ldr	r2, [pc, #128]	@ (800610c <DFU_ClearStatus+0xa0>)
 800608c:	2102      	movs	r1, #2
 800608e:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4a1f      	ldr	r2, [pc, #124]	@ (8006110 <DFU_ClearStatus+0xa4>)
 8006094:	2100      	movs	r1, #0
 8006096:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[1] = 0U;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4a1e      	ldr	r2, [pc, #120]	@ (8006114 <DFU_ClearStatus+0xa8>)
 800609c:	2100      	movs	r1, #0
 800609e:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[2] = 0U;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4a1d      	ldr	r2, [pc, #116]	@ (8006118 <DFU_ClearStatus+0xac>)
 80060a4:	2100      	movs	r1, #0
 80060a6:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4a1c      	ldr	r2, [pc, #112]	@ (800611c <DFU_ClearStatus+0xb0>)
 80060ac:	2100      	movs	r1, #0
 80060ae:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4a16      	ldr	r2, [pc, #88]	@ (800610c <DFU_ClearStatus+0xa0>)
 80060b4:	5c99      	ldrb	r1, [r3, r2]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4a19      	ldr	r2, [pc, #100]	@ (8006120 <DFU_ClearStatus+0xb4>)
 80060ba:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[5] = 0U;/*iString*/
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4a19      	ldr	r2, [pc, #100]	@ (8006124 <DFU_ClearStatus+0xb8>)
 80060c0:	2100      	movs	r1, #0
 80060c2:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
    hdfu->dev_status[5] = 0U;/*iString*/
  }
}
 80060c4:	e01d      	b.n	8006102 <DFU_ClearStatus+0x96>
    hdfu->dev_state = DFU_STATE_ERROR;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	4a10      	ldr	r2, [pc, #64]	@ (800610c <DFU_ClearStatus+0xa0>)
 80060ca:	210a      	movs	r1, #10
 80060cc:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4a0f      	ldr	r2, [pc, #60]	@ (8006110 <DFU_ClearStatus+0xa4>)
 80060d2:	210e      	movs	r1, #14
 80060d4:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[1] = 0U;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4a0e      	ldr	r2, [pc, #56]	@ (8006114 <DFU_ClearStatus+0xa8>)
 80060da:	2100      	movs	r1, #0
 80060dc:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[2] = 0U;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4a0d      	ldr	r2, [pc, #52]	@ (8006118 <DFU_ClearStatus+0xac>)
 80060e2:	2100      	movs	r1, #0
 80060e4:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4a0c      	ldr	r2, [pc, #48]	@ (800611c <DFU_ClearStatus+0xb0>)
 80060ea:	2100      	movs	r1, #0
 80060ec:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4a06      	ldr	r2, [pc, #24]	@ (800610c <DFU_ClearStatus+0xa0>)
 80060f2:	5c99      	ldrb	r1, [r3, r2]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4a0a      	ldr	r2, [pc, #40]	@ (8006120 <DFU_ClearStatus+0xb4>)
 80060f8:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[5] = 0U;/*iString*/
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	4a09      	ldr	r2, [pc, #36]	@ (8006124 <DFU_ClearStatus+0xb8>)
 80060fe:	2100      	movs	r1, #0
 8006100:	5499      	strb	r1, [r3, r2]
}
 8006102:	46c0      	nop			@ (mov r8, r8)
 8006104:	46bd      	mov	sp, r7
 8006106:	b004      	add	sp, #16
 8006108:	bd80      	pop	{r7, pc}
 800610a:	46c0      	nop			@ (mov r8, r8)
 800610c:	00001018 	.word	0x00001018
 8006110:	00001010 	.word	0x00001010
 8006114:	00001011 	.word	0x00001011
 8006118:	00001012 	.word	0x00001012
 800611c:	00001013 	.word	0x00001013
 8006120:	00001014 	.word	0x00001014
 8006124:	00001015 	.word	0x00001015

08006128 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	23ae      	movs	r3, #174	@ 0xae
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	58d3      	ldr	r3, [r2, r3]
 8006138:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4a05      	ldr	r2, [pc, #20]	@ (8006154 <DFU_GetState+0x2c>)
 800613e:	1899      	adds	r1, r3, r2
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	0018      	movs	r0, r3
 8006146:	f001 fa6a 	bl	800761e <USBD_CtlSendData>
}
 800614a:	46c0      	nop			@ (mov r8, r8)
 800614c:	46bd      	mov	sp, r7
 800614e:	b004      	add	sp, #16
 8006150:	bd80      	pop	{r7, pc}
 8006152:	46c0      	nop			@ (mov r8, r8)
 8006154:	00001018 	.word	0x00001018

08006158 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	23ae      	movs	r3, #174	@ 0xae
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	58d3      	ldr	r3, [r2, r3]
 8006168:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	4a21      	ldr	r2, [pc, #132]	@ (80061f4 <DFU_Abort+0x9c>)
 800616e:	5c9b      	ldrb	r3, [r3, r2]
 8006170:	2b02      	cmp	r3, #2
 8006172:	d013      	beq.n	800619c <DFU_Abort+0x44>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4a1f      	ldr	r2, [pc, #124]	@ (80061f4 <DFU_Abort+0x9c>)
 8006178:	5c9b      	ldrb	r3, [r3, r2]
 800617a:	2b03      	cmp	r3, #3
 800617c:	d00e      	beq.n	800619c <DFU_Abort+0x44>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4a1c      	ldr	r2, [pc, #112]	@ (80061f4 <DFU_Abort+0x9c>)
 8006182:	5c9b      	ldrb	r3, [r3, r2]
 8006184:	2b05      	cmp	r3, #5
 8006186:	d009      	beq.n	800619c <DFU_Abort+0x44>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4a1a      	ldr	r2, [pc, #104]	@ (80061f4 <DFU_Abort+0x9c>)
 800618c:	5c9b      	ldrb	r3, [r3, r2]
 800618e:	2b06      	cmp	r3, #6
 8006190:	d004      	beq.n	800619c <DFU_Abort+0x44>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4a17      	ldr	r2, [pc, #92]	@ (80061f4 <DFU_Abort+0x9c>)
 8006196:	5c9b      	ldrb	r3, [r3, r2]
 8006198:	2b09      	cmp	r3, #9
 800619a:	d126      	bne.n	80061ea <DFU_Abort+0x92>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4a15      	ldr	r2, [pc, #84]	@ (80061f4 <DFU_Abort+0x9c>)
 80061a0:	2102      	movs	r1, #2
 80061a2:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4a14      	ldr	r2, [pc, #80]	@ (80061f8 <DFU_Abort+0xa0>)
 80061a8:	2100      	movs	r1, #0
 80061aa:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[1] = 0U;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4a13      	ldr	r2, [pc, #76]	@ (80061fc <DFU_Abort+0xa4>)
 80061b0:	2100      	movs	r1, #0
 80061b2:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[2] = 0U;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4a12      	ldr	r2, [pc, #72]	@ (8006200 <DFU_Abort+0xa8>)
 80061b8:	2100      	movs	r1, #0
 80061ba:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4a11      	ldr	r2, [pc, #68]	@ (8006204 <DFU_Abort+0xac>)
 80061c0:	2100      	movs	r1, #0
 80061c2:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[4] = hdfu->dev_state;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4a0b      	ldr	r2, [pc, #44]	@ (80061f4 <DFU_Abort+0x9c>)
 80061c8:	5c99      	ldrb	r1, [r3, r2]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4a0e      	ldr	r2, [pc, #56]	@ (8006208 <DFU_Abort+0xb0>)
 80061ce:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[5] = 0U; /*iString*/
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4a0e      	ldr	r2, [pc, #56]	@ (800620c <DFU_Abort+0xb4>)
 80061d4:	2100      	movs	r1, #0
 80061d6:	5499      	strb	r1, [r3, r2]
    hdfu->wblock_num = 0U;
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	2380      	movs	r3, #128	@ 0x80
 80061dc:	015b      	lsls	r3, r3, #5
 80061de:	2100      	movs	r1, #0
 80061e0:	50d1      	str	r1, [r2, r3]
    hdfu->wlength = 0U;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4a0a      	ldr	r2, [pc, #40]	@ (8006210 <DFU_Abort+0xb8>)
 80061e6:	2100      	movs	r1, #0
 80061e8:	5099      	str	r1, [r3, r2]
  }
}
 80061ea:	46c0      	nop			@ (mov r8, r8)
 80061ec:	46bd      	mov	sp, r7
 80061ee:	b004      	add	sp, #16
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	46c0      	nop			@ (mov r8, r8)
 80061f4:	00001018 	.word	0x00001018
 80061f8:	00001010 	.word	0x00001010
 80061fc:	00001011 	.word	0x00001011
 8006200:	00001012 	.word	0x00001012
 8006204:	00001013 	.word	0x00001013
 8006208:	00001014 	.word	0x00001014
 800620c:	00001015 	.word	0x00001015
 8006210:	00001004 	.word	0x00001004

08006214 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	23ae      	movs	r3, #174	@ 0xae
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	58d3      	ldr	r3, [r2, r3]
 8006224:	60fb      	str	r3, [r7, #12]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	4a22      	ldr	r2, [pc, #136]	@ (80062b4 <DFU_Leave+0xa0>)
 800622a:	2100      	movs	r1, #0
 800622c:	5499      	strb	r1, [r3, r2]

  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 800622e:	4b22      	ldr	r3, [pc, #136]	@ (80062b8 <DFU_Leave+0xa4>)
 8006230:	7d1b      	ldrb	r3, [r3, #20]
 8006232:	001a      	movs	r2, r3
 8006234:	2304      	movs	r3, #4
 8006236:	4013      	ands	r3, r2
 8006238:	d016      	beq.n	8006268 <DFU_Leave+0x54>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4a1f      	ldr	r2, [pc, #124]	@ (80062bc <DFU_Leave+0xa8>)
 800623e:	2106      	movs	r1, #6
 8006240:	5499      	strb	r1, [r3, r2]

    hdfu->dev_status[1] = 0U;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4a1e      	ldr	r2, [pc, #120]	@ (80062c0 <DFU_Leave+0xac>)
 8006246:	2100      	movs	r1, #0
 8006248:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[2] = 0U;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4a1d      	ldr	r2, [pc, #116]	@ (80062c4 <DFU_Leave+0xb0>)
 800624e:	2100      	movs	r1, #0
 8006250:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[3] = 0U;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	4a1c      	ldr	r2, [pc, #112]	@ (80062c8 <DFU_Leave+0xb4>)
 8006256:	2100      	movs	r1, #0
 8006258:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[4] = hdfu->dev_state;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4a17      	ldr	r2, [pc, #92]	@ (80062bc <DFU_Leave+0xa8>)
 800625e:	5c99      	ldrb	r1, [r3, r2]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4a1a      	ldr	r2, [pc, #104]	@ (80062cc <DFU_Leave+0xb8>)
 8006264:	5499      	strb	r1, [r3, r2]
    return;
 8006266:	e021      	b.n	80062ac <DFU_Leave+0x98>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4a14      	ldr	r2, [pc, #80]	@ (80062bc <DFU_Leave+0xa8>)
 800626c:	2108      	movs	r1, #8
 800626e:	5499      	strb	r1, [r3, r2]

    hdfu->dev_status[1] = 0U;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4a13      	ldr	r2, [pc, #76]	@ (80062c0 <DFU_Leave+0xac>)
 8006274:	2100      	movs	r1, #0
 8006276:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[2] = 0U;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4a12      	ldr	r2, [pc, #72]	@ (80062c4 <DFU_Leave+0xb0>)
 800627c:	2100      	movs	r1, #0
 800627e:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[3] = 0U;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4a11      	ldr	r2, [pc, #68]	@ (80062c8 <DFU_Leave+0xb4>)
 8006284:	2100      	movs	r1, #0
 8006286:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[4] = hdfu->dev_state;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4a0c      	ldr	r2, [pc, #48]	@ (80062bc <DFU_Leave+0xa8>)
 800628c:	5c99      	ldrb	r1, [r3, r2]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	4a0e      	ldr	r2, [pc, #56]	@ (80062cc <DFU_Leave+0xb8>)
 8006292:	5499      	strb	r1, [r3, r2]

    /* Disconnect the USB device */
    USBD_Stop(pdev);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	0018      	movs	r0, r3
 8006298:	f000 f878 	bl	800638c <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	23af      	movs	r3, #175	@ 0xaf
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	58d3      	ldr	r3, [r2, r3]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	4798      	blx	r3

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 80062a8:	f7ff f816 	bl	80052d8 <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 80062ac:	46bd      	mov	sp, r7
 80062ae:	b004      	add	sp, #16
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	46c0      	nop			@ (mov r8, r8)
 80062b4:	00001019 	.word	0x00001019
 80062b8:	20000048 	.word	0x20000048
 80062bc:	00001018 	.word	0x00001018
 80062c0:	00001011 	.word	0x00001011
 80062c4:	00001012 	.word	0x00001012
 80062c8:	00001013 	.word	0x00001013
 80062cc:	00001014 	.word	0x00001014

080062d0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	1dfb      	adds	r3, r7, #7
 80062dc:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80062e4:	2302      	movs	r3, #2
 80062e6:	e020      	b.n	800632a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	23ad      	movs	r3, #173	@ 0xad
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	58d3      	ldr	r3, [r2, r3]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d004      	beq.n	80062fe <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	23ad      	movs	r3, #173	@ 0xad
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	2100      	movs	r1, #0
 80062fc:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d004      	beq.n	800630e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	23ac      	movs	r3, #172	@ 0xac
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	68b9      	ldr	r1, [r7, #8]
 800630c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	23a7      	movs	r3, #167	@ 0xa7
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	2101      	movs	r1, #1
 8006316:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	1dfa      	adds	r2, r7, #7
 800631c:	7812      	ldrb	r2, [r2, #0]
 800631e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	0018      	movs	r0, r3
 8006324:	f001 fd32 	bl	8007d8c <USBD_LL_Init>

  return USBD_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	0018      	movs	r0, r3
 800632c:	46bd      	mov	sp, r7
 800632e:	b004      	add	sp, #16
 8006330:	bd80      	pop	{r7, pc}

08006332 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b084      	sub	sp, #16
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800633c:	200f      	movs	r0, #15
 800633e:	183b      	adds	r3, r7, r0
 8006340:	2200      	movs	r2, #0
 8006342:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d008      	beq.n	800635c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	23ad      	movs	r3, #173	@ 0xad
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	6839      	ldr	r1, [r7, #0]
 8006352:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8006354:	183b      	adds	r3, r7, r0
 8006356:	2200      	movs	r2, #0
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	e003      	b.n	8006364 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800635c:	230f      	movs	r3, #15
 800635e:	18fb      	adds	r3, r7, r3
 8006360:	2202      	movs	r2, #2
 8006362:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006364:	230f      	movs	r3, #15
 8006366:	18fb      	adds	r3, r7, r3
 8006368:	781b      	ldrb	r3, [r3, #0]
}
 800636a:	0018      	movs	r0, r3
 800636c:	46bd      	mov	sp, r7
 800636e:	b004      	add	sp, #16
 8006370:	bd80      	pop	{r7, pc}

08006372 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b082      	sub	sp, #8
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	0018      	movs	r0, r3
 800637e:	f001 fd4b 	bl	8007e18 <USBD_LL_Start>

  return USBD_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	0018      	movs	r0, r3
 8006386:	46bd      	mov	sp, r7
 8006388:	b002      	add	sp, #8
 800638a:	bd80      	pop	{r7, pc}

0800638c <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	23ad      	movs	r3, #173	@ 0xad
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	58d3      	ldr	r3, [r2, r3]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	b2d9      	uxtb	r1, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	0018      	movs	r0, r3
 80063a8:	4790      	blx	r2

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	0018      	movs	r0, r3
 80063ae:	f001 fd58 	bl	8007e62 <USBD_LL_Stop>

  return USBD_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	0018      	movs	r0, r3
 80063b6:	46bd      	mov	sp, r7
 80063b8:	b002      	add	sp, #8
 80063ba:	bd80      	pop	{r7, pc}

080063bc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	0018      	movs	r0, r3
 80063c8:	46bd      	mov	sp, r7
 80063ca:	b002      	add	sp, #8
 80063cc:	bd80      	pop	{r7, pc}

080063ce <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80063ce:	b590      	push	{r4, r7, lr}
 80063d0:	b085      	sub	sp, #20
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	000a      	movs	r2, r1
 80063d8:	1cfb      	adds	r3, r7, #3
 80063da:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80063dc:	240f      	movs	r4, #15
 80063de:	193b      	adds	r3, r7, r4
 80063e0:	2202      	movs	r2, #2
 80063e2:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	23ad      	movs	r3, #173	@ 0xad
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	58d3      	ldr	r3, [r2, r3]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00e      	beq.n	800640e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	23ad      	movs	r3, #173	@ 0xad
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	58d3      	ldr	r3, [r2, r3]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	1cfa      	adds	r2, r7, #3
 80063fc:	7811      	ldrb	r1, [r2, #0]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	0010      	movs	r0, r2
 8006402:	4798      	blx	r3
 8006404:	1e03      	subs	r3, r0, #0
 8006406:	d102      	bne.n	800640e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8006408:	193b      	adds	r3, r7, r4
 800640a:	2200      	movs	r2, #0
 800640c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800640e:	230f      	movs	r3, #15
 8006410:	18fb      	adds	r3, r7, r3
 8006412:	781b      	ldrb	r3, [r3, #0]
}
 8006414:	0018      	movs	r0, r3
 8006416:	46bd      	mov	sp, r7
 8006418:	b005      	add	sp, #20
 800641a:	bd90      	pop	{r4, r7, pc}

0800641c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	000a      	movs	r2, r1
 8006426:	1cfb      	adds	r3, r7, #3
 8006428:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	23ad      	movs	r3, #173	@ 0xad
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	58d3      	ldr	r3, [r2, r3]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	1cfa      	adds	r2, r7, #3
 8006436:	7811      	ldrb	r1, [r2, #0]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	0010      	movs	r0, r2
 800643c:	4798      	blx	r3

  return USBD_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	0018      	movs	r0, r3
 8006442:	46bd      	mov	sp, r7
 8006444:	b002      	add	sp, #8
 8006446:	bd80      	pop	{r7, pc}

08006448 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	22aa      	movs	r2, #170	@ 0xaa
 8006456:	0092      	lsls	r2, r2, #2
 8006458:	4694      	mov	ip, r2
 800645a:	4463      	add	r3, ip
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	0011      	movs	r1, r2
 8006460:	0018      	movs	r0, r3
 8006462:	f001 f826 	bl	80074b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	23a5      	movs	r3, #165	@ 0xa5
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	2101      	movs	r1, #1
 800646e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a23      	ldr	r2, [pc, #140]	@ (8006500 <USBD_LL_SetupStage+0xb8>)
 8006474:	5a9b      	ldrh	r3, [r3, r2]
 8006476:	0019      	movs	r1, r3
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	23a6      	movs	r3, #166	@ 0xa6
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	23aa      	movs	r3, #170	@ 0xaa
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	5cd3      	ldrb	r3, [r2, r3]
 8006488:	001a      	movs	r2, r3
 800648a:	231f      	movs	r3, #31
 800648c:	4013      	ands	r3, r2
 800648e:	2b02      	cmp	r3, #2
 8006490:	d019      	beq.n	80064c6 <USBD_LL_SetupStage+0x7e>
 8006492:	d822      	bhi.n	80064da <USBD_LL_SetupStage+0x92>
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <USBD_LL_SetupStage+0x56>
 8006498:	2b01      	cmp	r3, #1
 800649a:	d00a      	beq.n	80064b2 <USBD_LL_SetupStage+0x6a>
 800649c:	e01d      	b.n	80064da <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	22aa      	movs	r2, #170	@ 0xaa
 80064a2:	0092      	lsls	r2, r2, #2
 80064a4:	189a      	adds	r2, r3, r2
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	0011      	movs	r1, r2
 80064aa:	0018      	movs	r0, r3
 80064ac:	f000 fa10 	bl	80068d0 <USBD_StdDevReq>
      break;
 80064b0:	e020      	b.n	80064f4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	22aa      	movs	r2, #170	@ 0xaa
 80064b6:	0092      	lsls	r2, r2, #2
 80064b8:	189a      	adds	r2, r3, r2
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	0011      	movs	r1, r2
 80064be:	0018      	movs	r0, r3
 80064c0:	f000 fa78 	bl	80069b4 <USBD_StdItfReq>
      break;
 80064c4:	e016      	b.n	80064f4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	22aa      	movs	r2, #170	@ 0xaa
 80064ca:	0092      	lsls	r2, r2, #2
 80064cc:	189a      	adds	r2, r3, r2
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	0011      	movs	r1, r2
 80064d2:	0018      	movs	r0, r3
 80064d4:	f000 fac5 	bl	8006a62 <USBD_StdEPReq>
      break;
 80064d8:	e00c      	b.n	80064f4 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	23aa      	movs	r3, #170	@ 0xaa
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	5cd3      	ldrb	r3, [r2, r3]
 80064e2:	227f      	movs	r2, #127	@ 0x7f
 80064e4:	4393      	bics	r3, r2
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	0011      	movs	r1, r2
 80064ec:	0018      	movs	r0, r3
 80064ee:	f001 fd14 	bl	8007f1a <USBD_LL_StallEP>
      break;
 80064f2:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	0018      	movs	r0, r3
 80064f8:	46bd      	mov	sp, r7
 80064fa:	b002      	add	sp, #8
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	46c0      	nop			@ (mov r8, r8)
 8006500:	000002ae 	.word	0x000002ae

08006504 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	607a      	str	r2, [r7, #4]
 800650e:	200b      	movs	r0, #11
 8006510:	183b      	adds	r3, r7, r0
 8006512:	1c0a      	adds	r2, r1, #0
 8006514:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006516:	183b      	adds	r3, r7, r0
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d154      	bne.n	80065c8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3355      	adds	r3, #85	@ 0x55
 8006522:	33ff      	adds	r3, #255	@ 0xff
 8006524:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	23a5      	movs	r3, #165	@ 0xa5
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	58d3      	ldr	r3, [r2, r3]
 800652e:	2b03      	cmp	r3, #3
 8006530:	d139      	bne.n	80065a6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	68da      	ldr	r2, [r3, #12]
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	429a      	cmp	r2, r3
 800653c:	d919      	bls.n	8006572 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	1ad2      	subs	r2, r2, r3
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006554:	429a      	cmp	r2, r3
 8006556:	d203      	bcs.n	8006560 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800655c:	b29b      	uxth	r3, r3
 800655e:	e002      	b.n	8006566 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006564:	b29b      	uxth	r3, r3
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	001a      	movs	r2, r3
 800656c:	f001 f8ae 	bl	80076cc <USBD_CtlContinueRx>
 8006570:	e045      	b.n	80065fe <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	23ad      	movs	r3, #173	@ 0xad
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	58d3      	ldr	r3, [r2, r3]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00d      	beq.n	800659c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	23a7      	movs	r3, #167	@ 0xa7
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006588:	2b03      	cmp	r3, #3
 800658a:	d107      	bne.n	800659c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	23ad      	movs	r3, #173	@ 0xad
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	58d3      	ldr	r3, [r2, r3]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	0010      	movs	r0, r2
 800659a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	0018      	movs	r0, r3
 80065a0:	f001 f8a7 	bl	80076f2 <USBD_CtlSendStatus>
 80065a4:	e02b      	b.n	80065fe <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	23a5      	movs	r3, #165	@ 0xa5
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	58d3      	ldr	r3, [r2, r3]
 80065ae:	2b05      	cmp	r3, #5
 80065b0:	d125      	bne.n	80065fe <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	23a5      	movs	r3, #165	@ 0xa5
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	2100      	movs	r1, #0
 80065ba:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2100      	movs	r1, #0
 80065c0:	0018      	movs	r0, r3
 80065c2:	f001 fcaa 	bl	8007f1a <USBD_LL_StallEP>
 80065c6:	e01a      	b.n	80065fe <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	23ad      	movs	r3, #173	@ 0xad
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	58d3      	ldr	r3, [r2, r3]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d011      	beq.n	80065fa <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	23a7      	movs	r3, #167	@ 0xa7
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80065de:	2b03      	cmp	r3, #3
 80065e0:	d10b      	bne.n	80065fa <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	23ad      	movs	r3, #173	@ 0xad
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	58d3      	ldr	r3, [r2, r3]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	220b      	movs	r2, #11
 80065ee:	18ba      	adds	r2, r7, r2
 80065f0:	7811      	ldrb	r1, [r2, #0]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	0010      	movs	r0, r2
 80065f6:	4798      	blx	r3
 80065f8:	e001      	b.n	80065fe <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80065fa:	2302      	movs	r3, #2
 80065fc:	e000      	b.n	8006600 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	0018      	movs	r0, r3
 8006602:	46bd      	mov	sp, r7
 8006604:	b006      	add	sp, #24
 8006606:	bd80      	pop	{r7, pc}

08006608 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	607a      	str	r2, [r7, #4]
 8006612:	200b      	movs	r0, #11
 8006614:	183b      	adds	r3, r7, r0
 8006616:	1c0a      	adds	r2, r1, #0
 8006618:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800661a:	183b      	adds	r3, r7, r0
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d000      	beq.n	8006624 <USBD_LL_DataInStage+0x1c>
 8006622:	e08e      	b.n	8006742 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3314      	adds	r3, #20
 8006628:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	23a5      	movs	r3, #165	@ 0xa5
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	58d3      	ldr	r3, [r2, r3]
 8006632:	2b02      	cmp	r3, #2
 8006634:	d164      	bne.n	8006700 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	429a      	cmp	r2, r3
 8006640:	d915      	bls.n	800666e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	68da      	ldr	r2, [r3, #12]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	1ad2      	subs	r2, r2, r3
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	b29a      	uxth	r2, r3
 8006656:	6879      	ldr	r1, [r7, #4]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	0018      	movs	r0, r3
 800665c:	f000 ffff 	bl	800765e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	2300      	movs	r3, #0
 8006664:	2200      	movs	r2, #0
 8006666:	2100      	movs	r1, #0
 8006668:	f001 fd3f 	bl	80080ea <USBD_LL_PrepareReceive>
 800666c:	e059      	b.n	8006722 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	0019      	movs	r1, r3
 8006678:	0010      	movs	r0, r2
 800667a:	f7f9 fdcb 	bl	8000214 <__aeabi_uidivmod>
 800667e:	1e0b      	subs	r3, r1, #0
 8006680:	d11f      	bne.n	80066c2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	689a      	ldr	r2, [r3, #8]
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800668a:	429a      	cmp	r2, r3
 800668c:	d319      	bcc.n	80066c2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	689a      	ldr	r2, [r3, #8]
 8006692:	68f9      	ldr	r1, [r7, #12]
 8006694:	23a6      	movs	r3, #166	@ 0xa6
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800669a:	429a      	cmp	r2, r3
 800669c:	d211      	bcs.n	80066c2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	2100      	movs	r1, #0
 80066a4:	0018      	movs	r0, r3
 80066a6:	f000 ffda 	bl	800765e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	23a6      	movs	r3, #166	@ 0xa6
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	2100      	movs	r1, #0
 80066b2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	2300      	movs	r3, #0
 80066b8:	2200      	movs	r2, #0
 80066ba:	2100      	movs	r1, #0
 80066bc:	f001 fd15 	bl	80080ea <USBD_LL_PrepareReceive>
 80066c0:	e02f      	b.n	8006722 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	23ad      	movs	r3, #173	@ 0xad
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	58d3      	ldr	r3, [r2, r3]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00d      	beq.n	80066ec <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	23a7      	movs	r3, #167	@ 0xa7
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80066d8:	2b03      	cmp	r3, #3
 80066da:	d107      	bne.n	80066ec <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	23ad      	movs	r3, #173	@ 0xad
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	58d3      	ldr	r3, [r2, r3]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	0010      	movs	r0, r2
 80066ea:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2180      	movs	r1, #128	@ 0x80
 80066f0:	0018      	movs	r0, r3
 80066f2:	f001 fc12 	bl	8007f1a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	0018      	movs	r0, r3
 80066fa:	f001 f80e 	bl	800771a <USBD_CtlReceiveStatus>
 80066fe:	e010      	b.n	8006722 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	23a5      	movs	r3, #165	@ 0xa5
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	58d3      	ldr	r3, [r2, r3]
 8006708:	2b04      	cmp	r3, #4
 800670a:	d005      	beq.n	8006718 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	23a5      	movs	r3, #165	@ 0xa5
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006714:	2b00      	cmp	r3, #0
 8006716:	d104      	bne.n	8006722 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2180      	movs	r1, #128	@ 0x80
 800671c:	0018      	movs	r0, r3
 800671e:	f001 fbfc 	bl	8007f1a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	23a8      	movs	r3, #168	@ 0xa8
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	5cd3      	ldrb	r3, [r2, r3]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d124      	bne.n	8006778 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	0018      	movs	r0, r3
 8006732:	f7ff fe43 	bl	80063bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	23a8      	movs	r3, #168	@ 0xa8
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	2100      	movs	r1, #0
 800673e:	54d1      	strb	r1, [r2, r3]
 8006740:	e01a      	b.n	8006778 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	23ad      	movs	r3, #173	@ 0xad
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	58d3      	ldr	r3, [r2, r3]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d011      	beq.n	8006774 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	23a7      	movs	r3, #167	@ 0xa7
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8006758:	2b03      	cmp	r3, #3
 800675a:	d10b      	bne.n	8006774 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	23ad      	movs	r3, #173	@ 0xad
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	58d3      	ldr	r3, [r2, r3]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	220b      	movs	r2, #11
 8006768:	18ba      	adds	r2, r7, r2
 800676a:	7811      	ldrb	r1, [r2, #0]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	0010      	movs	r0, r2
 8006770:	4798      	blx	r3
 8006772:	e001      	b.n	8006778 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006774:	2302      	movs	r3, #2
 8006776:	e000      	b.n	800677a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	0018      	movs	r0, r3
 800677c:	46bd      	mov	sp, r7
 800677e:	b006      	add	sp, #24
 8006780:	bd80      	pop	{r7, pc}

08006782 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b082      	sub	sp, #8
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	2340      	movs	r3, #64	@ 0x40
 800678e:	2200      	movs	r2, #0
 8006790:	2100      	movs	r1, #0
 8006792:	f001 fb8b 	bl	8007eac <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	23ac      	movs	r3, #172	@ 0xac
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	2101      	movs	r1, #1
 800679e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	23b2      	movs	r3, #178	@ 0xb2
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	2140      	movs	r1, #64	@ 0x40
 80067a8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	2340      	movs	r3, #64	@ 0x40
 80067ae:	2200      	movs	r2, #0
 80067b0:	2180      	movs	r1, #128	@ 0x80
 80067b2:	f001 fb7b 	bl	8007eac <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2240      	movs	r2, #64	@ 0x40
 80067c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	23a7      	movs	r3, #167	@ 0xa7
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	2101      	movs	r1, #1
 80067ca:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	23a5      	movs	r3, #165	@ 0xa5
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	2100      	movs	r1, #0
 80067d4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	23a9      	movs	r3, #169	@ 0xa9
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	2100      	movs	r1, #0
 80067e4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	23ae      	movs	r3, #174	@ 0xae
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	58d3      	ldr	r3, [r2, r3]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	23ad      	movs	r3, #173	@ 0xad
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	58d3      	ldr	r3, [r2, r3]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	b2d9      	uxtb	r1, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	0018      	movs	r0, r3
 8006806:	4790      	blx	r2
  }

  return USBD_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	0018      	movs	r0, r3
 800680c:	46bd      	mov	sp, r7
 800680e:	b002      	add	sp, #8
 8006810:	bd80      	pop	{r7, pc}

08006812 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	000a      	movs	r2, r1
 800681c:	1cfb      	adds	r3, r7, #3
 800681e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	1cfa      	adds	r2, r7, #3
 8006824:	7812      	ldrb	r2, [r2, #0]
 8006826:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	0018      	movs	r0, r3
 800682c:	46bd      	mov	sp, r7
 800682e:	b002      	add	sp, #8
 8006830:	bd80      	pop	{r7, pc}
	...

08006834 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	23a7      	movs	r3, #167	@ 0xa7
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	5cd1      	ldrb	r1, [r2, r3]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a06      	ldr	r2, [pc, #24]	@ (8006860 <USBD_LL_Suspend+0x2c>)
 8006848:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	23a7      	movs	r3, #167	@ 0xa7
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	2104      	movs	r1, #4
 8006852:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	0018      	movs	r0, r3
 8006858:	46bd      	mov	sp, r7
 800685a:	b002      	add	sp, #8
 800685c:	bd80      	pop	{r7, pc}
 800685e:	46c0      	nop			@ (mov r8, r8)
 8006860:	0000029d 	.word	0x0000029d

08006864 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	23a7      	movs	r3, #167	@ 0xa7
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	5cd3      	ldrb	r3, [r2, r3]
 8006874:	2b04      	cmp	r3, #4
 8006876:	d106      	bne.n	8006886 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a05      	ldr	r2, [pc, #20]	@ (8006890 <USBD_LL_Resume+0x2c>)
 800687c:	5c99      	ldrb	r1, [r3, r2]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	23a7      	movs	r3, #167	@ 0xa7
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	0018      	movs	r0, r3
 800688a:	46bd      	mov	sp, r7
 800688c:	b002      	add	sp, #8
 800688e:	bd80      	pop	{r7, pc}
 8006890:	0000029d 	.word	0x0000029d

08006894 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	23a7      	movs	r3, #167	@ 0xa7
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	5cd3      	ldrb	r3, [r2, r3]
 80068a4:	2b03      	cmp	r3, #3
 80068a6:	d10e      	bne.n	80068c6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	23ad      	movs	r3, #173	@ 0xad
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	58d3      	ldr	r3, [r2, r3]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d007      	beq.n	80068c6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	23ad      	movs	r3, #173	@ 0xad
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	58d3      	ldr	r3, [r2, r3]
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	0010      	movs	r0, r2
 80068c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	0018      	movs	r0, r3
 80068ca:	46bd      	mov	sp, r7
 80068cc:	b002      	add	sp, #8
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068da:	230f      	movs	r3, #15
 80068dc:	18fb      	adds	r3, r7, r3
 80068de:	2200      	movs	r2, #0
 80068e0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	001a      	movs	r2, r3
 80068e8:	2360      	movs	r3, #96	@ 0x60
 80068ea:	4013      	ands	r3, r2
 80068ec:	2b40      	cmp	r3, #64	@ 0x40
 80068ee:	d004      	beq.n	80068fa <USBD_StdDevReq+0x2a>
 80068f0:	d84f      	bhi.n	8006992 <USBD_StdDevReq+0xc2>
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00b      	beq.n	800690e <USBD_StdDevReq+0x3e>
 80068f6:	2b20      	cmp	r3, #32
 80068f8:	d14b      	bne.n	8006992 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	23ad      	movs	r3, #173	@ 0xad
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	58d3      	ldr	r3, [r2, r3]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	0010      	movs	r0, r2
 800690a:	4798      	blx	r3
      break;
 800690c:	e048      	b.n	80069a0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	785b      	ldrb	r3, [r3, #1]
 8006912:	2b09      	cmp	r3, #9
 8006914:	d835      	bhi.n	8006982 <USBD_StdDevReq+0xb2>
 8006916:	009a      	lsls	r2, r3, #2
 8006918:	4b25      	ldr	r3, [pc, #148]	@ (80069b0 <USBD_StdDevReq+0xe0>)
 800691a:	18d3      	adds	r3, r2, r3
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	0011      	movs	r1, r2
 8006926:	0018      	movs	r0, r3
 8006928:	f000 fa52 	bl	8006dd0 <USBD_GetDescriptor>
          break;
 800692c:	e030      	b.n	8006990 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	0011      	movs	r1, r2
 8006934:	0018      	movs	r0, r3
 8006936:	f000 fc13 	bl	8007160 <USBD_SetAddress>
          break;
 800693a:	e029      	b.n	8006990 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	0011      	movs	r1, r2
 8006942:	0018      	movs	r0, r3
 8006944:	f000 fc60 	bl	8007208 <USBD_SetConfig>
          break;
 8006948:	e022      	b.n	8006990 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	0011      	movs	r1, r2
 8006950:	0018      	movs	r0, r3
 8006952:	f000 fcfd 	bl	8007350 <USBD_GetConfig>
          break;
 8006956:	e01b      	b.n	8006990 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	0011      	movs	r1, r2
 800695e:	0018      	movs	r0, r3
 8006960:	f000 fd31 	bl	80073c6 <USBD_GetStatus>
          break;
 8006964:	e014      	b.n	8006990 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	0011      	movs	r1, r2
 800696c:	0018      	movs	r0, r3
 800696e:	f000 fd64 	bl	800743a <USBD_SetFeature>
          break;
 8006972:	e00d      	b.n	8006990 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	0011      	movs	r1, r2
 800697a:	0018      	movs	r0, r3
 800697c:	f000 fd73 	bl	8007466 <USBD_ClrFeature>
          break;
 8006980:	e006      	b.n	8006990 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	0011      	movs	r1, r2
 8006988:	0018      	movs	r0, r3
 800698a:	f000 fdca 	bl	8007522 <USBD_CtlError>
          break;
 800698e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8006990:	e006      	b.n	80069a0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	0011      	movs	r1, r2
 8006998:	0018      	movs	r0, r3
 800699a:	f000 fdc2 	bl	8007522 <USBD_CtlError>
      break;
 800699e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80069a0:	230f      	movs	r3, #15
 80069a2:	18fb      	adds	r3, r7, r3
 80069a4:	781b      	ldrb	r3, [r3, #0]
}
 80069a6:	0018      	movs	r0, r3
 80069a8:	46bd      	mov	sp, r7
 80069aa:	b004      	add	sp, #16
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	46c0      	nop			@ (mov r8, r8)
 80069b0:	08008318 	.word	0x08008318

080069b4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80069b4:	b5b0      	push	{r4, r5, r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069be:	230f      	movs	r3, #15
 80069c0:	18fb      	adds	r3, r7, r3
 80069c2:	2200      	movs	r2, #0
 80069c4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	001a      	movs	r2, r3
 80069cc:	2360      	movs	r3, #96	@ 0x60
 80069ce:	4013      	ands	r3, r2
 80069d0:	2b40      	cmp	r3, #64	@ 0x40
 80069d2:	d004      	beq.n	80069de <USBD_StdItfReq+0x2a>
 80069d4:	d839      	bhi.n	8006a4a <USBD_StdItfReq+0x96>
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <USBD_StdItfReq+0x2a>
 80069da:	2b20      	cmp	r3, #32
 80069dc:	d135      	bne.n	8006a4a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	23a7      	movs	r3, #167	@ 0xa7
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	5cd3      	ldrb	r3, [r2, r3]
 80069e6:	3b01      	subs	r3, #1
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d825      	bhi.n	8006a38 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	889b      	ldrh	r3, [r3, #4]
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d819      	bhi.n	8006a2a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	23ad      	movs	r3, #173	@ 0xad
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	58d3      	ldr	r3, [r2, r3]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	250f      	movs	r5, #15
 8006a02:	197c      	adds	r4, r7, r5
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	0010      	movs	r0, r2
 8006a0a:	4798      	blx	r3
 8006a0c:	0003      	movs	r3, r0
 8006a0e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	88db      	ldrh	r3, [r3, #6]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d116      	bne.n	8006a46 <USBD_StdItfReq+0x92>
 8006a18:	197b      	adds	r3, r7, r5
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d112      	bne.n	8006a46 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	0018      	movs	r0, r3
 8006a24:	f000 fe65 	bl	80076f2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a28:	e00d      	b.n	8006a46 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	0011      	movs	r1, r2
 8006a30:	0018      	movs	r0, r3
 8006a32:	f000 fd76 	bl	8007522 <USBD_CtlError>
          break;
 8006a36:	e006      	b.n	8006a46 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	0011      	movs	r1, r2
 8006a3e:	0018      	movs	r0, r3
 8006a40:	f000 fd6f 	bl	8007522 <USBD_CtlError>
          break;
 8006a44:	e000      	b.n	8006a48 <USBD_StdItfReq+0x94>
          break;
 8006a46:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8006a48:	e006      	b.n	8006a58 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	0011      	movs	r1, r2
 8006a50:	0018      	movs	r0, r3
 8006a52:	f000 fd66 	bl	8007522 <USBD_CtlError>
      break;
 8006a56:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	b004      	add	sp, #16
 8006a60:	bdb0      	pop	{r4, r5, r7, pc}

08006a62 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006a62:	b5b0      	push	{r4, r5, r7, lr}
 8006a64:	b084      	sub	sp, #16
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a6c:	230f      	movs	r3, #15
 8006a6e:	18fb      	adds	r3, r7, r3
 8006a70:	2200      	movs	r2, #0
 8006a72:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	889a      	ldrh	r2, [r3, #4]
 8006a78:	230e      	movs	r3, #14
 8006a7a:	18fb      	adds	r3, r7, r3
 8006a7c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	001a      	movs	r2, r3
 8006a84:	2360      	movs	r3, #96	@ 0x60
 8006a86:	4013      	ands	r3, r2
 8006a88:	2b40      	cmp	r3, #64	@ 0x40
 8006a8a:	d006      	beq.n	8006a9a <USBD_StdEPReq+0x38>
 8006a8c:	d900      	bls.n	8006a90 <USBD_StdEPReq+0x2e>
 8006a8e:	e190      	b.n	8006db2 <USBD_StdEPReq+0x350>
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00c      	beq.n	8006aae <USBD_StdEPReq+0x4c>
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d000      	beq.n	8006a9a <USBD_StdEPReq+0x38>
 8006a98:	e18b      	b.n	8006db2 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	23ad      	movs	r3, #173	@ 0xad
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	58d3      	ldr	r3, [r2, r3]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	0010      	movs	r0, r2
 8006aaa:	4798      	blx	r3
      break;
 8006aac:	e188      	b.n	8006dc0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	001a      	movs	r2, r3
 8006ab4:	2360      	movs	r3, #96	@ 0x60
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	2b20      	cmp	r3, #32
 8006aba:	d10f      	bne.n	8006adc <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	23ad      	movs	r3, #173	@ 0xad
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	58d3      	ldr	r3, [r2, r3]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	250f      	movs	r5, #15
 8006ac8:	197c      	adds	r4, r7, r5
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	0010      	movs	r0, r2
 8006ad0:	4798      	blx	r3
 8006ad2:	0003      	movs	r3, r0
 8006ad4:	7023      	strb	r3, [r4, #0]

        return ret;
 8006ad6:	197b      	adds	r3, r7, r5
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	e174      	b.n	8006dc6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	785b      	ldrb	r3, [r3, #1]
 8006ae0:	2b03      	cmp	r3, #3
 8006ae2:	d007      	beq.n	8006af4 <USBD_StdEPReq+0x92>
 8006ae4:	dd00      	ble.n	8006ae8 <USBD_StdEPReq+0x86>
 8006ae6:	e15c      	b.n	8006da2 <USBD_StdEPReq+0x340>
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d100      	bne.n	8006aee <USBD_StdEPReq+0x8c>
 8006aec:	e092      	b.n	8006c14 <USBD_StdEPReq+0x1b2>
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d04b      	beq.n	8006b8a <USBD_StdEPReq+0x128>
 8006af2:	e156      	b.n	8006da2 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	23a7      	movs	r3, #167	@ 0xa7
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	5cd3      	ldrb	r3, [r2, r3]
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d002      	beq.n	8006b06 <USBD_StdEPReq+0xa4>
 8006b00:	2b03      	cmp	r3, #3
 8006b02:	d01d      	beq.n	8006b40 <USBD_StdEPReq+0xde>
 8006b04:	e039      	b.n	8006b7a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b06:	220e      	movs	r2, #14
 8006b08:	18bb      	adds	r3, r7, r2
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d010      	beq.n	8006b32 <USBD_StdEPReq+0xd0>
 8006b10:	18bb      	adds	r3, r7, r2
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	2b80      	cmp	r3, #128	@ 0x80
 8006b16:	d00c      	beq.n	8006b32 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006b18:	18bb      	adds	r3, r7, r2
 8006b1a:	781a      	ldrb	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	0011      	movs	r1, r2
 8006b20:	0018      	movs	r0, r3
 8006b22:	f001 f9fa 	bl	8007f1a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2180      	movs	r1, #128	@ 0x80
 8006b2a:	0018      	movs	r0, r3
 8006b2c:	f001 f9f5 	bl	8007f1a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b30:	e02a      	b.n	8006b88 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	0011      	movs	r1, r2
 8006b38:	0018      	movs	r0, r3
 8006b3a:	f000 fcf2 	bl	8007522 <USBD_CtlError>
              break;
 8006b3e:	e023      	b.n	8006b88 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	885b      	ldrh	r3, [r3, #2]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d113      	bne.n	8006b70 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8006b48:	220e      	movs	r2, #14
 8006b4a:	18bb      	adds	r3, r7, r2
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00e      	beq.n	8006b70 <USBD_StdEPReq+0x10e>
 8006b52:	18bb      	adds	r3, r7, r2
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	2b80      	cmp	r3, #128	@ 0x80
 8006b58:	d00a      	beq.n	8006b70 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	88db      	ldrh	r3, [r3, #6]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006b62:	18bb      	adds	r3, r7, r2
 8006b64:	781a      	ldrb	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	0011      	movs	r1, r2
 8006b6a:	0018      	movs	r0, r3
 8006b6c:	f001 f9d5 	bl	8007f1a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	0018      	movs	r0, r3
 8006b74:	f000 fdbd 	bl	80076f2 <USBD_CtlSendStatus>

              break;
 8006b78:	e006      	b.n	8006b88 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	0011      	movs	r1, r2
 8006b80:	0018      	movs	r0, r3
 8006b82:	f000 fcce 	bl	8007522 <USBD_CtlError>
              break;
 8006b86:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8006b88:	e112      	b.n	8006db0 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	23a7      	movs	r3, #167	@ 0xa7
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	5cd3      	ldrb	r3, [r2, r3]
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d002      	beq.n	8006b9c <USBD_StdEPReq+0x13a>
 8006b96:	2b03      	cmp	r3, #3
 8006b98:	d01d      	beq.n	8006bd6 <USBD_StdEPReq+0x174>
 8006b9a:	e032      	b.n	8006c02 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b9c:	220e      	movs	r2, #14
 8006b9e:	18bb      	adds	r3, r7, r2
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d010      	beq.n	8006bc8 <USBD_StdEPReq+0x166>
 8006ba6:	18bb      	adds	r3, r7, r2
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	2b80      	cmp	r3, #128	@ 0x80
 8006bac:	d00c      	beq.n	8006bc8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006bae:	18bb      	adds	r3, r7, r2
 8006bb0:	781a      	ldrb	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	0011      	movs	r1, r2
 8006bb6:	0018      	movs	r0, r3
 8006bb8:	f001 f9af 	bl	8007f1a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2180      	movs	r1, #128	@ 0x80
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	f001 f9aa 	bl	8007f1a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bc6:	e024      	b.n	8006c12 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	0011      	movs	r1, r2
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f000 fca7 	bl	8007522 <USBD_CtlError>
              break;
 8006bd4:	e01d      	b.n	8006c12 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	885b      	ldrh	r3, [r3, #2]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d118      	bne.n	8006c10 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006bde:	210e      	movs	r1, #14
 8006be0:	187b      	adds	r3, r7, r1
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	227f      	movs	r2, #127	@ 0x7f
 8006be6:	4013      	ands	r3, r2
 8006be8:	d006      	beq.n	8006bf8 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006bea:	187b      	adds	r3, r7, r1
 8006bec:	781a      	ldrb	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	0011      	movs	r1, r2
 8006bf2:	0018      	movs	r0, r3
 8006bf4:	f001 f9bc 	bl	8007f70 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	f000 fd79 	bl	80076f2 <USBD_CtlSendStatus>
              }
              break;
 8006c00:	e006      	b.n	8006c10 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	0011      	movs	r1, r2
 8006c08:	0018      	movs	r0, r3
 8006c0a:	f000 fc8a 	bl	8007522 <USBD_CtlError>
              break;
 8006c0e:	e000      	b.n	8006c12 <USBD_StdEPReq+0x1b0>
              break;
 8006c10:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8006c12:	e0cd      	b.n	8006db0 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	23a7      	movs	r3, #167	@ 0xa7
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	5cd3      	ldrb	r3, [r2, r3]
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d002      	beq.n	8006c26 <USBD_StdEPReq+0x1c4>
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	d03c      	beq.n	8006c9e <USBD_StdEPReq+0x23c>
 8006c24:	e0b5      	b.n	8006d92 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c26:	220e      	movs	r2, #14
 8006c28:	18bb      	adds	r3, r7, r2
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00a      	beq.n	8006c46 <USBD_StdEPReq+0x1e4>
 8006c30:	18bb      	adds	r3, r7, r2
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	2b80      	cmp	r3, #128	@ 0x80
 8006c36:	d006      	beq.n	8006c46 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	0011      	movs	r1, r2
 8006c3e:	0018      	movs	r0, r3
 8006c40:	f000 fc6f 	bl	8007522 <USBD_CtlError>
                break;
 8006c44:	e0ac      	b.n	8006da0 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c46:	220e      	movs	r2, #14
 8006c48:	18bb      	adds	r3, r7, r2
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	b25b      	sxtb	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	da0c      	bge.n	8006c6c <USBD_StdEPReq+0x20a>
 8006c52:	18bb      	adds	r3, r7, r2
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	227f      	movs	r2, #127	@ 0x7f
 8006c58:	401a      	ands	r2, r3
 8006c5a:	0013      	movs	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	189b      	adds	r3, r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	3310      	adds	r3, #16
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	18d3      	adds	r3, r2, r3
 8006c68:	3304      	adds	r3, #4
 8006c6a:	e00d      	b.n	8006c88 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c6c:	230e      	movs	r3, #14
 8006c6e:	18fb      	adds	r3, r7, r3
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	227f      	movs	r2, #127	@ 0x7f
 8006c74:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c76:	0013      	movs	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	189b      	adds	r3, r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	3351      	adds	r3, #81	@ 0x51
 8006c80:	33ff      	adds	r3, #255	@ 0xff
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	18d3      	adds	r3, r2, r3
 8006c86:	3304      	adds	r3, #4
 8006c88:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c90:	68b9      	ldr	r1, [r7, #8]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2202      	movs	r2, #2
 8006c96:	0018      	movs	r0, r3
 8006c98:	f000 fcc1 	bl	800761e <USBD_CtlSendData>
              break;
 8006c9c:	e080      	b.n	8006da0 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c9e:	220e      	movs	r2, #14
 8006ca0:	18bb      	adds	r3, r7, r2
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	b25b      	sxtb	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	da14      	bge.n	8006cd4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006caa:	18bb      	adds	r3, r7, r2
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	220f      	movs	r2, #15
 8006cb0:	401a      	ands	r2, r3
 8006cb2:	6879      	ldr	r1, [r7, #4]
 8006cb4:	0013      	movs	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	189b      	adds	r3, r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	18cb      	adds	r3, r1, r3
 8006cbe:	3318      	adds	r3, #24
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d11e      	bne.n	8006d04 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	0011      	movs	r1, r2
 8006ccc:	0018      	movs	r0, r3
 8006cce:	f000 fc28 	bl	8007522 <USBD_CtlError>
                  break;
 8006cd2:	e065      	b.n	8006da0 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006cd4:	230e      	movs	r3, #14
 8006cd6:	18fb      	adds	r3, r7, r3
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	220f      	movs	r2, #15
 8006cdc:	401a      	ands	r2, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	23ac      	movs	r3, #172	@ 0xac
 8006ce2:	0059      	lsls	r1, r3, #1
 8006ce4:	0013      	movs	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	189b      	adds	r3, r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	18c3      	adds	r3, r0, r3
 8006cee:	185b      	adds	r3, r3, r1
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d106      	bne.n	8006d04 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	0011      	movs	r1, r2
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f000 fc10 	bl	8007522 <USBD_CtlError>
                  break;
 8006d02:	e04d      	b.n	8006da0 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d04:	220e      	movs	r2, #14
 8006d06:	18bb      	adds	r3, r7, r2
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	b25b      	sxtb	r3, r3
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	da0c      	bge.n	8006d2a <USBD_StdEPReq+0x2c8>
 8006d10:	18bb      	adds	r3, r7, r2
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	227f      	movs	r2, #127	@ 0x7f
 8006d16:	401a      	ands	r2, r3
 8006d18:	0013      	movs	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	189b      	adds	r3, r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	3310      	adds	r3, #16
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	18d3      	adds	r3, r2, r3
 8006d26:	3304      	adds	r3, #4
 8006d28:	e00d      	b.n	8006d46 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d2a:	230e      	movs	r3, #14
 8006d2c:	18fb      	adds	r3, r7, r3
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	227f      	movs	r2, #127	@ 0x7f
 8006d32:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d34:	0013      	movs	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	189b      	adds	r3, r3, r2
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	3351      	adds	r3, #81	@ 0x51
 8006d3e:	33ff      	adds	r3, #255	@ 0xff
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	18d3      	adds	r3, r2, r3
 8006d44:	3304      	adds	r3, #4
 8006d46:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d48:	220e      	movs	r2, #14
 8006d4a:	18bb      	adds	r3, r7, r2
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <USBD_StdEPReq+0x2f8>
 8006d52:	18bb      	adds	r3, r7, r2
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	2b80      	cmp	r3, #128	@ 0x80
 8006d58:	d103      	bne.n	8006d62 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	e010      	b.n	8006d84 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006d62:	230e      	movs	r3, #14
 8006d64:	18fb      	adds	r3, r7, r3
 8006d66:	781a      	ldrb	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	0011      	movs	r1, r2
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	f001 f92a 	bl	8007fc6 <USBD_LL_IsStallEP>
 8006d72:	1e03      	subs	r3, r0, #0
 8006d74:	d003      	beq.n	8006d7e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	e002      	b.n	8006d84 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d84:	68b9      	ldr	r1, [r7, #8]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2202      	movs	r2, #2
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	f000 fc47 	bl	800761e <USBD_CtlSendData>
              break;
 8006d90:	e006      	b.n	8006da0 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	0011      	movs	r1, r2
 8006d98:	0018      	movs	r0, r3
 8006d9a:	f000 fbc2 	bl	8007522 <USBD_CtlError>
              break;
 8006d9e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8006da0:	e006      	b.n	8006db0 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	0011      	movs	r1, r2
 8006da8:	0018      	movs	r0, r3
 8006daa:	f000 fbba 	bl	8007522 <USBD_CtlError>
          break;
 8006dae:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8006db0:	e006      	b.n	8006dc0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	0011      	movs	r1, r2
 8006db8:	0018      	movs	r0, r3
 8006dba:	f000 fbb2 	bl	8007522 <USBD_CtlError>
      break;
 8006dbe:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8006dc0:	230f      	movs	r3, #15
 8006dc2:	18fb      	adds	r3, r7, r3
 8006dc4:	781b      	ldrb	r3, [r3, #0]
}
 8006dc6:	0018      	movs	r0, r3
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	b004      	add	sp, #16
 8006dcc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006dd0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006dda:	2308      	movs	r3, #8
 8006ddc:	18fb      	adds	r3, r7, r3
 8006dde:	2200      	movs	r2, #0
 8006de0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006de6:	230b      	movs	r3, #11
 8006de8:	18fb      	adds	r3, r7, r3
 8006dea:	2200      	movs	r2, #0
 8006dec:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	885b      	ldrh	r3, [r3, #2]
 8006df2:	0a1b      	lsrs	r3, r3, #8
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	2b07      	cmp	r3, #7
 8006df8:	d900      	bls.n	8006dfc <USBD_GetDescriptor+0x2c>
 8006dfa:	e16f      	b.n	80070dc <USBD_GetDescriptor+0x30c>
 8006dfc:	009a      	lsls	r2, r3, #2
 8006dfe:	4bd4      	ldr	r3, [pc, #848]	@ (8007150 <USBD_GetDescriptor+0x380>)
 8006e00:	18d3      	adds	r3, r2, r3
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	23ac      	movs	r3, #172	@ 0xac
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	58d3      	ldr	r3, [r2, r3]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	7c12      	ldrb	r2, [r2, #16]
 8006e14:	2108      	movs	r1, #8
 8006e16:	1879      	adds	r1, r7, r1
 8006e18:	0010      	movs	r0, r2
 8006e1a:	4798      	blx	r3
 8006e1c:	0003      	movs	r3, r0
 8006e1e:	60fb      	str	r3, [r7, #12]
      break;
 8006e20:	e169      	b.n	80070f6 <USBD_GetDescriptor+0x326>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	7c1b      	ldrb	r3, [r3, #16]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10f      	bne.n	8006e4a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	23ad      	movs	r3, #173	@ 0xad
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	58d3      	ldr	r3, [r2, r3]
 8006e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e34:	2208      	movs	r2, #8
 8006e36:	18ba      	adds	r2, r7, r2
 8006e38:	0010      	movs	r0, r2
 8006e3a:	4798      	blx	r3
 8006e3c:	0003      	movs	r3, r0
 8006e3e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	3301      	adds	r3, #1
 8006e44:	2202      	movs	r2, #2
 8006e46:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e48:	e155      	b.n	80070f6 <USBD_GetDescriptor+0x326>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	23ad      	movs	r3, #173	@ 0xad
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	58d3      	ldr	r3, [r2, r3]
 8006e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e54:	2208      	movs	r2, #8
 8006e56:	18ba      	adds	r2, r7, r2
 8006e58:	0010      	movs	r0, r2
 8006e5a:	4798      	blx	r3
 8006e5c:	0003      	movs	r3, r0
 8006e5e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	3301      	adds	r3, #1
 8006e64:	2202      	movs	r2, #2
 8006e66:	701a      	strb	r2, [r3, #0]
      break;
 8006e68:	e145      	b.n	80070f6 <USBD_GetDescriptor+0x326>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	885b      	ldrh	r3, [r3, #2]
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b05      	cmp	r3, #5
 8006e72:	d900      	bls.n	8006e76 <USBD_GetDescriptor+0xa6>
 8006e74:	e0d0      	b.n	8007018 <USBD_GetDescriptor+0x248>
 8006e76:	009a      	lsls	r2, r3, #2
 8006e78:	4bb6      	ldr	r3, [pc, #728]	@ (8007154 <USBD_GetDescriptor+0x384>)
 8006e7a:	18d3      	adds	r3, r2, r3
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	23ac      	movs	r3, #172	@ 0xac
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	58d3      	ldr	r3, [r2, r3]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00d      	beq.n	8006eaa <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	23ac      	movs	r3, #172	@ 0xac
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	58d3      	ldr	r3, [r2, r3]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	7c12      	ldrb	r2, [r2, #16]
 8006e9c:	2108      	movs	r1, #8
 8006e9e:	1879      	adds	r1, r7, r1
 8006ea0:	0010      	movs	r0, r2
 8006ea2:	4798      	blx	r3
 8006ea4:	0003      	movs	r3, r0
 8006ea6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ea8:	e0d9      	b.n	800705e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	0011      	movs	r1, r2
 8006eb0:	0018      	movs	r0, r3
 8006eb2:	f000 fb36 	bl	8007522 <USBD_CtlError>
            err++;
 8006eb6:	210b      	movs	r1, #11
 8006eb8:	187b      	adds	r3, r7, r1
 8006eba:	781a      	ldrb	r2, [r3, #0]
 8006ebc:	187b      	adds	r3, r7, r1
 8006ebe:	3201      	adds	r2, #1
 8006ec0:	701a      	strb	r2, [r3, #0]
          break;
 8006ec2:	e0cc      	b.n	800705e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	23ac      	movs	r3, #172	@ 0xac
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	58d3      	ldr	r3, [r2, r3]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00d      	beq.n	8006eee <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	23ac      	movs	r3, #172	@ 0xac
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	58d3      	ldr	r3, [r2, r3]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	7c12      	ldrb	r2, [r2, #16]
 8006ee0:	2108      	movs	r1, #8
 8006ee2:	1879      	adds	r1, r7, r1
 8006ee4:	0010      	movs	r0, r2
 8006ee6:	4798      	blx	r3
 8006ee8:	0003      	movs	r3, r0
 8006eea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eec:	e0b7      	b.n	800705e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	0011      	movs	r1, r2
 8006ef4:	0018      	movs	r0, r3
 8006ef6:	f000 fb14 	bl	8007522 <USBD_CtlError>
            err++;
 8006efa:	210b      	movs	r1, #11
 8006efc:	187b      	adds	r3, r7, r1
 8006efe:	781a      	ldrb	r2, [r3, #0]
 8006f00:	187b      	adds	r3, r7, r1
 8006f02:	3201      	adds	r2, #1
 8006f04:	701a      	strb	r2, [r3, #0]
          break;
 8006f06:	e0aa      	b.n	800705e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	23ac      	movs	r3, #172	@ 0xac
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	58d3      	ldr	r3, [r2, r3]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00d      	beq.n	8006f32 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	23ac      	movs	r3, #172	@ 0xac
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	58d3      	ldr	r3, [r2, r3]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	7c12      	ldrb	r2, [r2, #16]
 8006f24:	2108      	movs	r1, #8
 8006f26:	1879      	adds	r1, r7, r1
 8006f28:	0010      	movs	r0, r2
 8006f2a:	4798      	blx	r3
 8006f2c:	0003      	movs	r3, r0
 8006f2e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f30:	e095      	b.n	800705e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	0011      	movs	r1, r2
 8006f38:	0018      	movs	r0, r3
 8006f3a:	f000 faf2 	bl	8007522 <USBD_CtlError>
            err++;
 8006f3e:	210b      	movs	r1, #11
 8006f40:	187b      	adds	r3, r7, r1
 8006f42:	781a      	ldrb	r2, [r3, #0]
 8006f44:	187b      	adds	r3, r7, r1
 8006f46:	3201      	adds	r2, #1
 8006f48:	701a      	strb	r2, [r3, #0]
          break;
 8006f4a:	e088      	b.n	800705e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	23ac      	movs	r3, #172	@ 0xac
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	58d3      	ldr	r3, [r2, r3]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00d      	beq.n	8006f76 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	23ac      	movs	r3, #172	@ 0xac
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	58d3      	ldr	r3, [r2, r3]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	7c12      	ldrb	r2, [r2, #16]
 8006f68:	2108      	movs	r1, #8
 8006f6a:	1879      	adds	r1, r7, r1
 8006f6c:	0010      	movs	r0, r2
 8006f6e:	4798      	blx	r3
 8006f70:	0003      	movs	r3, r0
 8006f72:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f74:	e073      	b.n	800705e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	0011      	movs	r1, r2
 8006f7c:	0018      	movs	r0, r3
 8006f7e:	f000 fad0 	bl	8007522 <USBD_CtlError>
            err++;
 8006f82:	210b      	movs	r1, #11
 8006f84:	187b      	adds	r3, r7, r1
 8006f86:	781a      	ldrb	r2, [r3, #0]
 8006f88:	187b      	adds	r3, r7, r1
 8006f8a:	3201      	adds	r2, #1
 8006f8c:	701a      	strb	r2, [r3, #0]
          break;
 8006f8e:	e066      	b.n	800705e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	23ac      	movs	r3, #172	@ 0xac
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	58d3      	ldr	r3, [r2, r3]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00d      	beq.n	8006fba <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	23ac      	movs	r3, #172	@ 0xac
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	58d3      	ldr	r3, [r2, r3]
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	7c12      	ldrb	r2, [r2, #16]
 8006fac:	2108      	movs	r1, #8
 8006fae:	1879      	adds	r1, r7, r1
 8006fb0:	0010      	movs	r0, r2
 8006fb2:	4798      	blx	r3
 8006fb4:	0003      	movs	r3, r0
 8006fb6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fb8:	e051      	b.n	800705e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	0011      	movs	r1, r2
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	f000 faae 	bl	8007522 <USBD_CtlError>
            err++;
 8006fc6:	210b      	movs	r1, #11
 8006fc8:	187b      	adds	r3, r7, r1
 8006fca:	781a      	ldrb	r2, [r3, #0]
 8006fcc:	187b      	adds	r3, r7, r1
 8006fce:	3201      	adds	r2, #1
 8006fd0:	701a      	strb	r2, [r3, #0]
          break;
 8006fd2:	e044      	b.n	800705e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	23ac      	movs	r3, #172	@ 0xac
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	58d3      	ldr	r3, [r2, r3]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00d      	beq.n	8006ffe <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	23ac      	movs	r3, #172	@ 0xac
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	58d3      	ldr	r3, [r2, r3]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	7c12      	ldrb	r2, [r2, #16]
 8006ff0:	2108      	movs	r1, #8
 8006ff2:	1879      	adds	r1, r7, r1
 8006ff4:	0010      	movs	r0, r2
 8006ff6:	4798      	blx	r3
 8006ff8:	0003      	movs	r3, r0
 8006ffa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ffc:	e02f      	b.n	800705e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	0011      	movs	r1, r2
 8007004:	0018      	movs	r0, r3
 8007006:	f000 fa8c 	bl	8007522 <USBD_CtlError>
            err++;
 800700a:	210b      	movs	r1, #11
 800700c:	187b      	adds	r3, r7, r1
 800700e:	781a      	ldrb	r2, [r3, #0]
 8007010:	187b      	adds	r3, r7, r1
 8007012:	3201      	adds	r2, #1
 8007014:	701a      	strb	r2, [r3, #0]
          break;
 8007016:	e022      	b.n	800705e <USBD_GetDescriptor+0x28e>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	23ad      	movs	r3, #173	@ 0xad
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	58d3      	ldr	r3, [r2, r3]
 8007020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00e      	beq.n	8007044 <USBD_GetDescriptor+0x274>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	23ad      	movs	r3, #173	@ 0xad
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	58d3      	ldr	r3, [r2, r3]
 800702e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	8852      	ldrh	r2, [r2, #2]
 8007034:	b2d1      	uxtb	r1, r2
 8007036:	2208      	movs	r2, #8
 8007038:	18ba      	adds	r2, r7, r2
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	4798      	blx	r3
 800703e:	0003      	movs	r3, r0
 8007040:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007042:	e00b      	b.n	800705c <USBD_GetDescriptor+0x28c>
            USBD_CtlError(pdev, req);
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	0011      	movs	r1, r2
 800704a:	0018      	movs	r0, r3
 800704c:	f000 fa69 	bl	8007522 <USBD_CtlError>
            err++;
 8007050:	210b      	movs	r1, #11
 8007052:	187b      	adds	r3, r7, r1
 8007054:	781a      	ldrb	r2, [r3, #0]
 8007056:	187b      	adds	r3, r7, r1
 8007058:	3201      	adds	r2, #1
 800705a:	701a      	strb	r2, [r3, #0]
          break;
 800705c:	46c0      	nop			@ (mov r8, r8)
#else
          USBD_CtlError(pdev, req);
          err++;
#endif
      }
      break;
 800705e:	e04a      	b.n	80070f6 <USBD_GetDescriptor+0x326>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	7c1b      	ldrb	r3, [r3, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10b      	bne.n	8007080 <USBD_GetDescriptor+0x2b0>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	23ad      	movs	r3, #173	@ 0xad
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	58d3      	ldr	r3, [r2, r3]
 8007070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007072:	2208      	movs	r2, #8
 8007074:	18ba      	adds	r2, r7, r2
 8007076:	0010      	movs	r0, r2
 8007078:	4798      	blx	r3
 800707a:	0003      	movs	r3, r0
 800707c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800707e:	e03a      	b.n	80070f6 <USBD_GetDescriptor+0x326>
        USBD_CtlError(pdev, req);
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	0011      	movs	r1, r2
 8007086:	0018      	movs	r0, r3
 8007088:	f000 fa4b 	bl	8007522 <USBD_CtlError>
        err++;
 800708c:	210b      	movs	r1, #11
 800708e:	187b      	adds	r3, r7, r1
 8007090:	781a      	ldrb	r2, [r3, #0]
 8007092:	187b      	adds	r3, r7, r1
 8007094:	3201      	adds	r2, #1
 8007096:	701a      	strb	r2, [r3, #0]
      break;
 8007098:	e02d      	b.n	80070f6 <USBD_GetDescriptor+0x326>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	7c1b      	ldrb	r3, [r3, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10f      	bne.n	80070c2 <USBD_GetDescriptor+0x2f2>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	23ad      	movs	r3, #173	@ 0xad
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	58d3      	ldr	r3, [r2, r3]
 80070aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ac:	2208      	movs	r2, #8
 80070ae:	18ba      	adds	r2, r7, r2
 80070b0:	0010      	movs	r0, r2
 80070b2:	4798      	blx	r3
 80070b4:	0003      	movs	r3, r0
 80070b6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	3301      	adds	r3, #1
 80070bc:	2207      	movs	r2, #7
 80070be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070c0:	e019      	b.n	80070f6 <USBD_GetDescriptor+0x326>
        USBD_CtlError(pdev, req);
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	0011      	movs	r1, r2
 80070c8:	0018      	movs	r0, r3
 80070ca:	f000 fa2a 	bl	8007522 <USBD_CtlError>
        err++;
 80070ce:	210b      	movs	r1, #11
 80070d0:	187b      	adds	r3, r7, r1
 80070d2:	781a      	ldrb	r2, [r3, #0]
 80070d4:	187b      	adds	r3, r7, r1
 80070d6:	3201      	adds	r2, #1
 80070d8:	701a      	strb	r2, [r3, #0]
      break;
 80070da:	e00c      	b.n	80070f6 <USBD_GetDescriptor+0x326>

    default:
      USBD_CtlError(pdev, req);
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	0011      	movs	r1, r2
 80070e2:	0018      	movs	r0, r3
 80070e4:	f000 fa1d 	bl	8007522 <USBD_CtlError>
      err++;
 80070e8:	210b      	movs	r1, #11
 80070ea:	187b      	adds	r3, r7, r1
 80070ec:	781a      	ldrb	r2, [r3, #0]
 80070ee:	187b      	adds	r3, r7, r1
 80070f0:	3201      	adds	r2, #1
 80070f2:	701a      	strb	r2, [r3, #0]
      break;
 80070f4:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 80070f6:	230b      	movs	r3, #11
 80070f8:	18fb      	adds	r3, r7, r3
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d12b      	bne.n	8007158 <USBD_GetDescriptor+0x388>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007100:	2108      	movs	r1, #8
 8007102:	187b      	adds	r3, r7, r1
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d019      	beq.n	800713e <USBD_GetDescriptor+0x36e>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	88db      	ldrh	r3, [r3, #6]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d015      	beq.n	800713e <USBD_GetDescriptor+0x36e>
    {
      len = MIN(len, req->wLength);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	88da      	ldrh	r2, [r3, #6]
 8007116:	187b      	adds	r3, r7, r1
 8007118:	881b      	ldrh	r3, [r3, #0]
 800711a:	1c18      	adds	r0, r3, #0
 800711c:	1c11      	adds	r1, r2, #0
 800711e:	b28a      	uxth	r2, r1
 8007120:	b283      	uxth	r3, r0
 8007122:	429a      	cmp	r2, r3
 8007124:	d900      	bls.n	8007128 <USBD_GetDescriptor+0x358>
 8007126:	1c01      	adds	r1, r0, #0
 8007128:	b28a      	uxth	r2, r1
 800712a:	2108      	movs	r1, #8
 800712c:	187b      	adds	r3, r7, r1
 800712e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007130:	187b      	adds	r3, r7, r1
 8007132:	881a      	ldrh	r2, [r3, #0]
 8007134:	68f9      	ldr	r1, [r7, #12]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	0018      	movs	r0, r3
 800713a:	f000 fa70 	bl	800761e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	88db      	ldrh	r3, [r3, #6]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d109      	bne.n	800715a <USBD_GetDescriptor+0x38a>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	0018      	movs	r0, r3
 800714a:	f000 fad2 	bl	80076f2 <USBD_CtlSendStatus>
 800714e:	e004      	b.n	800715a <USBD_GetDescriptor+0x38a>
 8007150:	08008340 	.word	0x08008340
 8007154:	08008360 	.word	0x08008360
    return;
 8007158:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800715a:	46bd      	mov	sp, r7
 800715c:	b004      	add	sp, #16
 800715e:	bd80      	pop	{r7, pc}

08007160 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007160:	b590      	push	{r4, r7, lr}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	889b      	ldrh	r3, [r3, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d13d      	bne.n	80071ee <USBD_SetAddress+0x8e>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	88db      	ldrh	r3, [r3, #6]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d139      	bne.n	80071ee <USBD_SetAddress+0x8e>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	885b      	ldrh	r3, [r3, #2]
 800717e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007180:	d835      	bhi.n	80071ee <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	885b      	ldrh	r3, [r3, #2]
 8007186:	b2da      	uxtb	r2, r3
 8007188:	230f      	movs	r3, #15
 800718a:	18fb      	adds	r3, r7, r3
 800718c:	217f      	movs	r1, #127	@ 0x7f
 800718e:	400a      	ands	r2, r1
 8007190:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	23a7      	movs	r3, #167	@ 0xa7
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	5cd3      	ldrb	r3, [r2, r3]
 800719a:	2b03      	cmp	r3, #3
 800719c:	d106      	bne.n	80071ac <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	0011      	movs	r1, r2
 80071a4:	0018      	movs	r0, r3
 80071a6:	f000 f9bc 	bl	8007522 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071aa:	e027      	b.n	80071fc <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	240f      	movs	r4, #15
 80071b0:	193a      	adds	r2, r7, r4
 80071b2:	4914      	ldr	r1, [pc, #80]	@ (8007204 <USBD_SetAddress+0xa4>)
 80071b4:	7812      	ldrb	r2, [r2, #0]
 80071b6:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80071b8:	193b      	adds	r3, r7, r4
 80071ba:	781a      	ldrb	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	0011      	movs	r1, r2
 80071c0:	0018      	movs	r0, r3
 80071c2:	f000 ff30 	bl	8008026 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	0018      	movs	r0, r3
 80071ca:	f000 fa92 	bl	80076f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80071ce:	193b      	adds	r3, r7, r4
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d005      	beq.n	80071e2 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	23a7      	movs	r3, #167	@ 0xa7
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	2102      	movs	r1, #2
 80071de:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e0:	e00c      	b.n	80071fc <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	23a7      	movs	r3, #167	@ 0xa7
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	2101      	movs	r1, #1
 80071ea:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ec:	e006      	b.n	80071fc <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	0011      	movs	r1, r2
 80071f4:	0018      	movs	r0, r3
 80071f6:	f000 f994 	bl	8007522 <USBD_CtlError>
  }
}
 80071fa:	46c0      	nop			@ (mov r8, r8)
 80071fc:	46c0      	nop			@ (mov r8, r8)
 80071fe:	46bd      	mov	sp, r7
 8007200:	b005      	add	sp, #20
 8007202:	bd90      	pop	{r4, r7, pc}
 8007204:	0000029e 	.word	0x0000029e

08007208 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	885b      	ldrh	r3, [r3, #2]
 8007216:	b2da      	uxtb	r2, r3
 8007218:	4b4c      	ldr	r3, [pc, #304]	@ (800734c <USBD_SetConfig+0x144>)
 800721a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800721c:	4b4b      	ldr	r3, [pc, #300]	@ (800734c <USBD_SetConfig+0x144>)
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d906      	bls.n	8007232 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	0011      	movs	r1, r2
 800722a:	0018      	movs	r0, r3
 800722c:	f000 f979 	bl	8007522 <USBD_CtlError>
 8007230:	e088      	b.n	8007344 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	23a7      	movs	r3, #167	@ 0xa7
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	5cd3      	ldrb	r3, [r2, r3]
 800723a:	2b02      	cmp	r3, #2
 800723c:	d002      	beq.n	8007244 <USBD_SetConfig+0x3c>
 800723e:	2b03      	cmp	r3, #3
 8007240:	d029      	beq.n	8007296 <USBD_SetConfig+0x8e>
 8007242:	e071      	b.n	8007328 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007244:	4b41      	ldr	r3, [pc, #260]	@ (800734c <USBD_SetConfig+0x144>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d01f      	beq.n	800728c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800724c:	4b3f      	ldr	r3, [pc, #252]	@ (800734c <USBD_SetConfig+0x144>)
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	001a      	movs	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	23a7      	movs	r3, #167	@ 0xa7
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	2103      	movs	r1, #3
 800725e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007260:	4b3a      	ldr	r3, [pc, #232]	@ (800734c <USBD_SetConfig+0x144>)
 8007262:	781a      	ldrb	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	0011      	movs	r1, r2
 8007268:	0018      	movs	r0, r3
 800726a:	f7ff f8b0 	bl	80063ce <USBD_SetClassConfig>
 800726e:	0003      	movs	r3, r0
 8007270:	2b02      	cmp	r3, #2
 8007272:	d106      	bne.n	8007282 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8007274:	683a      	ldr	r2, [r7, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	0011      	movs	r1, r2
 800727a:	0018      	movs	r0, r3
 800727c:	f000 f951 	bl	8007522 <USBD_CtlError>
            return;
 8007280:	e060      	b.n	8007344 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	0018      	movs	r0, r3
 8007286:	f000 fa34 	bl	80076f2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800728a:	e05b      	b.n	8007344 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	0018      	movs	r0, r3
 8007290:	f000 fa2f 	bl	80076f2 <USBD_CtlSendStatus>
        break;
 8007294:	e056      	b.n	8007344 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007296:	4b2d      	ldr	r3, [pc, #180]	@ (800734c <USBD_SetConfig+0x144>)
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d115      	bne.n	80072ca <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	23a7      	movs	r3, #167	@ 0xa7
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	2102      	movs	r1, #2
 80072a6:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 80072a8:	4b28      	ldr	r3, [pc, #160]	@ (800734c <USBD_SetConfig+0x144>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	001a      	movs	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80072b2:	4b26      	ldr	r3, [pc, #152]	@ (800734c <USBD_SetConfig+0x144>)
 80072b4:	781a      	ldrb	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	0011      	movs	r1, r2
 80072ba:	0018      	movs	r0, r3
 80072bc:	f7ff f8ae 	bl	800641c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	0018      	movs	r0, r3
 80072c4:	f000 fa15 	bl	80076f2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80072c8:	e03c      	b.n	8007344 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 80072ca:	4b20      	ldr	r3, [pc, #128]	@ (800734c <USBD_SetConfig+0x144>)
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	001a      	movs	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d022      	beq.n	800731e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	b2da      	uxtb	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	0011      	movs	r1, r2
 80072e2:	0018      	movs	r0, r3
 80072e4:	f7ff f89a 	bl	800641c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80072e8:	4b18      	ldr	r3, [pc, #96]	@ (800734c <USBD_SetConfig+0x144>)
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	001a      	movs	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80072f2:	4b16      	ldr	r3, [pc, #88]	@ (800734c <USBD_SetConfig+0x144>)
 80072f4:	781a      	ldrb	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	0011      	movs	r1, r2
 80072fa:	0018      	movs	r0, r3
 80072fc:	f7ff f867 	bl	80063ce <USBD_SetClassConfig>
 8007300:	0003      	movs	r3, r0
 8007302:	2b02      	cmp	r3, #2
 8007304:	d106      	bne.n	8007314 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	0011      	movs	r1, r2
 800730c:	0018      	movs	r0, r3
 800730e:	f000 f908 	bl	8007522 <USBD_CtlError>
            return;
 8007312:	e017      	b.n	8007344 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	0018      	movs	r0, r3
 8007318:	f000 f9eb 	bl	80076f2 <USBD_CtlSendStatus>
        break;
 800731c:	e012      	b.n	8007344 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	0018      	movs	r0, r3
 8007322:	f000 f9e6 	bl	80076f2 <USBD_CtlSendStatus>
        break;
 8007326:	e00d      	b.n	8007344 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	0011      	movs	r1, r2
 800732e:	0018      	movs	r0, r3
 8007330:	f000 f8f7 	bl	8007522 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007334:	4b05      	ldr	r3, [pc, #20]	@ (800734c <USBD_SetConfig+0x144>)
 8007336:	781a      	ldrb	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	0011      	movs	r1, r2
 800733c:	0018      	movs	r0, r3
 800733e:	f7ff f86d 	bl	800641c <USBD_ClrClassConfig>
        break;
 8007342:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8007344:	46bd      	mov	sp, r7
 8007346:	b002      	add	sp, #8
 8007348:	bd80      	pop	{r7, pc}
 800734a:	46c0      	nop			@ (mov r8, r8)
 800734c:	200002e7 	.word	0x200002e7

08007350 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	88db      	ldrh	r3, [r3, #6]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d006      	beq.n	8007370 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	0011      	movs	r1, r2
 8007368:	0018      	movs	r0, r3
 800736a:	f000 f8da 	bl	8007522 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800736e:	e026      	b.n	80073be <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	23a7      	movs	r3, #167	@ 0xa7
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	5cd3      	ldrb	r3, [r2, r3]
 8007378:	2b02      	cmp	r3, #2
 800737a:	dc02      	bgt.n	8007382 <USBD_GetConfig+0x32>
 800737c:	2b00      	cmp	r3, #0
 800737e:	dc03      	bgt.n	8007388 <USBD_GetConfig+0x38>
 8007380:	e016      	b.n	80073b0 <USBD_GetConfig+0x60>
 8007382:	2b03      	cmp	r3, #3
 8007384:	d00c      	beq.n	80073a0 <USBD_GetConfig+0x50>
 8007386:	e013      	b.n	80073b0 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	3308      	adds	r3, #8
 8007392:	0019      	movs	r1, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	0018      	movs	r0, r3
 800739a:	f000 f940 	bl	800761e <USBD_CtlSendData>
        break;
 800739e:	e00e      	b.n	80073be <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	1d19      	adds	r1, r3, #4
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	0018      	movs	r0, r3
 80073aa:	f000 f938 	bl	800761e <USBD_CtlSendData>
        break;
 80073ae:	e006      	b.n	80073be <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	0011      	movs	r1, r2
 80073b6:	0018      	movs	r0, r3
 80073b8:	f000 f8b3 	bl	8007522 <USBD_CtlError>
        break;
 80073bc:	46c0      	nop			@ (mov r8, r8)
}
 80073be:	46c0      	nop			@ (mov r8, r8)
 80073c0:	46bd      	mov	sp, r7
 80073c2:	b002      	add	sp, #8
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	23a7      	movs	r3, #167	@ 0xa7
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	5cd3      	ldrb	r3, [r2, r3]
 80073d8:	3b01      	subs	r3, #1
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d822      	bhi.n	8007424 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	88db      	ldrh	r3, [r3, #6]
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d006      	beq.n	80073f4 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	0011      	movs	r1, r2
 80073ec:	0018      	movs	r0, r3
 80073ee:	f000 f898 	bl	8007522 <USBD_CtlError>
        break;
 80073f2:	e01e      	b.n	8007432 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	23a9      	movs	r3, #169	@ 0xa9
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	58d3      	ldr	r3, [r2, r3]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d005      	beq.n	8007412 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	2202      	movs	r2, #2
 800740c:	431a      	orrs	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	330c      	adds	r3, #12
 8007416:	0019      	movs	r1, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2202      	movs	r2, #2
 800741c:	0018      	movs	r0, r3
 800741e:	f000 f8fe 	bl	800761e <USBD_CtlSendData>
      break;
 8007422:	e006      	b.n	8007432 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	0011      	movs	r1, r2
 800742a:	0018      	movs	r0, r3
 800742c:	f000 f879 	bl	8007522 <USBD_CtlError>
      break;
 8007430:	46c0      	nop			@ (mov r8, r8)
  }
}
 8007432:	46c0      	nop			@ (mov r8, r8)
 8007434:	46bd      	mov	sp, r7
 8007436:	b002      	add	sp, #8
 8007438:	bd80      	pop	{r7, pc}

0800743a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b082      	sub	sp, #8
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	885b      	ldrh	r3, [r3, #2]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d108      	bne.n	800745e <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	23a9      	movs	r3, #169	@ 0xa9
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	2101      	movs	r1, #1
 8007454:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	0018      	movs	r0, r3
 800745a:	f000 f94a 	bl	80076f2 <USBD_CtlSendStatus>
  }
}
 800745e:	46c0      	nop			@ (mov r8, r8)
 8007460:	46bd      	mov	sp, r7
 8007462:	b002      	add	sp, #8
 8007464:	bd80      	pop	{r7, pc}

08007466 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b082      	sub	sp, #8
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	23a7      	movs	r3, #167	@ 0xa7
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	5cd3      	ldrb	r3, [r2, r3]
 8007478:	3b01      	subs	r3, #1
 800747a:	2b02      	cmp	r3, #2
 800747c:	d80d      	bhi.n	800749a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	885b      	ldrh	r3, [r3, #2]
 8007482:	2b01      	cmp	r3, #1
 8007484:	d110      	bne.n	80074a8 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	23a9      	movs	r3, #169	@ 0xa9
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	2100      	movs	r1, #0
 800748e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	0018      	movs	r0, r3
 8007494:	f000 f92d 	bl	80076f2 <USBD_CtlSendStatus>
      }
      break;
 8007498:	e006      	b.n	80074a8 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	0011      	movs	r1, r2
 80074a0:	0018      	movs	r0, r3
 80074a2:	f000 f83e 	bl	8007522 <USBD_CtlError>
      break;
 80074a6:	e000      	b.n	80074aa <USBD_ClrFeature+0x44>
      break;
 80074a8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80074aa:	46c0      	nop			@ (mov r8, r8)
 80074ac:	46bd      	mov	sp, r7
 80074ae:	b002      	add	sp, #8
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b082      	sub	sp, #8
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781a      	ldrb	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	785a      	ldrb	r2, [r3, #1]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	3302      	adds	r3, #2
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	001a      	movs	r2, r3
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	3303      	adds	r3, #3
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	021b      	lsls	r3, r3, #8
 80074dc:	b29b      	uxth	r3, r3
 80074de:	18d3      	adds	r3, r2, r3
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	3304      	adds	r3, #4
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	001a      	movs	r2, r3
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	3305      	adds	r3, #5
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	021b      	lsls	r3, r3, #8
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	18d3      	adds	r3, r2, r3
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	3306      	adds	r3, #6
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	001a      	movs	r2, r3
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	3307      	adds	r3, #7
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	021b      	lsls	r3, r3, #8
 8007510:	b29b      	uxth	r3, r3
 8007512:	18d3      	adds	r3, r2, r3
 8007514:	b29a      	uxth	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	80da      	strh	r2, [r3, #6]

}
 800751a:	46c0      	nop			@ (mov r8, r8)
 800751c:	46bd      	mov	sp, r7
 800751e:	b002      	add	sp, #8
 8007520:	bd80      	pop	{r7, pc}

08007522 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b082      	sub	sp, #8
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2180      	movs	r1, #128	@ 0x80
 8007530:	0018      	movs	r0, r3
 8007532:	f000 fcf2 	bl	8007f1a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2100      	movs	r1, #0
 800753a:	0018      	movs	r0, r3
 800753c:	f000 fced 	bl	8007f1a <USBD_LL_StallEP>
}
 8007540:	46c0      	nop			@ (mov r8, r8)
 8007542:	46bd      	mov	sp, r7
 8007544:	b002      	add	sp, #8
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007548:	b590      	push	{r4, r7, lr}
 800754a:	b087      	sub	sp, #28
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007554:	2417      	movs	r4, #23
 8007556:	193b      	adds	r3, r7, r4
 8007558:	2200      	movs	r2, #0
 800755a:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d03c      	beq.n	80075dc <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	0018      	movs	r0, r3
 8007566:	f000 f83d 	bl	80075e4 <USBD_GetLen>
 800756a:	0003      	movs	r3, r0
 800756c:	3301      	adds	r3, #1
 800756e:	b29b      	uxth	r3, r3
 8007570:	18db      	adds	r3, r3, r3
 8007572:	b29a      	uxth	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007578:	193b      	adds	r3, r7, r4
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	193a      	adds	r2, r7, r4
 800757e:	1c59      	adds	r1, r3, #1
 8007580:	7011      	strb	r1, [r2, #0]
 8007582:	001a      	movs	r2, r3
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	189b      	adds	r3, r3, r2
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	7812      	ldrb	r2, [r2, #0]
 800758c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800758e:	193b      	adds	r3, r7, r4
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	193a      	adds	r2, r7, r4
 8007594:	1c59      	adds	r1, r3, #1
 8007596:	7011      	strb	r1, [r2, #0]
 8007598:	001a      	movs	r2, r3
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	189b      	adds	r3, r3, r2
 800759e:	2203      	movs	r2, #3
 80075a0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80075a2:	e017      	b.n	80075d4 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	1c5a      	adds	r2, r3, #1
 80075a8:	60fa      	str	r2, [r7, #12]
 80075aa:	2417      	movs	r4, #23
 80075ac:	193a      	adds	r2, r7, r4
 80075ae:	7812      	ldrb	r2, [r2, #0]
 80075b0:	1939      	adds	r1, r7, r4
 80075b2:	1c50      	adds	r0, r2, #1
 80075b4:	7008      	strb	r0, [r1, #0]
 80075b6:	0011      	movs	r1, r2
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	1852      	adds	r2, r2, r1
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80075c0:	193b      	adds	r3, r7, r4
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	193a      	adds	r2, r7, r4
 80075c6:	1c59      	adds	r1, r3, #1
 80075c8:	7011      	strb	r1, [r2, #0]
 80075ca:	001a      	movs	r2, r3
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	189b      	adds	r3, r3, r2
 80075d0:	2200      	movs	r2, #0
 80075d2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1e3      	bne.n	80075a4 <USBD_GetString+0x5c>
    }
  }
}
 80075dc:	46c0      	nop			@ (mov r8, r8)
 80075de:	46bd      	mov	sp, r7
 80075e0:	b007      	add	sp, #28
 80075e2:	bd90      	pop	{r4, r7, pc}

080075e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80075ec:	230f      	movs	r3, #15
 80075ee:	18fb      	adds	r3, r7, r3
 80075f0:	2200      	movs	r2, #0
 80075f2:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80075f4:	e008      	b.n	8007608 <USBD_GetLen+0x24>
  {
    len++;
 80075f6:	210f      	movs	r1, #15
 80075f8:	187b      	adds	r3, r7, r1
 80075fa:	781a      	ldrb	r2, [r3, #0]
 80075fc:	187b      	adds	r3, r7, r1
 80075fe:	3201      	adds	r2, #1
 8007600:	701a      	strb	r2, [r3, #0]
    buf++;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	3301      	adds	r3, #1
 8007606:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1f2      	bne.n	80075f6 <USBD_GetLen+0x12>
  }

  return len;
 8007610:	230f      	movs	r3, #15
 8007612:	18fb      	adds	r3, r7, r3
 8007614:	781b      	ldrb	r3, [r3, #0]
}
 8007616:	0018      	movs	r0, r3
 8007618:	46bd      	mov	sp, r7
 800761a:	b004      	add	sp, #16
 800761c:	bd80      	pop	{r7, pc}

0800761e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b084      	sub	sp, #16
 8007622:	af00      	add	r7, sp, #0
 8007624:	60f8      	str	r0, [r7, #12]
 8007626:	60b9      	str	r1, [r7, #8]
 8007628:	1dbb      	adds	r3, r7, #6
 800762a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	23a5      	movs	r3, #165	@ 0xa5
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	2102      	movs	r1, #2
 8007634:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8007636:	1dbb      	adds	r3, r7, #6
 8007638:	881a      	ldrh	r2, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800763e:	1dbb      	adds	r3, r7, #6
 8007640:	881a      	ldrh	r2, [r3, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007646:	1dbb      	adds	r3, r7, #6
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	2100      	movs	r1, #0
 8007650:	f000 fd14 	bl	800807c <USBD_LL_Transmit>

  return USBD_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	0018      	movs	r0, r3
 8007658:	46bd      	mov	sp, r7
 800765a:	b004      	add	sp, #16
 800765c:	bd80      	pop	{r7, pc}

0800765e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b084      	sub	sp, #16
 8007662:	af00      	add	r7, sp, #0
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	1dbb      	adds	r3, r7, #6
 800766a:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800766c:	1dbb      	adds	r3, r7, #6
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	2100      	movs	r1, #0
 8007676:	f000 fd01 	bl	800807c <USBD_LL_Transmit>

  return USBD_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	0018      	movs	r0, r3
 800767e:	46bd      	mov	sp, r7
 8007680:	b004      	add	sp, #16
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	1dbb      	adds	r3, r7, #6
 8007690:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	23a5      	movs	r3, #165	@ 0xa5
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	2103      	movs	r1, #3
 800769a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800769c:	1dbb      	adds	r3, r7, #6
 800769e:	8819      	ldrh	r1, [r3, #0]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	23ae      	movs	r3, #174	@ 0xae
 80076a4:	005b      	lsls	r3, r3, #1
 80076a6:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 80076a8:	1dbb      	adds	r3, r7, #6
 80076aa:	8819      	ldrh	r1, [r3, #0]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	23b0      	movs	r3, #176	@ 0xb0
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076b4:	1dbb      	adds	r3, r7, #6
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	2100      	movs	r1, #0
 80076be:	f000 fd14 	bl	80080ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	0018      	movs	r0, r3
 80076c6:	46bd      	mov	sp, r7
 80076c8:	b004      	add	sp, #16
 80076ca:	bd80      	pop	{r7, pc}

080076cc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	1dbb      	adds	r3, r7, #6
 80076d8:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076da:	1dbb      	adds	r3, r7, #6
 80076dc:	881b      	ldrh	r3, [r3, #0]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	2100      	movs	r1, #0
 80076e4:	f000 fd01 	bl	80080ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	0018      	movs	r0, r3
 80076ec:	46bd      	mov	sp, r7
 80076ee:	b004      	add	sp, #16
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b082      	sub	sp, #8
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	23a5      	movs	r3, #165	@ 0xa5
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	2104      	movs	r1, #4
 8007702:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	2300      	movs	r3, #0
 8007708:	2200      	movs	r2, #0
 800770a:	2100      	movs	r1, #0
 800770c:	f000 fcb6 	bl	800807c <USBD_LL_Transmit>

  return USBD_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	0018      	movs	r0, r3
 8007714:	46bd      	mov	sp, r7
 8007716:	b002      	add	sp, #8
 8007718:	bd80      	pop	{r7, pc}

0800771a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b082      	sub	sp, #8
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	23a5      	movs	r3, #165	@ 0xa5
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	2105      	movs	r1, #5
 800772a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	2300      	movs	r3, #0
 8007730:	2200      	movs	r2, #0
 8007732:	2100      	movs	r1, #0
 8007734:	f000 fcd9 	bl	80080ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	0018      	movs	r0, r3
 800773c:	46bd      	mov	sp, r7
 800773e:	b002      	add	sp, #8
 8007740:	bd80      	pop	{r7, pc}
	...

08007744 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007748:	4914      	ldr	r1, [pc, #80]	@ (800779c <MX_USB_DEVICE_Init+0x58>)
 800774a:	4b15      	ldr	r3, [pc, #84]	@ (80077a0 <MX_USB_DEVICE_Init+0x5c>)
 800774c:	2200      	movs	r2, #0
 800774e:	0018      	movs	r0, r3
 8007750:	f7fe fdbe 	bl	80062d0 <USBD_Init>
 8007754:	1e03      	subs	r3, r0, #0
 8007756:	d001      	beq.n	800775c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007758:	f7f8 fe20 	bl	800039c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 800775c:	4a11      	ldr	r2, [pc, #68]	@ (80077a4 <MX_USB_DEVICE_Init+0x60>)
 800775e:	4b10      	ldr	r3, [pc, #64]	@ (80077a0 <MX_USB_DEVICE_Init+0x5c>)
 8007760:	0011      	movs	r1, r2
 8007762:	0018      	movs	r0, r3
 8007764:	f7fe fde5 	bl	8006332 <USBD_RegisterClass>
 8007768:	1e03      	subs	r3, r0, #0
 800776a:	d001      	beq.n	8007770 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800776c:	f7f8 fe16 	bl	800039c <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8007770:	4a0d      	ldr	r2, [pc, #52]	@ (80077a8 <MX_USB_DEVICE_Init+0x64>)
 8007772:	4b0b      	ldr	r3, [pc, #44]	@ (80077a0 <MX_USB_DEVICE_Init+0x5c>)
 8007774:	0011      	movs	r1, r2
 8007776:	0018      	movs	r0, r3
 8007778:	f7fe f9b8 	bl	8005aec <USBD_DFU_RegisterMedia>
 800777c:	1e03      	subs	r3, r0, #0
 800777e:	d001      	beq.n	8007784 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8007780:	f7f8 fe0c 	bl	800039c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007784:	4b06      	ldr	r3, [pc, #24]	@ (80077a0 <MX_USB_DEVICE_Init+0x5c>)
 8007786:	0018      	movs	r0, r3
 8007788:	f7fe fdf3 	bl	8006372 <USBD_Start>
 800778c:	1e03      	subs	r3, r0, #0
 800778e:	d001      	beq.n	8007794 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8007790:	f7f8 fe04 	bl	800039c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007794:	46c0      	nop			@ (mov r8, r8)
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	46c0      	nop			@ (mov r8, r8)
 800779c:	2000013c 	.word	0x2000013c
 80077a0:	200002e8 	.word	0x200002e8
 80077a4:	2000000c 	.word	0x2000000c
 80077a8:	2000018c 	.word	0x2000018c

080077ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	0002      	movs	r2, r0
 80077b4:	6039      	str	r1, [r7, #0]
 80077b6:	1dfb      	adds	r3, r7, #7
 80077b8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2212      	movs	r2, #18
 80077be:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80077c0:	4b02      	ldr	r3, [pc, #8]	@ (80077cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80077c2:	0018      	movs	r0, r3
 80077c4:	46bd      	mov	sp, r7
 80077c6:	b002      	add	sp, #8
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	46c0      	nop			@ (mov r8, r8)
 80077cc:	20000158 	.word	0x20000158

080077d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	0002      	movs	r2, r0
 80077d8:	6039      	str	r1, [r7, #0]
 80077da:	1dfb      	adds	r3, r7, #7
 80077dc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	2204      	movs	r2, #4
 80077e2:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80077e4:	4b02      	ldr	r3, [pc, #8]	@ (80077f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80077e6:	0018      	movs	r0, r3
 80077e8:	46bd      	mov	sp, r7
 80077ea:	b002      	add	sp, #8
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	46c0      	nop			@ (mov r8, r8)
 80077f0:	2000016c 	.word	0x2000016c

080077f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	0002      	movs	r2, r0
 80077fc:	6039      	str	r1, [r7, #0]
 80077fe:	1dfb      	adds	r3, r7, #7
 8007800:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007802:	1dfb      	adds	r3, r7, #7
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d106      	bne.n	8007818 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	4908      	ldr	r1, [pc, #32]	@ (8007830 <USBD_FS_ProductStrDescriptor+0x3c>)
 800780e:	4b09      	ldr	r3, [pc, #36]	@ (8007834 <USBD_FS_ProductStrDescriptor+0x40>)
 8007810:	0018      	movs	r0, r3
 8007812:	f7ff fe99 	bl	8007548 <USBD_GetString>
 8007816:	e005      	b.n	8007824 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	4905      	ldr	r1, [pc, #20]	@ (8007830 <USBD_FS_ProductStrDescriptor+0x3c>)
 800781c:	4b05      	ldr	r3, [pc, #20]	@ (8007834 <USBD_FS_ProductStrDescriptor+0x40>)
 800781e:	0018      	movs	r0, r3
 8007820:	f7ff fe92 	bl	8007548 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007824:	4b02      	ldr	r3, [pc, #8]	@ (8007830 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8007826:	0018      	movs	r0, r3
 8007828:	46bd      	mov	sp, r7
 800782a:	b002      	add	sp, #8
 800782c:	bd80      	pop	{r7, pc}
 800782e:	46c0      	nop			@ (mov r8, r8)
 8007830:	200005ac 	.word	0x200005ac
 8007834:	0800826c 	.word	0x0800826c

08007838 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	0002      	movs	r2, r0
 8007840:	6039      	str	r1, [r7, #0]
 8007842:	1dfb      	adds	r3, r7, #7
 8007844:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	4904      	ldr	r1, [pc, #16]	@ (800785c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800784a:	4b05      	ldr	r3, [pc, #20]	@ (8007860 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800784c:	0018      	movs	r0, r3
 800784e:	f7ff fe7b 	bl	8007548 <USBD_GetString>
  return USBD_StrDesc;
 8007852:	4b02      	ldr	r3, [pc, #8]	@ (800785c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8007854:	0018      	movs	r0, r3
 8007856:	46bd      	mov	sp, r7
 8007858:	b002      	add	sp, #8
 800785a:	bd80      	pop	{r7, pc}
 800785c:	200005ac 	.word	0x200005ac
 8007860:	08008278 	.word	0x08008278

08007864 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	0002      	movs	r2, r0
 800786c:	6039      	str	r1, [r7, #0]
 800786e:	1dfb      	adds	r3, r7, #7
 8007870:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	221a      	movs	r2, #26
 8007876:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007878:	f000 f84c 	bl	8007914 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800787c:	4b02      	ldr	r3, [pc, #8]	@ (8007888 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800787e:	0018      	movs	r0, r3
 8007880:	46bd      	mov	sp, r7
 8007882:	b002      	add	sp, #8
 8007884:	bd80      	pop	{r7, pc}
 8007886:	46c0      	nop			@ (mov r8, r8)
 8007888:	20000170 	.word	0x20000170

0800788c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	0002      	movs	r2, r0
 8007894:	6039      	str	r1, [r7, #0]
 8007896:	1dfb      	adds	r3, r7, #7
 8007898:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800789a:	1dfb      	adds	r3, r7, #7
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d106      	bne.n	80078b0 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	4908      	ldr	r1, [pc, #32]	@ (80078c8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80078a6:	4b09      	ldr	r3, [pc, #36]	@ (80078cc <USBD_FS_ConfigStrDescriptor+0x40>)
 80078a8:	0018      	movs	r0, r3
 80078aa:	f7ff fe4d 	bl	8007548 <USBD_GetString>
 80078ae:	e005      	b.n	80078bc <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078b0:	683a      	ldr	r2, [r7, #0]
 80078b2:	4905      	ldr	r1, [pc, #20]	@ (80078c8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80078b4:	4b05      	ldr	r3, [pc, #20]	@ (80078cc <USBD_FS_ConfigStrDescriptor+0x40>)
 80078b6:	0018      	movs	r0, r3
 80078b8:	f7ff fe46 	bl	8007548 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078bc:	4b02      	ldr	r3, [pc, #8]	@ (80078c8 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80078be:	0018      	movs	r0, r3
 80078c0:	46bd      	mov	sp, r7
 80078c2:	b002      	add	sp, #8
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	46c0      	nop			@ (mov r8, r8)
 80078c8:	200005ac 	.word	0x200005ac
 80078cc:	08008280 	.word	0x08008280

080078d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	0002      	movs	r2, r0
 80078d8:	6039      	str	r1, [r7, #0]
 80078da:	1dfb      	adds	r3, r7, #7
 80078dc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80078de:	1dfb      	adds	r3, r7, #7
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d106      	bne.n	80078f4 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	4908      	ldr	r1, [pc, #32]	@ (800790c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80078ea:	4b09      	ldr	r3, [pc, #36]	@ (8007910 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80078ec:	0018      	movs	r0, r3
 80078ee:	f7ff fe2b 	bl	8007548 <USBD_GetString>
 80078f2:	e005      	b.n	8007900 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	4905      	ldr	r1, [pc, #20]	@ (800790c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80078f8:	4b05      	ldr	r3, [pc, #20]	@ (8007910 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80078fa:	0018      	movs	r0, r3
 80078fc:	f7ff fe24 	bl	8007548 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007900:	4b02      	ldr	r3, [pc, #8]	@ (800790c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8007902:	0018      	movs	r0, r3
 8007904:	46bd      	mov	sp, r7
 8007906:	b002      	add	sp, #8
 8007908:	bd80      	pop	{r7, pc}
 800790a:	46c0      	nop			@ (mov r8, r8)
 800790c:	200005ac 	.word	0x200005ac
 8007910:	0800828c 	.word	0x0800828c

08007914 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800791a:	4b10      	ldr	r3, [pc, #64]	@ (800795c <Get_SerialNum+0x48>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007920:	4b0f      	ldr	r3, [pc, #60]	@ (8007960 <Get_SerialNum+0x4c>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007926:	4b0f      	ldr	r3, [pc, #60]	@ (8007964 <Get_SerialNum+0x50>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	18d3      	adds	r3, r2, r3
 8007932:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00b      	beq.n	8007952 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800793a:	490b      	ldr	r1, [pc, #44]	@ (8007968 <Get_SerialNum+0x54>)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2208      	movs	r2, #8
 8007940:	0018      	movs	r0, r3
 8007942:	f000 f815 	bl	8007970 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007946:	4909      	ldr	r1, [pc, #36]	@ (800796c <Get_SerialNum+0x58>)
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2204      	movs	r2, #4
 800794c:	0018      	movs	r0, r3
 800794e:	f000 f80f 	bl	8007970 <IntToUnicode>
  }
}
 8007952:	46c0      	nop			@ (mov r8, r8)
 8007954:	46bd      	mov	sp, r7
 8007956:	b004      	add	sp, #16
 8007958:	bd80      	pop	{r7, pc}
 800795a:	46c0      	nop			@ (mov r8, r8)
 800795c:	1ffff7ac 	.word	0x1ffff7ac
 8007960:	1ffff7b0 	.word	0x1ffff7b0
 8007964:	1ffff7b4 	.word	0x1ffff7b4
 8007968:	20000172 	.word	0x20000172
 800796c:	20000182 	.word	0x20000182

08007970 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	1dfb      	adds	r3, r7, #7
 800797c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800797e:	2117      	movs	r1, #23
 8007980:	187b      	adds	r3, r7, r1
 8007982:	2200      	movs	r2, #0
 8007984:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8007986:	187b      	adds	r3, r7, r1
 8007988:	2200      	movs	r2, #0
 800798a:	701a      	strb	r2, [r3, #0]
 800798c:	e02f      	b.n	80079ee <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	0f1b      	lsrs	r3, r3, #28
 8007992:	2b09      	cmp	r3, #9
 8007994:	d80d      	bhi.n	80079b2 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	0f1b      	lsrs	r3, r3, #28
 800799a:	b2da      	uxtb	r2, r3
 800799c:	2317      	movs	r3, #23
 800799e:	18fb      	adds	r3, r7, r3
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	005b      	lsls	r3, r3, #1
 80079a4:	0019      	movs	r1, r3
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	185b      	adds	r3, r3, r1
 80079aa:	3230      	adds	r2, #48	@ 0x30
 80079ac:	b2d2      	uxtb	r2, r2
 80079ae:	701a      	strb	r2, [r3, #0]
 80079b0:	e00c      	b.n	80079cc <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	0f1b      	lsrs	r3, r3, #28
 80079b6:	b2da      	uxtb	r2, r3
 80079b8:	2317      	movs	r3, #23
 80079ba:	18fb      	adds	r3, r7, r3
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	005b      	lsls	r3, r3, #1
 80079c0:	0019      	movs	r1, r3
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	185b      	adds	r3, r3, r1
 80079c6:	3237      	adds	r2, #55	@ 0x37
 80079c8:	b2d2      	uxtb	r2, r2
 80079ca:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	011b      	lsls	r3, r3, #4
 80079d0:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80079d2:	2117      	movs	r1, #23
 80079d4:	187b      	adds	r3, r7, r1
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	3301      	adds	r3, #1
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	18d3      	adds	r3, r2, r3
 80079e0:	2200      	movs	r2, #0
 80079e2:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80079e4:	187b      	adds	r3, r7, r1
 80079e6:	781a      	ldrb	r2, [r3, #0]
 80079e8:	187b      	adds	r3, r7, r1
 80079ea:	3201      	adds	r2, #1
 80079ec:	701a      	strb	r2, [r3, #0]
 80079ee:	2317      	movs	r3, #23
 80079f0:	18fa      	adds	r2, r7, r3
 80079f2:	1dfb      	adds	r3, r7, #7
 80079f4:	7812      	ldrb	r2, [r2, #0]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d3c8      	bcc.n	800798e <IntToUnicode+0x1e>
  }
}
 80079fc:	46c0      	nop			@ (mov r8, r8)
 80079fe:	46c0      	nop			@ (mov r8, r8)
 8007a00:	46bd      	mov	sp, r7
 8007a02:	b006      	add	sp, #24
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  // MAMIEL	START
  HAL_FLASH_Unlock();
 8007a0a:	f7f8 ff43 	bl	8000894 <HAL_FLASH_Unlock>
  // MAMIEL	END
  return (USBD_OK);
 8007a0e:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8007a10:	0018      	movs	r0, r3
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // MAMIEL	START
  HAL_FLASH_Lock();
 8007a1a:	f7f8 ff61 	bl	80008e0 <HAL_FLASH_Lock>
  // MAMIEL	END
  return (USBD_OK);
 8007a1e:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8007a20:	0018      	movs	r0, r3
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
	...

08007a28 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b088      	sub	sp, #32
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */
  // MAMIEL	START
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t SectorError;
  __IO uint32_t erase_addr;
  pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8007a30:	2114      	movs	r1, #20
 8007a32:	187b      	adds	r3, r7, r1
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]
  pEraseInit.NbPages = 2;
 8007a38:	187b      	adds	r3, r7, r1
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	609a      	str	r2, [r3, #8]

  erase_addr = Add;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	60fb      	str	r3, [r7, #12]
  erase_addr >>= 12;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	0b1b      	lsrs	r3, r3, #12
 8007a46:	60fb      	str	r3, [r7, #12]
  erase_addr <<= 12;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	031b      	lsls	r3, r3, #12
 8007a4c:	60fb      	str	r3, [r7, #12]

  pEraseInit.PageAddress = erase_addr;
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	187b      	adds	r3, r7, r1
 8007a52:	605a      	str	r2, [r3, #4]

  if (DFU_MEM_IS_PROTECTED_AREA(erase_addr))
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	2380      	movs	r3, #128	@ 0x80
 8007a58:	051b      	lsls	r3, r3, #20
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d305      	bcc.n	8007a6a <MEM_If_Erase_FS+0x42>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	4a0a      	ldr	r2, [pc, #40]	@ (8007a8c <MEM_If_Erase_FS+0x64>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d801      	bhi.n	8007a6a <MEM_If_Erase_FS+0x42>
  {
	return (USBD_FAIL);
 8007a66:	2302      	movs	r3, #2
 8007a68:	e00c      	b.n	8007a84 <MEM_If_Erase_FS+0x5c>
  }
  else
  if(HAL_FLASHEx_Erase(&pEraseInit,&SectorError)!=HAL_OK)
 8007a6a:	2310      	movs	r3, #16
 8007a6c:	18fa      	adds	r2, r7, r3
 8007a6e:	2314      	movs	r3, #20
 8007a70:	18fb      	adds	r3, r7, r3
 8007a72:	0011      	movs	r1, r2
 8007a74:	0018      	movs	r0, r3
 8007a76:	f7f8 ffcd 	bl	8000a14 <HAL_FLASHEx_Erase>
 8007a7a:	1e03      	subs	r3, r0, #0
 8007a7c:	d001      	beq.n	8007a82 <MEM_If_Erase_FS+0x5a>
  {
	return (USBD_FAIL);
 8007a7e:	2302      	movs	r3, #2
 8007a80:	e000      	b.n	8007a84 <MEM_If_Erase_FS+0x5c>
  }
  // MAMIEL END
  return (USBD_OK);
 8007a82:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8007a84:	0018      	movs	r0, r3
 8007a86:	46bd      	mov	sp, r7
 8007a88:	b008      	add	sp, #32
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	08007fff 	.word	0x08007fff

08007a90 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8007a90:	b5b0      	push	{r4, r5, r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  // MAMIEL	START
  uint32_t i = 0;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	617b      	str	r3, [r7, #20]

  if (DFU_MEM_IS_PROTECTED_AREA((uint32_t)dest))
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	2380      	movs	r3, #128	@ 0x80
 8007aa4:	051b      	lsls	r3, r3, #20
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d305      	bcc.n	8007ab6 <MEM_If_Write_FS+0x26>
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	4a19      	ldr	r2, [pc, #100]	@ (8007b14 <MEM_If_Write_FS+0x84>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d801      	bhi.n	8007ab6 <MEM_If_Write_FS+0x26>
  {
	return (USBD_FAIL);
 8007ab2:	2302      	movs	r3, #2
 8007ab4:	e02a      	b.n	8007b0c <MEM_If_Write_FS+0x7c>
  }

  for(i = 0;i < Len;i += 4)
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	617b      	str	r3, [r7, #20]
 8007aba:	e022      	b.n	8007b02 <MEM_If_Write_FS+0x72>
  {
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
	   (uint32_t)(dest + i),*(uint32_t *)(src + i)) == HAL_OK)
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	18d3      	adds	r3, r2, r3
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8007ac2:	0019      	movs	r1, r3
	   (uint32_t)(dest + i),*(uint32_t *)(src + i)) == HAL_OK)
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	18d3      	adds	r3, r2, r3
 8007aca:	681b      	ldr	r3, [r3, #0]
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8007acc:	001c      	movs	r4, r3
 8007ace:	2300      	movs	r3, #0
 8007ad0:	001d      	movs	r5, r3
 8007ad2:	0022      	movs	r2, r4
 8007ad4:	002b      	movs	r3, r5
 8007ad6:	2002      	movs	r0, #2
 8007ad8:	f7f8 fe46 	bl	8000768 <HAL_FLASH_Program>
 8007adc:	1e03      	subs	r3, r0, #0
 8007ade:	d10b      	bne.n	8007af8 <MEM_If_Write_FS+0x68>
	{

	  if(*(uint32_t *)(src + i) != *(uint32_t *)(dest + i))
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	18d3      	adds	r3, r2, r3
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	68b9      	ldr	r1, [r7, #8]
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	18cb      	adds	r3, r1, r3
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d003      	beq.n	8007afc <MEM_If_Write_FS+0x6c>
		  return (USBD_FAIL);
 8007af4:	2302      	movs	r3, #2
 8007af6:	e009      	b.n	8007b0c <MEM_If_Write_FS+0x7c>
	}
	else
	  return (USBD_BUSY);
 8007af8:	2301      	movs	r3, #1
 8007afa:	e007      	b.n	8007b0c <MEM_If_Write_FS+0x7c>
  for(i = 0;i < Len;i += 4)
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	3304      	adds	r3, #4
 8007b00:	617b      	str	r3, [r7, #20]
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d3d8      	bcc.n	8007abc <MEM_If_Write_FS+0x2c>
  }
  // MAMIEL END
  return (USBD_OK);
 8007b0a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007b0c:	0018      	movs	r0, r3
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	b006      	add	sp, #24
 8007b12:	bdb0      	pop	{r4, r5, r7, pc}
 8007b14:	08007fff 	.word	0x08007fff

08007b18 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  // MAMIEL START
	uint8_t *src_ptr = src;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	617b      	str	r3, [r7, #20]
	for(uint32_t i=0; i<Len; i++)
 8007b28:	2300      	movs	r3, #0
 8007b2a:	613b      	str	r3, [r7, #16]
 8007b2c:	e00b      	b.n	8007b46 <MEM_If_Read_FS+0x2e>
	{
		dest[i] = *src_ptr;
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	18d3      	adds	r3, r2, r3
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	7812      	ldrb	r2, [r2, #0]
 8007b38:	701a      	strb	r2, [r3, #0]
		src_ptr++;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	617b      	str	r3, [r7, #20]
	for(uint32_t i=0; i<Len; i++)
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	3301      	adds	r3, #1
 8007b44:	613b      	str	r3, [r7, #16]
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d3ef      	bcc.n	8007b2e <MEM_If_Read_FS+0x16>
	}

	return (uint8_t *)(dest);
 8007b4e:	68bb      	ldr	r3, [r7, #8]
  // MAMIEL END
  /* USER CODE END 4 */
}
 8007b50:	0018      	movs	r0, r3
 8007b52:	46bd      	mov	sp, r7
 8007b54:	b006      	add	sp, #24
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	607a      	str	r2, [r7, #4]
 8007b62:	200b      	movs	r0, #11
 8007b64:	183b      	adds	r3, r7, r0
 8007b66:	1c0a      	adds	r2, r1, #0
 8007b68:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 8007b6a:	183b      	adds	r3, r7, r0
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00e      	beq.n	8007b90 <MEM_If_GetStatus_FS+0x38>
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d119      	bne.n	8007baa <MEM_If_GetStatus_FS+0x52>
  {
    case DFU_MEDIA_PROGRAM:
    	// MAMIEL START
    	buffer[1] = (uint8_t)FLASH_PROGRAM_TIME;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	2232      	movs	r2, #50	@ 0x32
 8007b7c:	701a      	strb	r2, [r3, #0]
		buffer[2] = (uint8_t)(FLASH_PROGRAM_TIME << 8);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	3302      	adds	r3, #2
 8007b82:	2200      	movs	r2, #0
 8007b84:	701a      	strb	r2, [r3, #0]
		buffer[3] = 0;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	3303      	adds	r3, #3
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	701a      	strb	r2, [r3, #0]
		// MAMIEL END
    break;
 8007b8e:	e00d      	b.n	8007bac <MEM_If_GetStatus_FS+0x54>

    case DFU_MEDIA_ERASE:
    	buffer[1] = (uint8_t)FLASH_ERASE_TIME;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	3301      	adds	r3, #1
 8007b94:	22e8      	movs	r2, #232	@ 0xe8
 8007b96:	701a      	strb	r2, [r3, #0]
		buffer[2] = (uint8_t)(FLASH_ERASE_TIME << 8);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3302      	adds	r3, #2
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	701a      	strb	r2, [r3, #0]
		buffer[3] = 0;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	3303      	adds	r3, #3
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	701a      	strb	r2, [r3, #0]
		break;
 8007ba8:	e000      	b.n	8007bac <MEM_If_GetStatus_FS+0x54>
    default:

    break;
 8007baa:	46c0      	nop			@ (mov r8, r8)
  }
  return (USBD_OK);
 8007bac:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007bae:	0018      	movs	r0, r3
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	b004      	add	sp, #16
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a0e      	ldr	r2, [pc, #56]	@ (8007c00 <HAL_PCD_MspInit+0x48>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d115      	bne.n	8007bf6 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007bca:	4b0e      	ldr	r3, [pc, #56]	@ (8007c04 <HAL_PCD_MspInit+0x4c>)
 8007bcc:	69da      	ldr	r2, [r3, #28]
 8007bce:	4b0d      	ldr	r3, [pc, #52]	@ (8007c04 <HAL_PCD_MspInit+0x4c>)
 8007bd0:	2180      	movs	r1, #128	@ 0x80
 8007bd2:	0409      	lsls	r1, r1, #16
 8007bd4:	430a      	orrs	r2, r1
 8007bd6:	61da      	str	r2, [r3, #28]
 8007bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8007c04 <HAL_PCD_MspInit+0x4c>)
 8007bda:	69da      	ldr	r2, [r3, #28]
 8007bdc:	2380      	movs	r3, #128	@ 0x80
 8007bde:	041b      	lsls	r3, r3, #16
 8007be0:	4013      	ands	r3, r2
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007be6:	2200      	movs	r2, #0
 8007be8:	2100      	movs	r1, #0
 8007bea:	201f      	movs	r0, #31
 8007bec:	f7f8 fd8a 	bl	8000704 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007bf0:	201f      	movs	r0, #31
 8007bf2:	f7f8 fd9c 	bl	800072e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007bf6:	46c0      	nop			@ (mov r8, r8)
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	b004      	add	sp, #16
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	46c0      	nop			@ (mov r8, r8)
 8007c00:	40005c00 	.word	0x40005c00
 8007c04:	40021000 	.word	0x40021000

08007c08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	23b6      	movs	r3, #182	@ 0xb6
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	58d2      	ldr	r2, [r2, r3]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	21a6      	movs	r1, #166	@ 0xa6
 8007c1c:	0089      	lsls	r1, r1, #2
 8007c1e:	468c      	mov	ip, r1
 8007c20:	4463      	add	r3, ip
 8007c22:	0019      	movs	r1, r3
 8007c24:	0010      	movs	r0, r2
 8007c26:	f7fe fc0f 	bl	8006448 <USBD_LL_SetupStage>
}
 8007c2a:	46c0      	nop			@ (mov r8, r8)
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	b002      	add	sp, #8
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c32:	b590      	push	{r4, r7, lr}
 8007c34:	b083      	sub	sp, #12
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	000a      	movs	r2, r1
 8007c3c:	1cfb      	adds	r3, r7, #3
 8007c3e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	23b6      	movs	r3, #182	@ 0xb6
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	58d4      	ldr	r4, [r2, r3]
 8007c48:	1cfb      	adds	r3, r7, #3
 8007c4a:	781a      	ldrb	r2, [r3, #0]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	23b2      	movs	r3, #178	@ 0xb2
 8007c50:	0059      	lsls	r1, r3, #1
 8007c52:	0013      	movs	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	189b      	adds	r3, r3, r2
 8007c58:	00db      	lsls	r3, r3, #3
 8007c5a:	18c3      	adds	r3, r0, r3
 8007c5c:	185b      	adds	r3, r3, r1
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	1cfb      	adds	r3, r7, #3
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	0019      	movs	r1, r3
 8007c66:	0020      	movs	r0, r4
 8007c68:	f7fe fc4c 	bl	8006504 <USBD_LL_DataOutStage>
}
 8007c6c:	46c0      	nop			@ (mov r8, r8)
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	b003      	add	sp, #12
 8007c72:	bd90      	pop	{r4, r7, pc}

08007c74 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	000a      	movs	r2, r1
 8007c7e:	1cfb      	adds	r3, r7, #3
 8007c80:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	23b6      	movs	r3, #182	@ 0xb6
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	58d0      	ldr	r0, [r2, r3]
 8007c8a:	1cfb      	adds	r3, r7, #3
 8007c8c:	781a      	ldrb	r2, [r3, #0]
 8007c8e:	6879      	ldr	r1, [r7, #4]
 8007c90:	0013      	movs	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	189b      	adds	r3, r3, r2
 8007c96:	00db      	lsls	r3, r3, #3
 8007c98:	18cb      	adds	r3, r1, r3
 8007c9a:	3324      	adds	r3, #36	@ 0x24
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	1cfb      	adds	r3, r7, #3
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	0019      	movs	r1, r3
 8007ca4:	f7fe fcb0 	bl	8006608 <USBD_LL_DataInStage>
}
 8007ca8:	46c0      	nop			@ (mov r8, r8)
 8007caa:	46bd      	mov	sp, r7
 8007cac:	b002      	add	sp, #8
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	23b6      	movs	r3, #182	@ 0xb6
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	58d3      	ldr	r3, [r2, r3]
 8007cc0:	0018      	movs	r0, r3
 8007cc2:	f7fe fde7 	bl	8006894 <USBD_LL_SOF>
}
 8007cc6:	46c0      	nop			@ (mov r8, r8)
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	b002      	add	sp, #8
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b084      	sub	sp, #16
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007cd6:	230f      	movs	r3, #15
 8007cd8:	18fb      	adds	r3, r7, r3
 8007cda:	2201      	movs	r2, #1
 8007cdc:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	795b      	ldrb	r3, [r3, #5]
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d001      	beq.n	8007cea <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8007ce6:	f7f8 fb59 	bl	800039c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	23b6      	movs	r3, #182	@ 0xb6
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	58d2      	ldr	r2, [r2, r3]
 8007cf2:	230f      	movs	r3, #15
 8007cf4:	18fb      	adds	r3, r7, r3
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	0019      	movs	r1, r3
 8007cfa:	0010      	movs	r0, r2
 8007cfc:	f7fe fd89 	bl	8006812 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	23b6      	movs	r3, #182	@ 0xb6
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	58d3      	ldr	r3, [r2, r3]
 8007d08:	0018      	movs	r0, r3
 8007d0a:	f7fe fd3a 	bl	8006782 <USBD_LL_Reset>
}
 8007d0e:	46c0      	nop			@ (mov r8, r8)
 8007d10:	46bd      	mov	sp, r7
 8007d12:	b004      	add	sp, #16
 8007d14:	bd80      	pop	{r7, pc}
	...

08007d18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	23b6      	movs	r3, #182	@ 0xb6
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	58d3      	ldr	r3, [r2, r3]
 8007d28:	0018      	movs	r0, r3
 8007d2a:	f7fe fd83 	bl	8006834 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	7a5b      	ldrb	r3, [r3, #9]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d005      	beq.n	8007d42 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d36:	4b05      	ldr	r3, [pc, #20]	@ (8007d4c <HAL_PCD_SuspendCallback+0x34>)
 8007d38:	691a      	ldr	r2, [r3, #16]
 8007d3a:	4b04      	ldr	r3, [pc, #16]	@ (8007d4c <HAL_PCD_SuspendCallback+0x34>)
 8007d3c:	2106      	movs	r1, #6
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8007d42:	46c0      	nop			@ (mov r8, r8)
 8007d44:	46bd      	mov	sp, r7
 8007d46:	b002      	add	sp, #8
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	46c0      	nop			@ (mov r8, r8)
 8007d4c:	e000ed00 	.word	0xe000ed00

08007d50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	7a5b      	ldrb	r3, [r3, #9]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d007      	beq.n	8007d70 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d60:	4b09      	ldr	r3, [pc, #36]	@ (8007d88 <HAL_PCD_ResumeCallback+0x38>)
 8007d62:	691a      	ldr	r2, [r3, #16]
 8007d64:	4b08      	ldr	r3, [pc, #32]	@ (8007d88 <HAL_PCD_ResumeCallback+0x38>)
 8007d66:	2106      	movs	r1, #6
 8007d68:	438a      	bics	r2, r1
 8007d6a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8007d6c:	f000 fa08 	bl	8008180 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	23b6      	movs	r3, #182	@ 0xb6
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	58d3      	ldr	r3, [r2, r3]
 8007d78:	0018      	movs	r0, r3
 8007d7a:	f7fe fd73 	bl	8006864 <USBD_LL_Resume>
}
 8007d7e:	46c0      	nop			@ (mov r8, r8)
 8007d80:	46bd      	mov	sp, r7
 8007d82:	b002      	add	sp, #8
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	46c0      	nop			@ (mov r8, r8)
 8007d88:	e000ed00 	.word	0xe000ed00

08007d8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007d94:	4a1e      	ldr	r2, [pc, #120]	@ (8007e10 <USBD_LL_Init+0x84>)
 8007d96:	23b6      	movs	r3, #182	@ 0xb6
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	6879      	ldr	r1, [r7, #4]
 8007d9c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	23b0      	movs	r3, #176	@ 0xb0
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	491a      	ldr	r1, [pc, #104]	@ (8007e10 <USBD_LL_Init+0x84>)
 8007da6:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8007da8:	4b19      	ldr	r3, [pc, #100]	@ (8007e10 <USBD_LL_Init+0x84>)
 8007daa:	4a1a      	ldr	r2, [pc, #104]	@ (8007e14 <USBD_LL_Init+0x88>)
 8007dac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007dae:	4b18      	ldr	r3, [pc, #96]	@ (8007e10 <USBD_LL_Init+0x84>)
 8007db0:	2208      	movs	r2, #8
 8007db2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007db4:	4b16      	ldr	r3, [pc, #88]	@ (8007e10 <USBD_LL_Init+0x84>)
 8007db6:	2202      	movs	r2, #2
 8007db8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007dba:	4b15      	ldr	r3, [pc, #84]	@ (8007e10 <USBD_LL_Init+0x84>)
 8007dbc:	2202      	movs	r2, #2
 8007dbe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007dc0:	4b13      	ldr	r3, [pc, #76]	@ (8007e10 <USBD_LL_Init+0x84>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007dc6:	4b12      	ldr	r3, [pc, #72]	@ (8007e10 <USBD_LL_Init+0x84>)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007dcc:	4b10      	ldr	r3, [pc, #64]	@ (8007e10 <USBD_LL_Init+0x84>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8007e10 <USBD_LL_Init+0x84>)
 8007dd4:	0018      	movs	r0, r3
 8007dd6:	f7f9 f857 	bl	8000e88 <HAL_PCD_Init>
 8007dda:	1e03      	subs	r3, r0, #0
 8007ddc:	d001      	beq.n	8007de2 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8007dde:	f7f8 fadd 	bl	800039c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	23b0      	movs	r3, #176	@ 0xb0
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	58d0      	ldr	r0, [r2, r3]
 8007dea:	2318      	movs	r3, #24
 8007dec:	2200      	movs	r2, #0
 8007dee:	2100      	movs	r1, #0
 8007df0:	f7fa fdc2 	bl	8002978 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	23b0      	movs	r3, #176	@ 0xb0
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	58d0      	ldr	r0, [r2, r3]
 8007dfc:	2358      	movs	r3, #88	@ 0x58
 8007dfe:	2200      	movs	r2, #0
 8007e00:	2180      	movs	r1, #128	@ 0x80
 8007e02:	f7fa fdb9 	bl	8002978 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	0018      	movs	r0, r3
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	b002      	add	sp, #8
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	200007ac 	.word	0x200007ac
 8007e14:	40005c00 	.word	0x40005c00

08007e18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e20:	210f      	movs	r1, #15
 8007e22:	187b      	adds	r3, r7, r1
 8007e24:	2200      	movs	r2, #0
 8007e26:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e28:	260e      	movs	r6, #14
 8007e2a:	19bb      	adds	r3, r7, r6
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	23b0      	movs	r3, #176	@ 0xb0
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	58d3      	ldr	r3, [r2, r3]
 8007e38:	000d      	movs	r5, r1
 8007e3a:	187c      	adds	r4, r7, r1
 8007e3c:	0018      	movs	r0, r3
 8007e3e:	f7f9 f917 	bl	8001070 <HAL_PCD_Start>
 8007e42:	0003      	movs	r3, r0
 8007e44:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e46:	19bc      	adds	r4, r7, r6
 8007e48:	197b      	adds	r3, r7, r5
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	0018      	movs	r0, r3
 8007e4e:	f000 f99e 	bl	800818e <USBD_Get_USB_Status>
 8007e52:	0003      	movs	r3, r0
 8007e54:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007e56:	19bb      	adds	r3, r7, r6
 8007e58:	781b      	ldrb	r3, [r3, #0]
}
 8007e5a:	0018      	movs	r0, r3
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	b005      	add	sp, #20
 8007e60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e62 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8007e62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e64:	b085      	sub	sp, #20
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e6a:	210f      	movs	r1, #15
 8007e6c:	187b      	adds	r3, r7, r1
 8007e6e:	2200      	movs	r2, #0
 8007e70:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e72:	260e      	movs	r6, #14
 8007e74:	19bb      	adds	r3, r7, r6
 8007e76:	2200      	movs	r2, #0
 8007e78:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	23b0      	movs	r3, #176	@ 0xb0
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	58d3      	ldr	r3, [r2, r3]
 8007e82:	000d      	movs	r5, r1
 8007e84:	187c      	adds	r4, r7, r1
 8007e86:	0018      	movs	r0, r3
 8007e88:	f7f9 f917 	bl	80010ba <HAL_PCD_Stop>
 8007e8c:	0003      	movs	r3, r0
 8007e8e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e90:	19bc      	adds	r4, r7, r6
 8007e92:	197b      	adds	r3, r7, r5
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	0018      	movs	r0, r3
 8007e98:	f000 f979 	bl	800818e <USBD_Get_USB_Status>
 8007e9c:	0003      	movs	r3, r0
 8007e9e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007ea0:	19bb      	adds	r3, r7, r6
 8007ea2:	781b      	ldrb	r3, [r3, #0]
}
 8007ea4:	0018      	movs	r0, r3
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	b005      	add	sp, #20
 8007eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007eac <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	000c      	movs	r4, r1
 8007eb6:	0010      	movs	r0, r2
 8007eb8:	0019      	movs	r1, r3
 8007eba:	1cfb      	adds	r3, r7, #3
 8007ebc:	1c22      	adds	r2, r4, #0
 8007ebe:	701a      	strb	r2, [r3, #0]
 8007ec0:	1cbb      	adds	r3, r7, #2
 8007ec2:	1c02      	adds	r2, r0, #0
 8007ec4:	701a      	strb	r2, [r3, #0]
 8007ec6:	003b      	movs	r3, r7
 8007ec8:	1c0a      	adds	r2, r1, #0
 8007eca:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ecc:	260f      	movs	r6, #15
 8007ece:	19bb      	adds	r3, r7, r6
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ed4:	250e      	movs	r5, #14
 8007ed6:	197b      	adds	r3, r7, r5
 8007ed8:	2200      	movs	r2, #0
 8007eda:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	23b0      	movs	r3, #176	@ 0xb0
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	58d0      	ldr	r0, [r2, r3]
 8007ee4:	19bc      	adds	r4, r7, r6
 8007ee6:	1cbb      	adds	r3, r7, #2
 8007ee8:	781d      	ldrb	r5, [r3, #0]
 8007eea:	003b      	movs	r3, r7
 8007eec:	881a      	ldrh	r2, [r3, #0]
 8007eee:	1cfb      	adds	r3, r7, #3
 8007ef0:	7819      	ldrb	r1, [r3, #0]
 8007ef2:	002b      	movs	r3, r5
 8007ef4:	f7f9 fa74 	bl	80013e0 <HAL_PCD_EP_Open>
 8007ef8:	0003      	movs	r3, r0
 8007efa:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007efc:	250e      	movs	r5, #14
 8007efe:	197c      	adds	r4, r7, r5
 8007f00:	19bb      	adds	r3, r7, r6
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	0018      	movs	r0, r3
 8007f06:	f000 f942 	bl	800818e <USBD_Get_USB_Status>
 8007f0a:	0003      	movs	r3, r0
 8007f0c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007f0e:	197b      	adds	r3, r7, r5
 8007f10:	781b      	ldrb	r3, [r3, #0]
}
 8007f12:	0018      	movs	r0, r3
 8007f14:	46bd      	mov	sp, r7
 8007f16:	b005      	add	sp, #20
 8007f18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f1a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f1c:	b085      	sub	sp, #20
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
 8007f22:	000a      	movs	r2, r1
 8007f24:	1cfb      	adds	r3, r7, #3
 8007f26:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f28:	210f      	movs	r1, #15
 8007f2a:	187b      	adds	r3, r7, r1
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f30:	260e      	movs	r6, #14
 8007f32:	19bb      	adds	r3, r7, r6
 8007f34:	2200      	movs	r2, #0
 8007f36:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	23b0      	movs	r3, #176	@ 0xb0
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	58d2      	ldr	r2, [r2, r3]
 8007f40:	000d      	movs	r5, r1
 8007f42:	187c      	adds	r4, r7, r1
 8007f44:	1cfb      	adds	r3, r7, #3
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	0019      	movs	r1, r3
 8007f4a:	0010      	movs	r0, r2
 8007f4c:	f7f9 fb2a 	bl	80015a4 <HAL_PCD_EP_SetStall>
 8007f50:	0003      	movs	r3, r0
 8007f52:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f54:	19bc      	adds	r4, r7, r6
 8007f56:	197b      	adds	r3, r7, r5
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	0018      	movs	r0, r3
 8007f5c:	f000 f917 	bl	800818e <USBD_Get_USB_Status>
 8007f60:	0003      	movs	r3, r0
 8007f62:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007f64:	19bb      	adds	r3, r7, r6
 8007f66:	781b      	ldrb	r3, [r3, #0]
}
 8007f68:	0018      	movs	r0, r3
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	b005      	add	sp, #20
 8007f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f70 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	000a      	movs	r2, r1
 8007f7a:	1cfb      	adds	r3, r7, #3
 8007f7c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f7e:	210f      	movs	r1, #15
 8007f80:	187b      	adds	r3, r7, r1
 8007f82:	2200      	movs	r2, #0
 8007f84:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f86:	260e      	movs	r6, #14
 8007f88:	19bb      	adds	r3, r7, r6
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	23b0      	movs	r3, #176	@ 0xb0
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	58d2      	ldr	r2, [r2, r3]
 8007f96:	000d      	movs	r5, r1
 8007f98:	187c      	adds	r4, r7, r1
 8007f9a:	1cfb      	adds	r3, r7, #3
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	0019      	movs	r1, r3
 8007fa0:	0010      	movs	r0, r2
 8007fa2:	f7f9 fb5b 	bl	800165c <HAL_PCD_EP_ClrStall>
 8007fa6:	0003      	movs	r3, r0
 8007fa8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007faa:	19bc      	adds	r4, r7, r6
 8007fac:	197b      	adds	r3, r7, r5
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	0018      	movs	r0, r3
 8007fb2:	f000 f8ec 	bl	800818e <USBD_Get_USB_Status>
 8007fb6:	0003      	movs	r3, r0
 8007fb8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007fba:	19bb      	adds	r3, r7, r6
 8007fbc:	781b      	ldrb	r3, [r3, #0]
}
 8007fbe:	0018      	movs	r0, r3
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	b005      	add	sp, #20
 8007fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007fc6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b084      	sub	sp, #16
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	000a      	movs	r2, r1
 8007fd0:	1cfb      	adds	r3, r7, #3
 8007fd2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	23b0      	movs	r3, #176	@ 0xb0
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	58d3      	ldr	r3, [r2, r3]
 8007fdc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007fde:	1cfb      	adds	r3, r7, #3
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	b25b      	sxtb	r3, r3
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	da0c      	bge.n	8008002 <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007fe8:	1cfb      	adds	r3, r7, #3
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	227f      	movs	r2, #127	@ 0x7f
 8007fee:	401a      	ands	r2, r3
 8007ff0:	68f9      	ldr	r1, [r7, #12]
 8007ff2:	0013      	movs	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	189b      	adds	r3, r3, r2
 8007ff8:	00db      	lsls	r3, r3, #3
 8007ffa:	18cb      	adds	r3, r1, r3
 8007ffc:	3312      	adds	r3, #18
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	e00d      	b.n	800801e <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008002:	1cfb      	adds	r3, r7, #3
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	227f      	movs	r2, #127	@ 0x7f
 8008008:	401a      	ands	r2, r3
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	23a9      	movs	r3, #169	@ 0xa9
 800800e:	0059      	lsls	r1, r3, #1
 8008010:	0013      	movs	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	189b      	adds	r3, r3, r2
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	18c3      	adds	r3, r0, r3
 800801a:	185b      	adds	r3, r3, r1
 800801c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800801e:	0018      	movs	r0, r3
 8008020:	46bd      	mov	sp, r7
 8008022:	b004      	add	sp, #16
 8008024:	bd80      	pop	{r7, pc}

08008026 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008026:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008028:	b085      	sub	sp, #20
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	000a      	movs	r2, r1
 8008030:	1cfb      	adds	r3, r7, #3
 8008032:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008034:	210f      	movs	r1, #15
 8008036:	187b      	adds	r3, r7, r1
 8008038:	2200      	movs	r2, #0
 800803a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800803c:	260e      	movs	r6, #14
 800803e:	19bb      	adds	r3, r7, r6
 8008040:	2200      	movs	r2, #0
 8008042:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	23b0      	movs	r3, #176	@ 0xb0
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	58d2      	ldr	r2, [r2, r3]
 800804c:	000d      	movs	r5, r1
 800804e:	187c      	adds	r4, r7, r1
 8008050:	1cfb      	adds	r3, r7, #3
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	0019      	movs	r1, r3
 8008056:	0010      	movs	r0, r2
 8008058:	f7f9 f998 	bl	800138c <HAL_PCD_SetAddress>
 800805c:	0003      	movs	r3, r0
 800805e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008060:	19bc      	adds	r4, r7, r6
 8008062:	197b      	adds	r3, r7, r5
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	0018      	movs	r0, r3
 8008068:	f000 f891 	bl	800818e <USBD_Get_USB_Status>
 800806c:	0003      	movs	r3, r0
 800806e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008070:	19bb      	adds	r3, r7, r6
 8008072:	781b      	ldrb	r3, [r3, #0]
}
 8008074:	0018      	movs	r0, r3
 8008076:	46bd      	mov	sp, r7
 8008078:	b005      	add	sp, #20
 800807a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800807c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800807c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800807e:	b087      	sub	sp, #28
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	0008      	movs	r0, r1
 8008086:	607a      	str	r2, [r7, #4]
 8008088:	0019      	movs	r1, r3
 800808a:	230b      	movs	r3, #11
 800808c:	18fb      	adds	r3, r7, r3
 800808e:	1c02      	adds	r2, r0, #0
 8008090:	701a      	strb	r2, [r3, #0]
 8008092:	2408      	movs	r4, #8
 8008094:	193b      	adds	r3, r7, r4
 8008096:	1c0a      	adds	r2, r1, #0
 8008098:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800809a:	2117      	movs	r1, #23
 800809c:	187b      	adds	r3, r7, r1
 800809e:	2200      	movs	r2, #0
 80080a0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080a2:	2516      	movs	r5, #22
 80080a4:	197b      	adds	r3, r7, r5
 80080a6:	2200      	movs	r2, #0
 80080a8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	23b0      	movs	r3, #176	@ 0xb0
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	58d0      	ldr	r0, [r2, r3]
 80080b2:	193b      	adds	r3, r7, r4
 80080b4:	881d      	ldrh	r5, [r3, #0]
 80080b6:	000e      	movs	r6, r1
 80080b8:	187c      	adds	r4, r7, r1
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	230b      	movs	r3, #11
 80080be:	18fb      	adds	r3, r7, r3
 80080c0:	7819      	ldrb	r1, [r3, #0]
 80080c2:	002b      	movs	r3, r5
 80080c4:	f7f9 fa32 	bl	800152c <HAL_PCD_EP_Transmit>
 80080c8:	0003      	movs	r3, r0
 80080ca:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080cc:	2516      	movs	r5, #22
 80080ce:	197c      	adds	r4, r7, r5
 80080d0:	19bb      	adds	r3, r7, r6
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	0018      	movs	r0, r3
 80080d6:	f000 f85a 	bl	800818e <USBD_Get_USB_Status>
 80080da:	0003      	movs	r3, r0
 80080dc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80080de:	197b      	adds	r3, r7, r5
 80080e0:	781b      	ldrb	r3, [r3, #0]
}
 80080e2:	0018      	movs	r0, r3
 80080e4:	46bd      	mov	sp, r7
 80080e6:	b007      	add	sp, #28
 80080e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080ea <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80080ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080ec:	b087      	sub	sp, #28
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	60f8      	str	r0, [r7, #12]
 80080f2:	0008      	movs	r0, r1
 80080f4:	607a      	str	r2, [r7, #4]
 80080f6:	0019      	movs	r1, r3
 80080f8:	230b      	movs	r3, #11
 80080fa:	18fb      	adds	r3, r7, r3
 80080fc:	1c02      	adds	r2, r0, #0
 80080fe:	701a      	strb	r2, [r3, #0]
 8008100:	2408      	movs	r4, #8
 8008102:	193b      	adds	r3, r7, r4
 8008104:	1c0a      	adds	r2, r1, #0
 8008106:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008108:	2117      	movs	r1, #23
 800810a:	187b      	adds	r3, r7, r1
 800810c:	2200      	movs	r2, #0
 800810e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008110:	2516      	movs	r5, #22
 8008112:	197b      	adds	r3, r7, r5
 8008114:	2200      	movs	r2, #0
 8008116:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	23b0      	movs	r3, #176	@ 0xb0
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	58d0      	ldr	r0, [r2, r3]
 8008120:	193b      	adds	r3, r7, r4
 8008122:	881d      	ldrh	r5, [r3, #0]
 8008124:	000e      	movs	r6, r1
 8008126:	187c      	adds	r4, r7, r1
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	230b      	movs	r3, #11
 800812c:	18fb      	adds	r3, r7, r3
 800812e:	7819      	ldrb	r1, [r3, #0]
 8008130:	002b      	movs	r3, r5
 8008132:	f7f9 f9c4 	bl	80014be <HAL_PCD_EP_Receive>
 8008136:	0003      	movs	r3, r0
 8008138:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800813a:	2516      	movs	r5, #22
 800813c:	197c      	adds	r4, r7, r5
 800813e:	19bb      	adds	r3, r7, r6
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	0018      	movs	r0, r3
 8008144:	f000 f823 	bl	800818e <USBD_Get_USB_Status>
 8008148:	0003      	movs	r3, r0
 800814a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800814c:	197b      	adds	r3, r7, r5
 800814e:	781b      	ldrb	r3, [r3, #0]
}
 8008150:	0018      	movs	r0, r3
 8008152:	46bd      	mov	sp, r7
 8008154:	b007      	add	sp, #28
 8008156:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008158 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008160:	4b02      	ldr	r3, [pc, #8]	@ (800816c <USBD_static_malloc+0x14>)
}
 8008162:	0018      	movs	r0, r3
 8008164:	46bd      	mov	sp, r7
 8008166:	b002      	add	sp, #8
 8008168:	bd80      	pop	{r7, pc}
 800816a:	46c0      	nop			@ (mov r8, r8)
 800816c:	20000a88 	.word	0x20000a88

08008170 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]

}
 8008178:	46c0      	nop			@ (mov r8, r8)
 800817a:	46bd      	mov	sp, r7
 800817c:	b002      	add	sp, #8
 800817e:	bd80      	pop	{r7, pc}

08008180 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008184:	f7f8 f860 	bl	8000248 <SystemClock_Config>
}
 8008188:	46c0      	nop			@ (mov r8, r8)
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b084      	sub	sp, #16
 8008192:	af00      	add	r7, sp, #0
 8008194:	0002      	movs	r2, r0
 8008196:	1dfb      	adds	r3, r7, #7
 8008198:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800819a:	230f      	movs	r3, #15
 800819c:	18fb      	adds	r3, r7, r3
 800819e:	2200      	movs	r2, #0
 80081a0:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 80081a2:	1dfb      	adds	r3, r7, #7
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	2b03      	cmp	r3, #3
 80081a8:	d017      	beq.n	80081da <USBD_Get_USB_Status+0x4c>
 80081aa:	dc1b      	bgt.n	80081e4 <USBD_Get_USB_Status+0x56>
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d00f      	beq.n	80081d0 <USBD_Get_USB_Status+0x42>
 80081b0:	dc18      	bgt.n	80081e4 <USBD_Get_USB_Status+0x56>
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d002      	beq.n	80081bc <USBD_Get_USB_Status+0x2e>
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d005      	beq.n	80081c6 <USBD_Get_USB_Status+0x38>
 80081ba:	e013      	b.n	80081e4 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80081bc:	230f      	movs	r3, #15
 80081be:	18fb      	adds	r3, r7, r3
 80081c0:	2200      	movs	r2, #0
 80081c2:	701a      	strb	r2, [r3, #0]
    break;
 80081c4:	e013      	b.n	80081ee <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081c6:	230f      	movs	r3, #15
 80081c8:	18fb      	adds	r3, r7, r3
 80081ca:	2202      	movs	r2, #2
 80081cc:	701a      	strb	r2, [r3, #0]
    break;
 80081ce:	e00e      	b.n	80081ee <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081d0:	230f      	movs	r3, #15
 80081d2:	18fb      	adds	r3, r7, r3
 80081d4:	2201      	movs	r2, #1
 80081d6:	701a      	strb	r2, [r3, #0]
    break;
 80081d8:	e009      	b.n	80081ee <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081da:	230f      	movs	r3, #15
 80081dc:	18fb      	adds	r3, r7, r3
 80081de:	2202      	movs	r2, #2
 80081e0:	701a      	strb	r2, [r3, #0]
    break;
 80081e2:	e004      	b.n	80081ee <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80081e4:	230f      	movs	r3, #15
 80081e6:	18fb      	adds	r3, r7, r3
 80081e8:	2202      	movs	r2, #2
 80081ea:	701a      	strb	r2, [r3, #0]
    break;
 80081ec:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 80081ee:	230f      	movs	r3, #15
 80081f0:	18fb      	adds	r3, r7, r3
 80081f2:	781b      	ldrb	r3, [r3, #0]
}
 80081f4:	0018      	movs	r0, r3
 80081f6:	46bd      	mov	sp, r7
 80081f8:	b004      	add	sp, #16
 80081fa:	bd80      	pop	{r7, pc}

080081fc <memset>:
 80081fc:	0003      	movs	r3, r0
 80081fe:	1882      	adds	r2, r0, r2
 8008200:	4293      	cmp	r3, r2
 8008202:	d100      	bne.n	8008206 <memset+0xa>
 8008204:	4770      	bx	lr
 8008206:	7019      	strb	r1, [r3, #0]
 8008208:	3301      	adds	r3, #1
 800820a:	e7f9      	b.n	8008200 <memset+0x4>

0800820c <__libc_init_array>:
 800820c:	b570      	push	{r4, r5, r6, lr}
 800820e:	2600      	movs	r6, #0
 8008210:	4c0c      	ldr	r4, [pc, #48]	@ (8008244 <__libc_init_array+0x38>)
 8008212:	4d0d      	ldr	r5, [pc, #52]	@ (8008248 <__libc_init_array+0x3c>)
 8008214:	1b64      	subs	r4, r4, r5
 8008216:	10a4      	asrs	r4, r4, #2
 8008218:	42a6      	cmp	r6, r4
 800821a:	d109      	bne.n	8008230 <__libc_init_array+0x24>
 800821c:	2600      	movs	r6, #0
 800821e:	f000 f819 	bl	8008254 <_init>
 8008222:	4c0a      	ldr	r4, [pc, #40]	@ (800824c <__libc_init_array+0x40>)
 8008224:	4d0a      	ldr	r5, [pc, #40]	@ (8008250 <__libc_init_array+0x44>)
 8008226:	1b64      	subs	r4, r4, r5
 8008228:	10a4      	asrs	r4, r4, #2
 800822a:	42a6      	cmp	r6, r4
 800822c:	d105      	bne.n	800823a <__libc_init_array+0x2e>
 800822e:	bd70      	pop	{r4, r5, r6, pc}
 8008230:	00b3      	lsls	r3, r6, #2
 8008232:	58eb      	ldr	r3, [r5, r3]
 8008234:	4798      	blx	r3
 8008236:	3601      	adds	r6, #1
 8008238:	e7ee      	b.n	8008218 <__libc_init_array+0xc>
 800823a:	00b3      	lsls	r3, r6, #2
 800823c:	58eb      	ldr	r3, [r5, r3]
 800823e:	4798      	blx	r3
 8008240:	3601      	adds	r6, #1
 8008242:	e7f2      	b.n	800822a <__libc_init_array+0x1e>
 8008244:	08008378 	.word	0x08008378
 8008248:	08008378 	.word	0x08008378
 800824c:	0800837c 	.word	0x0800837c
 8008250:	08008378 	.word	0x08008378

08008254 <_init>:
 8008254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008256:	46c0      	nop			@ (mov r8, r8)
 8008258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800825a:	bc08      	pop	{r3}
 800825c:	469e      	mov	lr, r3
 800825e:	4770      	bx	lr

08008260 <_fini>:
 8008260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008262:	46c0      	nop			@ (mov r8, r8)
 8008264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008266:	bc08      	pop	{r3}
 8008268:	469e      	mov	lr, r3
 800826a:	4770      	bx	lr
